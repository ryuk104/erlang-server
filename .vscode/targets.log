make all --print-data-base --no-builtin-variables --no-builtin-rules --question
# GNU Make 3.81
# Copyright (C) 2006  Free Software Foundation, Inc.
# This is free software; see the source for copying conditions.
# There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.

# This program built for i386-apple-darwin11.3.0
 
erlang.mk:26: Please upgrade to GNU Make 4 or later: https://erlang.mk/guide/installation.html


# Make data base, printed on Tue May 31 13:23:57 2022

# Variables

# makefile (from `erlang.mk', line 3679)
pkg_slack_homepage = https://github.com/DonBranson/slack
# makefile (from `erlang.mk', line 838)
pkg_cloudi_service_timers_description = Timers CloudI Service
# makefile (from `erlang.mk', line 545)
pkg_brod_repo = https://github.com/klarna/brod.git
# makefile (from `erlang.mk', line 1485)
pkg_erlfsmon_name = erlfsmon
# automatic
?F = $(notdir $?)
# makefile (from `erlang.mk', line 2223)
pkg_iso8601_homepage = https://github.com/seansawyer/erlang_iso8601
# makefile (from `erlang.mk', line 3734)
pkg_sshrpc_description = Erlang SSH RPC module (experimental)
# makefile (from `erlang.mk', line 1192)
pkg_ejabberd_fetch = git
# makefile (from `erlang.mk', line 1333)
pkg_epubnub_name = epubnub
# makefile (from `erlang.mk', line 478)
pkg_bifrost_description = Erlang FTP Server Framework
# makefile (from `erlang.mk', line 1313)
pkg_episcina_repo = https://github.com/erlware/episcina
# makefile (from `erlang.mk', line 2983)
pkg_openflow_homepage = https://github.com/renatoaguiar/erlang-openflow
# makefile (from `erlang.mk', line 3256)
pkg_quickrand_fetch = git
# makefile (from `erlang.mk', line 2877)
pkg_nitrogen_core_name = nitrogen_core
# makefile (from `erlang.mk', line 3642)
pkg_sighandler_commit = master
# makefile (from `erlang.mk', line 1641)
pkg_esh_mk_repo = https://github.com/crownedgrouse/esh.mk.git
# makefile (from `erlang.mk', line 3578)
pkg_setup_commit = master
# makefile (from `erlang.mk', line 609)
pkg_cferl_repo = https://github.com/ddossot/cferl
# makefile (from `erlang.mk', line 1642)
pkg_esh_mk_commit = master
# makefile (from `erlang.mk', line 457)
pkg_beanstalk_repo = https://github.com/tim/erlang-beanstalk
# makefile (from `erlang.mk', line 4201)
pkg_xref_runner_repo = https://github.com/inaka/xref_runner
# makefile (from `erlang.mk', line 2672)
pkg_meck_fetch = git
# makefile (from `erlang.mk', line 3783)
pkg_stdinout_pool_homepage = https://github.com/mattsta/erlang-stdinout-pool
# makefile (from `erlang.mk', line 230)
KERL_INSTALL_DIR = $(HOME)/erlang
# makefile (from `erlang.mk', line 3450)
pkg_riak_ensemble_commit = master
# makefile (from `erlang.mk', line 3745)
pkg_stable_repo = https://github.com/dvv/stable
# makefile (from `erlang.mk', line 377)
 
pkg_annotations_repo = https://github.com/hyperthunk/annotations
# makefile (from `erlang.mk', line 2393)
pkg_keys1value_repo = https://github.com/okeuday/keys1value
# makefile (from `erlang.mk', line 978)
pkg_debbie_commit = master
# makefile (from `erlang.mk', line 3466)
pkg_riak_pg_commit = master
# makefile (from `erlang.mk', line 2527)
pkg_ling_homepage = https://github.com/cloudozer/ling
# makefile (from `erlang.mk', line 5129)
ERLANG_MK_RECURSIVE_DEPS_LIST = $(ERLANG_MK_TMP)/recursive-deps-list.log
# makefile (from `erlang.mk', line 5025)
dep_fetch_cp = 	cp -R $(call dep_repo,$(1)) $(DEPS_DIR)/$(call dep_name,$(1));
# makefile (from `erlang.mk', line 4085)
pkg_vmq_bridge_name = vmq_bridge
# makefile (from `erlang.mk', line 2009)
pkg_getopt_repo = https://github.com/jcomellas/getopt
# makefile (from `erlang.mk', line 2440)
pkg_kvlists_fetch = git
# makefile (from `erlang.mk', line 3720)
pkg_sqerl_fetch = git
# makefile (from `erlang.mk', line 3509)
pkg_riaknostic_name = riaknostic
# makefile (from `erlang.mk', line 637)
pkg_chumak_name = chumak
# makefile (from `erlang.mk', line 7114)
HEX_TARBALL_OUTPUT_FILE = $(ERLANG_MK_TMP)/$(PROJECT).tar
# makefile (from `erlang.mk', line 791)
pkg_cloudi_service_map_reduce_homepage = http://cloudi.org/
# makefile (from `erlang.mk', line 7685)
sphinx.output = $(if $(sphinx_$1_output),$(sphinx_$1_output),$1)
# makefile (from `erlang.mk', line 2151)
pkg_hyper_homepage = https://github.com/GameAnalytics/hyper
# makefile (from `erlang.mk', line 1546)
pkg_erlport_commit = master
# makefile (from `erlang.mk', line 2569)
pkg_log4erl_repo = https://github.com/ahmednawras/log4erl
# makefile (from `erlang.mk', line 1293)
pkg_eper_name = eper
# makefile (from `erlang.mk', line 3333)
pkg_rec2json_name = rec2json
# makefile (from `erlang.mk', line 351)
pkg_aleppo_homepage = https://github.com/ErlyORM/aleppo
# makefile (from `erlang.mk', line 1082)
pkg_eavro_commit = master
# makefile (from `erlang.mk', line 1365)
pkg_erl_streams_name = erl_streams
# makefile (from `erlang.mk', line 1865)
pkg_folsomite_repo = https://github.com/campanja/folsomite
# makefile (from `erlang.mk', line 1269)
pkg_enm_name = enm
# makefile (from `erlang.mk', line 570)
pkg_cache_commit = master
# makefile (from `erlang.mk', line 4360)
_qfm_dep = $(if $(dep_fetch_$(1)),$(1),$(if $(IS_DEP),legacy,fail))
# makefile (from `erlang.mk', line 2313)
pkg_jsonerl_repo = https://github.com/lambder/jsonerl
# automatic
@F = $(notdir $@)
# makefile (from `erlang.mk', line 6309)
LDLIBS = -L"$(ERL_INTERFACE_LIB_DIR)" -lei
# makefile (from `erlang.mk', line 3802)
pkg_stripe_commit = v1
# makefile (from `erlang.mk', line 1614)
pkg_erserve_description = Erlang/Rserve communication interface
# makefile (from `erlang.mk', line 3735)
pkg_sshrpc_homepage = https://github.com/jj1bdx/sshrpc
# makefile (from `erlang.mk', line 2946)
pkg_oauth2_commit = master
# makefile (from `erlang.mk', line 3856)
pkg_syn_fetch = git
# makefile (from `erlang.mk', line 837)
pkg_cloudi_service_timers_name = cloudi_service_timers
# makefile (from `erlang.mk', line 183)
core_http_get = curl -Lf$(if $(filter-out 0,$(V)),,s)o $(call core_native_path,$1) $2
# makefile (from `erlang.mk', line 44)
V = 0
# makefile (from `erlang.mk', line 3616)
pkg_shotgun_fetch = git
# makefile (from `erlang.mk', line 4175)
pkg_wrangler_homepage = http://www.cs.kent.ac.uk/projects/wrangler/Home.html
# makefile (from `erlang.mk', line 3534)
pkg_rlimit_description = Magnus Klaar's rate limiter code from etorrent
# makefile (from `erlang.mk', line 410)
pkg_azdht_commit = master
# makefile (from `erlang.mk', line 2799)
pkg_mu2_homepage = https://github.com/ramsay-t/mu2
# makefile (from `erlang.mk', line 4395)
query_extra = $(call _qe,$(1),$(call query_fetch_method,$(1)))
# makefile (from `erlang.mk', line 477)
pkg_bifrost_name = bifrost
# makefile (from `erlang.mk', line 1583)
pkg_erlvolt_homepage = https://github.com/VoltDB/voltdb-client-erlang
# environment
_ = /usr/bin/make
# makefile (from `erlang.mk', line 4117)
pkg_vmq_snmp_name = vmq_snmp
# makefile (from `erlang.mk', line 1041)
pkg_dns_repo = https://github.com/aetrion/dns_erlang
# makefile (from `erlang.mk', line 3054)
pkg_percept2_description = Concurrent profiling tool for Erlang
# makefile (from `erlang.mk', line 735)
pkg_cloudi_service_db_pgsql_homepage = http://cloudi.org/
# makefile (from `erlang.mk', line 913)
pkg_cowboy_repo = https://github.com/ninenines/cowboy
# makefile (from `erlang.mk', line 2626)
pkg_mad_commit = master
# makefile (from `erlang.mk', line 205)
ERLANG_MK_BUILD_CONFIG = build.config
# makefile (from `erlang.mk', line 2218)
pkg_iris_commit = master
# makefile (from `erlang.mk', line 2768)
pkg_mongodb_fetch = git
# makefile (from `erlang.mk', line 4064)
pkg_vert_fetch = git
# makefile (from `erlang.mk', line 1434)
pkg_erlbrake_commit = master
# makefile (from `erlang.mk', line 3686)
pkg_smother_description = Extended code coverage metrics for Erlang.
# makefile (from `erlang.mk', line 751)
pkg_cloudi_service_db_tokyotyrant_homepage = http://cloudi.org/
# makefile (from `erlang.mk', line 658)
pkg_clique_commit = develop
# makefile (from `erlang.mk', line 3056)
pkg_percept2_fetch = git
# makefile (from `erlang.mk', line 4185)
pkg_wsock_repo = https://github.com/madtrick/wsock
# makefile (from `erlang.mk', line 2094)
pkg_gun_description = Asynchronous SPDY, HTTP and Websocket client written in Erlang.
# makefile (from `erlang.mk', line 711)
pkg_cloudi_service_db_elasticsearch_homepage = http://cloudi.org/
# makefile (from `erlang.mk', line 576)
pkg_cake_fetch = git
# makefile (from `erlang.mk', line 3930)
pkg_tinymt_commit = master
# makefile (from `erlang.mk', line 4182)
pkg_wsock_description = Erlang library to build WebSocket clients and servers
# makefile (from `erlang.mk', line 553)
pkg_bson_repo = https://github.com/comtihon/bson-erlang
# makefile (from `erlang.mk', line 2287)
pkg_json_homepage = https://github.com/talentdeficit/json
# makefile (from `erlang.mk', line 1063)
pkg_e2_homepage = http://e2project.org
# makefile (from `erlang.mk', line 2553)
pkg_locker_repo = https://github.com/wooga/locker
# makefile (from `erlang.mk', line 3790)
pkg_stockdb_description = Database for storing Stock Exchange quotes in erlang
# makefile (from `erlang.mk', line 1320)
pkg_eplot_fetch = git
# makefile (from `erlang.mk', line 3274)
pkg_rabbit_exchange_type_riak_commit = master
# makefile (from `erlang.mk', line 1711)
pkg_euthanasia_homepage = https://github.com/doubleyou/euthanasia
# makefile (from `erlang.mk', line 1717)
pkg_evum_name = evum
# makefile (from `erlang.mk', line 3431)
pkg_riak_core_homepage = https://github.com/basho/riak_core
# makefile (from `erlang.mk', line 1153)
pkg_eep_app_repo = https://github.com/darach/eep-erl
# makefile (from `erlang.mk', line 982)
pkg_decimal_description = An Erlang decimal arithmetic library
# makefile (from `erlang.mk', line 5281)
define makedep.erl
	E = ets:new(makedep, [bag]),
	G = digraph:new([acyclic]),
	ErlFiles = lists:usort(string:tokens("$(ERL_FILES)", " ")),
	DepsDir = "$(call core_native_path,$(DEPS_DIR))",
	AppsDir = "$(call core_native_path,$(APPS_DIR))",
	DepsDirsSrc = "$(if $(wildcard $(DEPS_DIR)/*/src), $(call core_native_path,$(wildcard $(DEPS_DIR)/*/src)))",
	DepsDirsInc = "$(if $(wildcard $(DEPS_DIR)/*/include), $(call core_native_path,$(wildcard $(DEPS_DIR)/*/include)))",
	AppsDirsSrc = "$(if $(wildcard $(APPS_DIR)/*/src), $(call core_native_path,$(wildcard $(APPS_DIR)/*/src)))",
	AppsDirsInc = "$(if $(wildcard $(APPS_DIR)/*/include), $(call core_native_path,$(wildcard $(APPS_DIR)/*/include)))",
	DepsDirs = lists:usort(string:tokens(DepsDirsSrc++DepsDirsInc, " ")),
	AppsDirs = lists:usort(string:tokens(AppsDirsSrc++AppsDirsInc, " ")),
	Modules = [{list_to_atom(filename:basename(F, ".erl")), F} || F <- ErlFiles],
	Add = fun (Mod, Dep) ->
		case lists:keyfind(Dep, 1, Modules) of
			false -> ok;
			{_, DepFile} ->
				{_, ModFile} = lists:keyfind(Mod, 1, Modules),
				ets:insert(E, {ModFile, DepFile}),
				digraph:add_vertex(G, Mod),
				digraph:add_vertex(G, Dep),
				digraph:add_edge(G, Mod, Dep)
		end
	end,
	AddHd = fun (F, Mod, DepFile) ->
 
		case file:open(DepFile, [read]) of
			{error, enoent} ->
				ok;
			{ok, Fd} ->
				{_, ModFile} = lists:keyfind(Mod, 1, Modules),
				case ets:match(E, {ModFile, DepFile}) of
					[] ->
						ets:insert(E, {ModFile, DepFile}),
						F(F, Fd, Mod,0);
					_ -> ok
				end
		end
	end,
	SearchHrl = fun
		F(_Hrl, []) -> {error,enoent};
		F(Hrl, [Dir|Dirs]) ->
			HrlF = filename:join([Dir,Hrl]),
			case filelib:is_file(HrlF) of
				true  ->
				{ok, HrlF};
				false -> F(Hrl,Dirs)
			end
	end,
	Attr = fun
		(_F, Mod, behavior, Dep) ->
			Add(Mod, Dep);
		(_F, Mod, behaviour, Dep) ->
			Add(Mod, Dep);
		(_F, Mod, compile, {parse_transform, Dep}) ->
			Add(Mod, Dep);
		(_F, Mod, compile, Opts) when is_list(Opts) ->
			case proplists:get_value(parse_transform, Opts) of
				undefined -> ok;
				Dep -> Add(Mod, Dep)
			end;
		(F, Mod, include, Hrl) ->
			case SearchHrl(Hrl, ["src", "include",AppsDir,DepsDir]++AppsDirs++DepsDirs) of
				{ok, FoundHrl} -> AddHd(F, Mod, FoundHrl);
				{error, _} -> false
			end;
		(F, Mod, include_lib, Hrl) ->
			case SearchHrl(Hrl, ["src", "include",AppsDir,DepsDir]++AppsDirs++DepsDirs) of
				{ok, FoundHrl} -> AddHd(F, Mod, FoundHrl);
				{error, _} -> false
			end;
		(F, Mod, import, {Imp, _}) ->
			IsFile =
				case lists:keyfind(Imp, 1, Modules) of
					false -> false;
					{_, FilePath} -> filelib:is_file(FilePath)
				end,
			case IsFile of
				false -> ok;
				true -> Add(Mod, Imp)
			end;
		(_, _, _, _) -> ok
	end,
	MakeDepend = fun
		(F, Fd, Mod, StartLocation) ->
			{ok, Filename} = file:pid2name(Fd),
			case io:parse_erl_form(Fd, undefined, StartLocation) of
				{ok, AbsData, EndLocation} ->
					case AbsData of
						{attribute, _, Key, Value} ->
							Attr(F, Mod, Key, Value),
							F(F, Fd, Mod, EndLocation);
						_ -> F(F, Fd, Mod, EndLocation)
					end;
				{eof, _ } -> file:close(Fd);
				{error, ErrorDescription } ->
					file:close(Fd);
				{error, ErrorInfo, ErrorLocation} ->
					F(F, Fd, Mod, ErrorLocation)
			end,
			ok
	end,
	[begin
		Mod = list_to_atom(filename:basename(F, ".erl")),
		case file:open(F, [read]) of
			{ok, Fd} -> MakeDepend(MakeDepend, Fd, Mod,0);
			{error, enoent} -> ok
		end
	end || F <- ErlFiles],
	Depend = sofs:to_external(sofs:relation_to_family(sofs:relation(ets:tab2list(E)))),
	CompileFirst = [X || X <- lists:reverse(digraph_utils:topsort(G)), [] =/= digraph:in_neighbours(G, X)],
	TargetPath = fun(Target) ->
		case lists:keyfind(Target, 1, Modules) of
			false -> "";
			{_, DepFile} ->
				DirSubname = tl(string:tokens(filename:dirname(DepFile), "/")),
				string:join(DirSubname ++ [atom_to_list(Target)], "/")
		end
	end,
	Output0 = [
		"# Generated by Erlang.mk. Edit at your own risk!\n\n",
		[[F, "::", [[" ", D] || D <- Deps], "; @touch \$$@\n"] || {F, Deps} <- Depend],
		"\nCOMPILE_FIRST +=", [[" ", TargetPath(CF)] || CF <- CompileFirst], "\n"
	],
	Output = case "é" of
		[233] -> unicode:characters_to_binary(Output0);
		_ -> Output0
	end,
	ok = file:write_file("$(1)", Output),
	halt()
endef
# makefile (from `erlang.mk', line 430)
pkg_basho_bench_description = A load-generation and testing tool for basically whatever you can write a returning Erlang function for.
# makefile (from `erlang.mk', line 2376)
pkg_kdht_fetch = git
# makefile (from `erlang.mk', line 3405)
pkg_restc_name = restc
# makefile (from `erlang.mk', line 3090)
pkg_pkt_commit = master
# makefile (from `erlang.mk', line 2664)
pkg_mcerlang_fetch = git
# makefile (from `erlang.mk', line 4274)
pkg_zraft_lib_commit = master
# makefile (from `erlang.mk', line 3183)
pkg_proper_homepage = http://proper.softlab.ntua.gr
# makefile (from `erlang.mk', line 2792)
pkg_msgpack_fetch = git
# makefile (from `erlang.mk', line 3070)
pkg_pgsql_description = Erlang PostgreSQL driver
# makefile (from `erlang.mk', line 3935)
pkg_tirerl_homepage = https://github.com/inaka/tirerl
# makefile (from `erlang.mk', line 6992)
EUNIT_MODS = $(foreach mod,$(EUNIT_EBIN_MODS) $(filter-out $(patsubst %,%_tests,$(EUNIT_EBIN_MODS)),$(EUNIT_TEST_MODS)),'$(mod)')
# makefile (from `erlang.mk', line 4376)
query_repo_hex = https://hex.pm/packages/$(if $(word 3,$(dep_$(1))),$(word 3,$(dep_$(1))),$(1))
# makefile (from `erlang.mk', line 3697)
pkg_snappyer_repo = https://github.com/zmstone/snappyer.git
# makefile (from `erlang.mk', line 943)
pkg_cqerl_homepage = https://matehat.github.io/cqerl/
# makefile (from `erlang.mk', line 1613)
pkg_erserve_name = erserve
# makefile (from `erlang.mk', line 3278)
pkg_rack_description = Rack handler for erlang
# makefile (from `erlang.mk', line 1232)
pkg_elixir_fetch = git
# makefile (from `erlang.mk', line 1593)
pkg_erlware_commons_repo = https://github.com/erlware/erlware_commons
# makefile (from `erlang.mk', line 2950)
pkg_observer_cli_description = Visualize Erlang/Elixir Nodes On The Command Line
# makefile (from `erlang.mk', line 1794)
pkg_ezmtp_commit = master
# makefile (from `erlang.mk', line 3457)
pkg_riak_kv_repo = https://github.com/basho/riak_kv
# makefile (from `erlang.mk', line 3008)
pkg_otpbp_fetch = git
# makefile (from `erlang.mk', line 4119)
pkg_vmq_snmp_homepage = https://verne.mq/
# makefile (from `erlang.mk', line 3990)
pkg_triq_description = Trifork QuickCheck
# makefile (from `erlang.mk', line 1463)
pkg_erldis_homepage = https://github.com/cstar/erldis
# makefile (from `erlang.mk', line 3568)
pkg_service_fetch = git
# makefile (from `erlang.mk', line 3606)
pkg_sheriff_description = Parse transform for type based validation.
# makefile (from `erlang.mk', line 2767)
pkg_mongodb_homepage = https://github.com/comtihon/mongodb-erlang
# makefile (from `erlang.mk', line 1253)
pkg_emagick_name = emagick
# makefile (from `erlang.mk', line 3605)
pkg_sheriff_name = sheriff
# makefile (from `erlang.mk', line 3133)
pkg_poolboy_name = poolboy
# makefile (from `erlang.mk', line 2264)
pkg_jiffy_v_fetch = git
# makefile (from `erlang.mk', line 781)
pkg_cloudi_service_http_elli_name = cloudi_service_http_elli
# makefile (from `erlang.mk', line 1399)
pkg_erlang_smtp_homepage = https://github.com/tonyg/erlang-smtp
# makefile (from `erlang.mk', line 2495)
pkg_lasse_homepage = https://github.com/inaka/lasse
# makefile (from `erlang.mk', line 6909)
ESCRIPT_ZIP = 7z a -tzip -mx=9 -mtc=off $(if $(filter-out 0,$(V)),,> /dev/null)
# makefile (from `erlang.mk', line 3846)
pkg_switchboard_description = A framework for processing email using worker plugins.
# makefile (from `erlang.mk', line 2634)
pkg_marina_commit = master
# makefile (from `erlang.mk', line 2927)
pkg_nprocreg_homepage = http://nitrogenproject.com/
# makefile (from `erlang.mk', line 1040)
pkg_dns_fetch = git
# makefile (from `erlang.mk', line 4405)
query_extra_hex = $(if $(dep_$(1)),package-name=$(word 3,$(dep_$(1))),-)
# makefile (from `erlang.mk', line 7583)
RELX_REL := erlang_release 1 1
# makefile (from `erlang.mk', line 2208)
pkg_ircd_fetch = git
# makefile (from `erlang.mk', line 1342)
pkg_eqm_description = Erlang pub sub with supply-demand channels
# makefile (from `erlang.mk', line 2321)
pkg_jsonpath_repo = https://github.com/GeneStevens/jsonpath
# makefile (from `erlang.mk', line 336)
pkg_actordb_core_fetch = git
# makefile (from `erlang.mk', line 7585)
RELX_REL_VSN := 1
# makefile (from `erlang.mk', line 2093)
pkg_gun_name = gun
# makefile (from `erlang.mk', line 2794)
pkg_msgpack_commit = master
# makefile (from `erlang.mk', line 639)
pkg_chumak_homepage = http://choven.ca
# makefile (from `erlang.mk', line 585)
pkg_carotene_repo = https://github.com/carotene/carotene
# environment
__CFBundleIdentifier = com.microsoft.VSCode
# makefile (from `erlang.mk', line 1265)
pkg_emysql_repo = https://github.com/Eonblast/Emysql
# makefile (from `erlang.mk', line 3408)
pkg_restc_fetch = git
# makefile (from `erlang.mk', line 2805)
pkg_mustache_name = mustache
# makefile (from `erlang.mk', line 1159)
pkg_efene_homepage = https://github.com/efene/efene
# makefile (from `erlang.mk', line 3561)
pkg_seestar_repo = https://github.com/iamaleksey/seestar
# makefile (from `erlang.mk', line 1094)
pkg_econfig_description = simple Erlang config handler using INI files
# makefile (from `erlang.mk', line 4401)
query_extra_hg = -
 
# makefile (from `erlang.mk', line 690)
pkg_cloudi_service_db_cassandra_commit = master
# makefile (from `erlang.mk', line 3086)
pkg_pkt_description = Erlang network protocol library
# makefile (from `erlang.mk', line 338)
pkg_actordb_core_commit = master
# makefile (from `erlang.mk', line 981)
pkg_decimal_name = decimal
# makefile (from `erlang.mk', line 2169)
pkg_ibrowse_repo = https://github.com/cmullaparthi/ibrowse
# makefile (from `erlang.mk', line 429)
pkg_basho_bench_name = basho_bench
# makefile (from `erlang.mk', line 3471)
pkg_riak_pipe_homepage = https://github.com/basho/riak_pipe
# makefile (from `erlang.mk', line 3719)
pkg_sqerl_homepage = https://github.com/hairyhum/sqerl
# makefile (from `erlang.mk', line 3240)
pkg_qrcode_fetch = git
# makefile (from `erlang.mk', line 7011)
HEX_CORE_GIT = https://github.com/hexpm/hex_core
# makefile (from `erlang.mk', line 4407)
query_extra_legacy = -
# makefile (from `erlang.mk', line 3685)
pkg_smother_name = smother
# makefile (from `erlang.mk', line 1626)
pkg_erwa_commit = master
# environment
HOMEBREW_REPOSITORY = /opt/homebrew
# makefile (from `erlang.mk', line 2385)
pkg_key2value_repo = https://github.com/okeuday/key2value
# makefile (from `erlang.mk', line 4415)
dep_commit = $(if $(dep_$(1)_commit),$(dep_$(1)_commit),$(if $(dep_$(1)),$(if $(filter hex,$(word 1,$(dep_$(1)))),$(word 2,$(dep_$(1))),$(word 3,$(dep_$(1)))),$(pkg_$(1)_commit)))
# makefile (from `erlang.mk', line 2830)
pkg_n2o_description = WebSocket Application Server
# makefile (from `erlang.mk', line 3646)
pkg_simhash_description = Simhashing for Erlang -- hashing algorithm to find near-duplicates in binary data.
# makefile (from `erlang.mk', line 770)
pkg_cloudi_service_http_client_commit = master
# makefile (from `erlang.mk', line 4125)
pkg_vmq_systree_name = vmq_systree
# makefile (from `erlang.mk', line 2361)
pkg_kai_repo = https://github.com/synrc/kai
# makefile (from `erlang.mk', line 969)
pkg_damocles_repo = https://github.com/lostcolony/damocles
# makefile (from `erlang.mk', line 2255)
pkg_jiffy_homepage = https://github.com/davisp/jiffy
# makefile (from `erlang.mk', line 2198)
pkg_irc_lib_description = Erlang irc client library
# makefile (from `erlang.mk', line 4202)
pkg_xref_runner_commit = master
# makefile (from `erlang.mk', line 2949)
pkg_observer_cli_name = observer_cli
# makefile (from `erlang.mk', line 3025)
pkg_parse_trans_repo = https://github.com/uwiger/parse_trans
# makefile (from `erlang.mk', line 1752)
pkg_exs1024_fetch = git
# makefile (from `erlang.mk', line 2656)
pkg_mcd_fetch = git
# makefile (from `erlang.mk', line 4048)
pkg_uuid_fetch = git
# makefile (from `erlang.mk', line 3078)
pkg_pkgx_description = Build .deb packages from Erlang releases
# makefile (from `erlang.mk', line 3989)
pkg_triq_name = triq
# makefile (from `erlang.mk', line 4190)
pkg_xhttpc_description = Extensible HTTP Client for Erlang
# makefile (from `erlang.mk', line 3897)
pkg_tddreloader_repo = https://github.com/version2beta/tddreloader
# makefile (from `erlang.mk', line 2455)
pkg_lager_homepage = https://github.com/erlang-lager/lager
# makefile (from `erlang.mk', line 4030)
pkg_unicorn_description = Generic configuration server
# makefile (from `erlang.mk', line 2080)
pkg_grpc_fetch = git
# makefile (from `erlang.mk', line 6407)
define bs_c_nif
#include "erl_nif.h"

static int loads = 0;

static int load(ErlNifEnv* env, void** priv_data, ERL_NIF_TERM load_info)
{
	/* Initialize private data. */
	*priv_data = NULL;

	loads++;

	return 0;
}

static int upgrade(ErlNifEnv* env, void** priv_data, void** old_priv_data, ERL_NIF_TERM load_info)
{
	/* Convert the private data to the new version. */
	*priv_data = *old_priv_data;

	loads++;

	return 0;
}

static void unload(ErlNifEnv* env, void* priv_data)
{
	if (loads == 1) {
		/* Destroy the private data. */
	}

	loads--;
}

static ERL_NIF_TERM hello(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[])
{
	if (enif_is_atom(env, argv[0])) {
		return enif_make_tuple2(env,
			enif_make_atom(env, "hello"),
			argv[0]);
	}

	return enif_make_tuple2(env,
		enif_make_atom(env, "error"),
		enif_make_atom(env, "badarg"));
}

static ErlNifFunc nif_funcs[] = {
	{"hello", 1, hello}
};

ERL_NIF_INIT($n, nif_funcs, load, NULL, upgrade, unload)
endef
# makefile (from `erlang.mk', line 1999)
pkg_geode_homepage = https://github.com/bradfordw/geode
# makefile (from `erlang.mk', line 4008)
pkg_twerl_fetch = git
# makefile (from `erlang.mk', line 2159)
pkg_i18n_homepage = https://github.com/erlang-unicode/i18n
# makefile (from `erlang.mk', line 645)
pkg_cl_name = cl
# makefile (from `erlang.mk', line 8340)
QUERY = name fetch_method repo version
# makefile (from `erlang.mk', line 1873)
pkg_fs_repo = https://github.com/synrc/fs
# makefile (from `erlang.mk', line 1168)
pkg_egeoip_fetch = git
# makefile (from `erlang.mk', line 1429)
pkg_erlbrake_name = erlbrake
# makefile (from `erlang.mk', line 1106)
pkg_edate_commit = master
# makefile (from `erlang.mk', line 3590)
pkg_sfmt_description = SFMT pseudo random number generator for Erlang.
# makefile (from `erlang.mk', line 329)
pkg_active_repo = https://github.com/proger/active
# makefile (from `erlang.mk', line 1224)
pkg_eleveldb_fetch = git
# makefile (from `erlang.mk', line 1206)
pkg_ekaf_description = A minimal, high-performance Kafka client in Erlang.
# makefile (from `erlang.mk', line 1183)
pkg_ej_homepage = https://github.com/seth/ej
# makefile (from `erlang.mk', line 1341)
pkg_eqm_name = eqm
# makefile (from `erlang.mk', line 1054)
pkg_dynamic_compile_description = compile and load erlang modules from string input
# makefile (from `erlang.mk', line 2722)
pkg_mimetypes_commit = master
# makefile (from `erlang.mk', line 3624)
pkg_sidejob_fetch = git
# makefile (from `erlang.mk', line 935)
pkg_cpg_homepage = https://github.com/okeuday/cpg
# makefile (from `erlang.mk', line 5132)
ERLANG_MK_RECURSIVE_TEST_DEPS_LIST = $(ERLANG_MK_TMP)/recursive-test-deps-list.log
# makefile (from `erlang.mk', line 3505)
pkg_riakhttpc_repo = https://github.com/basho/riak-erlang-http-client
# makefile (from `erlang.mk', line 4081)
pkg_vmq_acl_repo = https://github.com/erlio/vmq_acl
# makefile (from `erlang.mk', line 834)
pkg_cloudi_service_tcp_commit = master
# makefile (from `erlang.mk', line 674)
pkg_cloudi_service_api_requests_commit = master
# makefile (from `erlang.mk', line 816)
pkg_cloudi_service_quorum_fetch = git
# makefile (from `erlang.mk', line 1097)
pkg_econfig_repo = https://github.com/benoitc/econfig
# makefile (from `erlang.mk', line 2912)
pkg_nksip_fetch = git
# makefile (from `erlang.mk', line 2415)
pkg_kraken_homepage = https://github.com/Asana/kraken
# makefile (from `erlang.mk', line 3335)
pkg_rec2json_homepage = https://github.com/lordnull/rec2json
# makefile (from `erlang.mk', line 3422)
pkg_riak_control_description = Webmachine-based administration interface for Riak.
# makefile (from `erlang.mk', line 2822)
pkg_mysql_description = MySQL client library for Erlang/OTP
# makefile (from `erlang.mk', line 3481)
pkg_riak_sysmon_repo = https://github.com/basho/riak_sysmon
# makefile (from `erlang.mk', line 3690)
pkg_smother_commit = master
# makefile (from `erlang.mk', line 155)
space := $(subst ,, )
# makefile (from `erlang.mk', line 1821)
pkg_fix_name = fix
# makefile (from `erlang.mk', line 697)
pkg_cloudi_service_db_cassandra_cql_repo = https://github.com/CloudI/cloudi_service_db_cassandra_cql
# makefile (from `erlang.mk', line 2302)
pkg_jsone_description = An Erlang library for encoding, decoding JSON data.
# makefile (from `erlang.mk', line 3569)
pkg_service_repo = https://github.com/CloudI/service
# makefile (from `erlang.mk', line 1113)
pkg_edgar_repo = https://github.com/crownedgrouse/edgar
# makefile (from `erlang.mk', line 2678)
pkg_mekao_description = SQL constructor
# makefile (from `erlang.mk', line 2807)
pkg_mustache_homepage = https://github.com/mojombo/mustache.erl
# makefile (from `erlang.mk', line 2758)
pkg_modlib_description = Web framework based on Erlang's inets httpd
# makefile (from `erlang.mk', line 3470)
pkg_riak_pipe_description = Riak Pipelines
# makefile (from `erlang.mk', line 2575)
 
pkg_lol_homepage = https://github.com/b0oh/lol
# makefile (from `erlang.mk', line 3416)
pkg_rfc4627_jsonrpc_fetch = git
# makefile (from `erlang.mk', line 2903)
pkg_nkpacket_homepage = https://github.com/Nekso/nkpacket
# makefile (from `erlang.mk', line 3862)
pkg_sync_description = On-the-fly recompiling and reloading in Erlang.
# makefile (from `erlang.mk', line 1849)
pkg_folsom_repo = https://github.com/boundary/folsom
# makefile (from `erlang.mk', line 3645)
pkg_simhash_name = simhash
# makefile (from `erlang.mk', line 2729)
pkg_mixer_repo = https://github.com/chef/mixer
# makefile (from `erlang.mk', line 4403)
query_extra_cp = -
# makefile (from `erlang.mk', line 463)
pkg_bear_homepage = https://github.com/boundary/bear
# makefile (from `erlang.mk', line 4095)
pkg_vmq_graphite_homepage = https://verne.mq/
# makefile (from `erlang.mk', line 535)
pkg_boss_db_homepage = https://github.com/ErlyORM/boss_db
# makefile (from `erlang.mk', line 5175)
erlc_verbose_0 = @echo " ERLC  " $(filter-out $(patsubst %,%.erl,$(ERLC_EXCLUDE)), $(filter %.erl %.core,$(?F)));
# makefile (from `erlang.mk', line 3287)
pkg_radierl_homepage = https://github.com/vances/radierl
# makefile (from `erlang.mk', line 2197)
pkg_irc_lib_name = irc_lib
# makefile (from `erlang.mk', line 2106)
pkg_gut_commit = master
# makefile (from `erlang.mk', line 157)
comma := ,
# makefile (from `erlang.mk', line 1842)
pkg_fn_commit = master
# makefile (from `erlang.mk', line 1776)
pkg_exsplus128_fetch = git
# makefile (from `erlang.mk', line 3806)
pkg_subproc_description = unix subprocess manager with {active,once|false} modes
# makefile (from `erlang.mk', line 7017)
pkg_hex_core_homepage = $(HEX_CORE_GIT)
# makefile (from `erlang.mk', line 3077)
pkg_pkgx_name = pkgx
# makefile (from `erlang.mk', line 5272)
YRL_FILES := 
# makefile (from `erlang.mk', line 3449)
pkg_riak_ensemble_repo = https://github.com/basho/riak_ensemble
# makefile (from `erlang.mk', line 1024)
pkg_dispcount_fetch = git
# makefile (from `erlang.mk', line 3426)
pkg_riak_control_commit = master
# makefile (from `erlang.mk', line 3223)
pkg_push_service_homepage = https://github.com/hairyhum/push_service
# makefile (from `erlang.mk', line 321)
pkg_aberth_repo = https://github.com/a13x/aberth
# makefile (from `erlang.mk', line 3392)
pkg_relx_fetch = git
# makefile (from `erlang.mk', line 3866)
pkg_sync_commit = master
# makefile (from `erlang.mk', line 3593)
pkg_sfmt_repo = https://github.com/jj1bdx/sfmt-erlang
# makefile (from `erlang.mk', line 3712)
pkg_spapi_router_fetch = git
# makefile (from `erlang.mk', line 544)
pkg_brod_fetch = git
# makefile (from `erlang.mk', line 333)
pkg_actordb_core_name = actordb_core
# makefile (from `erlang.mk', line 6313)
c_verbose_0 = @echo " C     " $(filter-out $(notdir $(MAKEFILE_LIST) $(C_SRC_ENV)),$(^F));
# makefile (from `erlang.mk', line 2986)
pkg_openflow_commit = master
# makefile (from `erlang.mk', line 243)
KERL_MAKEFLAGS = 
# makefile (from `erlang.mk', line 3250)
pkg_quest_commit = master
# makefile (from `erlang.mk', line 1990)
pkg_gen_unix_description = Erlang Unix socket interface
# makefile (from `erlang.mk', line 3702)
pkg_social_description = Cowboy handler for social login via OAuth2 providers
# makefile (from `erlang.mk', line 2853)
pkg_neotoma_name = neotoma
# makefile (from `erlang.mk', line 1205)
pkg_ekaf_name = ekaf
# makefile (from `erlang.mk', line 4069)
pkg_verx_name = verx
# makefile (from `erlang.mk', line 1312)
pkg_episcina_fetch = git
# makefile (from `erlang.mk', line 1053)
pkg_dynamic_compile_name = dynamic_compile
# makefile (from `erlang.mk', line 1831)
pkg_flower_homepage = https://github.com/travelping/flower
# makefile (from `erlang.mk', line 1903)
pkg_geas_homepage = https://github.com/crownedgrouse/geas
# makefile (from `erlang.mk', line 255)
define kerl_hipe_target
$(KERL_INSTALL_DIR)/$1-native: $(KERL)
	$(verbose) if [ ! -d $$@ ]; then KERL_CONFIGURE_OPTIONS=--enable-native-libs MAKEFLAGS="$(KERL_MAKEFLAGS)" $(KERL) build git $(OTP_GIT) $1 $1-native; $(KERL) install $1-native $(KERL_INSTALL_DIR)/$1-native; fi
endef
# makefile (from `erlang.mk', line 3751)
pkg_statebox_homepage = https://github.com/mochi/statebox
# makefile (from `erlang.mk', line 1350)
pkg_eredis_description = Erlang Redis client
# makefile (from `erlang.mk', line 2145)
pkg_hpack_repo = https://github.com/joedevivo/hpack
# makefile (from `erlang.mk', line 2338)
pkg_jsx_commit = main
# makefile (from `erlang.mk', line 4078)
pkg_vmq_acl_description = Component of VerneMQ: A distributed MQTT message broker
# makefile (from `erlang.mk', line 2326)
pkg_jsonx_description = JSONX is an Erlang library for efficient decode and encode JSON, written in C.
# makefile (from `erlang.mk', line 608)
pkg_cferl_fetch = git
# makefile (from `erlang.mk', line 2506)
pkg_ldap_commit = master
# makefile (from `erlang.mk', line 456)
pkg_beanstalk_fetch = git
# default
.FEATURES := target-specific order-only second-expansion else-if archives jobserver check-symlink
# makefile (from `erlang.mk', line 3144)
pkg_pooler_fetch = git
# makefile (from `erlang.mk', line 937)
pkg_cpg_repo = https://github.com/okeuday/cpg
# makefile (from `erlang.mk', line 3744)
pkg_stable_fetch = git
# makefile (from `erlang.mk', line 2390)
pkg_keys1value_description = Erlang set associative map for key lists
# makefile (from `erlang.mk', line 376)
pkg_annotations_fetch = git
# makefile (from `erlang.mk', line 2118)
pkg_hamcrest_description = Erlang port of Hamcrest
# makefile (from `erlang.mk', line 2301)
pkg_jsone_name = jsone
# makefile (from `erlang.mk', line 4560)
dep_autopatch2 = 	! test -f $(DEPS_DIR)/$1/ebin/$1.app || mv -n $(DEPS_DIR)/$1/ebin/$1.app $(DEPS_DIR)/$1/src/$1.app.src; rm -f $(DEPS_DIR)/$1/ebin/$1.app; if [ -f $(DEPS_DIR)/$1/src/$1.app.src.script ]; then $(call erlang,$(call dep_autopatch_appsrc_script.erl,$(1))); fi; $(call erlang,$(call dep_autopatch_appsrc.erl,$(1))); if [ -f $(DEPS_DIR)/$(1)/rebar -o -f $(DEPS_DIR)/$(1)/rebar.config -o -f $(DEPS_DIR)/$(1)/rebar.config.script -o -f $(DEPS_DIR)/$1/rebar.lock ]; then $(call dep_autopatch_fetch_rebar); $(call dep_autopatch_rebar,$(1)); else $(call dep_autopatch_gen,$(1)); fi
# makefile (from `erlang.mk', line 2762)
pkg_modlib_commit = master
# makefile (from `erlang.mk', line 2008)
pkg_getopt_fetch = git
# makefile (from `erlang.mk', line 3000)
pkg_openpoker_fetch = git
# makefile (from `erlang.mk', line 1301)
pkg_epgsql_name = epgsql
# makefile (from `erlang.mk', line 3784)
pkg_stdinout_pool_fetch = git
# makefile (from `erlang.mk', line 1458)
pkg_erldb_commit = master
# makefile (from `erlang.mk', line 1658)
pkg_estatsd_commit = master
# makefile (from `erlang.mk', line 1767)
pkg_exsplus116_homepage = https://github.com/jj1bdx/exsplus116
# makefile (from `erlang.mk', line 1498)
pkg_erlgit_commit = master
# makefile (from `erlang.mk', line 3942)
pkg_toml_description = TOML (0.4.0) config parser
# makefile (from `erlang.mk', line 3097)
pkg_plain_fsm_repo = https://github.com/uwiger/plain_fsm
# makefile (from `erlang.mk', line 666)
pkg_cloudi_core_commit = master
# makefile (from `erlang.mk', line 2697)
pkg_merge_index_repo = https://github.com/basho/merge_index
# makefile (from `erlang.mk', line 3854)
pkg_syn_description = A global Process Registry and Process Group manager for Erlang.
# makefile (from `erlang.mk', line 1375)
pkg_erlang_cep_homepage = https://github.com/danmacklin/erlang_cep
# makefile (from `erlang.mk', line 1062)
pkg_e2_description = Library to simply writing correct OTP applications.
# makefile (from `erlang.mk', line 1864)
pkg_folsomite_fetch = git
# makefile (from `erlang.mk', line 505)
pkg_bitcask_repo = https://github.com/basho/bitcask
# makefile (from `erlang.mk', line 1118)
pkg_edis_description = An Erlang implementation of Redis KV Store
# makefile (from `erlang.mk', line 7125)
define hex_tarball_create.erl
	Files0 = [$(call comma_list,$(patsubst %,"%",$(HEX_TARBALL_FILES)))],
	Requirements0 = #{
		$(foreach d,$(DEPS),
			<<"$(if $(subst hex,,$(call query_fetch_method,$d)),$d,$(if $(word 3,$(dep_$d)),$(word 3,$(dep_$d)),$d))">> => #{
				<<"app">> => <<"$d">>,
				<<"optional">> => false,
 
				<<"requirement">> => <<"$(call query_version,$d)">>
			},)
		$(if $(DEPS),dummy => dummy)
	},
	Requirements = maps:remove(dummy, Requirements0),
	Metadata0 = #{
		app => <<"$(strip $(PROJECT))">>,
		build_tools => [<<"make">>, <<"rebar3">>],
		description => <<"$(strip $(PROJECT_DESCRIPTION))">>,
		files => [unicode:characters_to_binary(F) || F <- Files0],
		name => <<"$(strip $(PROJECT))">>,
		requirements => Requirements,
		version => <<"$(strip $(PROJECT_VERSION))">>
	},
	Metadata = Metadata0$(HEX_TARBALL_EXTRA_METADATA),
	Files = [case file:read_file(F) of
		{ok, Bin} ->
			{F, Bin};
		{error, Reason} ->
			io:format("Error trying to open file ~0p: ~0p~n", [F, Reason]),
			halt(82)
	end || F <- Files0],
	case hex_tarball:create(Metadata, Files) of
		{ok, #{tarball := Tarball}} ->
			ok = file:write_file("$(strip $(HEX_TARBALL_OUTPUT_FILE))", Tarball),
			halt(0);
		{error, Reason} ->
			io:format("Error ~0p~n", [Reason]),
			halt(83)
	end
endef
# makefile (from `erlang.mk', line 4007)
pkg_twerl_homepage = https://github.com/lucaspiller/twerl
# makefile (from `erlang.mk', line 5155)
ERLC_ASN1_OPTS = 
# makefile (from `erlang.mk', line 2030)
pkg_gin_description = The guards  and  for Erlang parse_transform
# makefile (from `erlang.mk', line 7023)
DEP_STR := hex_core
# makefile (from `erlang.mk', line 2134)
pkg_hottub_description = Permanent Erlang Worker Pool
# makefile (from `erlang.mk', line 3655)
pkg_simple_bridge_homepage = https://github.com/nitrogen/simple_bridge
# makefile (from `erlang.mk', line 3501)
pkg_riakhttpc_name = riakhttpc
# makefile (from `erlang.mk', line 3438)
pkg_riak_dt_description = Convergent replicated datatypes in Erlang
# makefile (from `erlang.mk', line 2802)
pkg_mu2_commit = master
# makefile (from `erlang.mk', line 3270)
pkg_rabbit_exchange_type_riak_description = Custom RabbitMQ exchange type for sticking messages in Riak
# makefile (from `erlang.mk', line 2750)
pkg_mockgyver_description = A mocking library for Erlang
# makefile (from `erlang.mk', line 1989)
pkg_gen_unix_name = gen_unix
# makefile (from `erlang.mk', line 3016)
pkg_pal_fetch = git
# makefile (from `erlang.mk', line 3594)
pkg_sfmt_commit = master
# makefile (from `erlang.mk', line 849)
pkg_cloudi_service_udp_repo = https://github.com/CloudI/cloudi_service_udp
# makefile (from `erlang.mk', line 1077)
pkg_eavro_name = eavro
# makefile (from `erlang.mk', line 3649)
pkg_simhash_repo = https://github.com/ferd/simhash
# makefile (from `erlang.mk', line 398)
pkg_asciideck_description = Asciidoc for Erlang.
# makefile (from `erlang.mk', line 3607)
pkg_sheriff_homepage = http://ninenines.eu
# makefile (from `erlang.mk', line 1978)
pkg_gen_smtp_commit = master
# makefile (from `erlang.mk', line 912)
pkg_cowboy_fetch = git
# makefile (from `erlang.mk', line 1349)
pkg_eredis_name = eredis
# makefile (from `erlang.mk', line 385)
pkg_antidote_repo = https://github.com/SyncFree/antidote
# makefile (from `erlang.mk', line 3192)
pkg_props_fetch = git
# makefile (from `erlang.mk', line 2325)
pkg_jsonx_name = jsonx
# makefile (from `erlang.mk', line 2686)
pkg_memo_description = Erlang memoization server
# makefile (from `erlang.mk', line 1489)
pkg_erlfsmon_repo = https://github.com/proger/erlfsmon
# makefile (from `erlang.mk', line 3997)
pkg_tunctl_name = tunctl
# makefile (from `erlang.mk', line 6259)
C_SRC_ENV = $(C_SRC_DIR)/env.mk
# makefile (from `erlang.mk', line 2918)
pkg_nodefinder_description = automatic node discovery via UDP multicast
# makefile (from `erlang.mk', line 1682)
pkg_etest_http_commit = master
# makefile (from `erlang.mk', line 2399)
pkg_kinetic_homepage = https://github.com/AdRoll/kinetic
# makefile (from `erlang.mk', line 2045)
pkg_gold_fever_name = gold_fever
# makefile (from `erlang.mk', line 2389)
pkg_keys1value_name = keys1value
# makefile (from `erlang.mk', line 4258)
pkg_zippers_commit = master
# makefile (from `erlang.mk', line 1337)
pkg_epubnub_repo = https://github.com/tsloughter/epubnub
# makefile (from `erlang.mk', line 1358)
pkg_eredis_pool_description = eredis_pool is Pool of Redis clients, using eredis and poolboy.
# makefile (from `erlang.mk', line 5138)
ERLANG_MK_QUERY_TEST_DEPS_FILE = $(ERLANG_MK_TMP)/query-test-deps.log
# makefile (from `erlang.mk', line 1919)
pkg_gen_coap_homepage = https://github.com/gotthardp/gen_coap
# makefile (from `erlang.mk', line 2970)
pkg_of_protocol_commit = master
# makefile (from `erlang.mk', line 2552)
pkg_locker_fetch = git
# environment
GEM_HOME = /Users/alex/.rvm/gems/ruby-3.0.0
# makefile (from `erlang.mk', line 2706)
pkg_merl_commit = master
# makefile (from `erlang.mk', line 1087)
pkg_ecapnp_homepage = https://github.com/kaos/ecapnp
# makefile (from `erlang.mk', line 3277)
pkg_rack_name = rack
# makefile (from `erlang.mk', line 2557)
pkg_locks_name = locks
# makefile (from `erlang.mk', line 2582)
pkg_lucid_description = HTTP/2 server written in Erlang
# makefile (from `erlang.mk', line 1152)
pkg_eep_app_fetch = git
# makefile (from `erlang.mk', line 1647)
pkg_espec_homepage = https://github.com/lucaspiller/espec
# makefile (from `erlang.mk', line 2714)
pkg_mimerl_commit = master
# makefile (from `erlang.mk', line 2961)
pkg_octopus_repo = https://github.com/erlangbureau/octopus
# makefile (from `erlang.mk', line 3922)
pkg_tinymq_commit = master
# makefile (from `erlang.mk', line 3207)
pkg_psycho_homepage = https://github.com/gar1t/psycho
# makefile (from `erlang.mk', line 422)
pkg_barrel_tcp_description = barrel is a generic TCP acceptor pool with low latency in Erlang.
# makefile (from `erlang.mk', line 1271)
pkg_enm_homepage = https://github.com/basho/enm
# makefile (from `erlang.mk', line 3674)
pkg_skel_commit = master
# makefile (from `erlang.mk', line 1061)
pkg_e2_name = e2
# makefile (from `erlang.mk', line 3389)
pkg_relx_name = relx
# makefile (from `erlang.mk', line 1117)
pkg_edis_name = edis
# makefile (from `erlang.mk', line 3709)
pkg_spapi_router_name = spapi_router
# makefile (from `erlang.mk', line 3066)
pkg_pgo_commit = master
# makefile (from `erlang.mk', line 1306)
pkg_epgsql_commit = master
# makefile (from `erlang.mk', line 2029)
pkg_gin_name = gin
# makefile (from `erlang.mk', line 641)
pkg_chumak_repo = https://github.com/chovencorp/chumak
# environment
VSCODE_AMD_ENTRYPOINT = vs/workbench/api/node/extensionHostProcess
# makefile (from `erlang.mk', line 1783)
pkg_ezmq_homepage = https://github.com/RoadRunnr/ezmq
# makefile (from `erlang.mk', line 2133)
pkg_hottub_name = hottub
# makefile (from `erlang.mk', line 1264)
pkg_emysql_fetch = git
# makefile (from `erlang.mk', line 3832)
pkg_swab_fetch = git
# makefile (from `erlang.mk', line 1297)
pkg_eper_repo = https://github.com/massemanet/eper
# makefile (from `erlang.mk', line 3494)
pkg_riakc_description = Erlang clients for Riak.
# makefile (from `erlang.mk', line 1950)
pkg_gen_nb_server_description = OTP behavior for writing non-blocking servers
# makefile (from `erlang.mk', line 3592)
pkg_sfmt_fetch = git
# makefile (from `erlang.mk', line 2749)
pkg_mockgyver_name = mockgyver
# makefile (from `erlang.mk', line 1369)
pkg_erl_streams_repo = https://github.com/epappas/erl_streams
# makefile (from `erlang.mk', line 2479)
pkg_lambdapad_homepage = https://github.com/gar1t/lambdapad
# makefile (from `erlang.mk', line 1273)
pkg_enm_repo = https://github.com/basho/enm
# makefile (from `erlang.mk', line 2090)
pkg_grpc_client_commit = master
# makefile (from `erlang.mk', line 1575)
pkg_erlubi_homepage = https://github.com/krestenkrab/erlubi
# makefile (from `erlang.mk', line 2498)
pkg_lasse_commit = master
# makefile (from `erlang.mk', line 718)
pkg_cloudi_service_db_memcached_description = memcached CloudI Service
# makefile (from `erlang.mk', line 2271)
pkg_jobs_homepage = https://github.com/esl/jobs
# makefile (from `erlang.mk', line 397)
pkg_asciideck_name = asciideck
# makefile (from `erlang.mk', line 2960)
 
pkg_octopus_fetch = git
# makefile (from `erlang.mk', line 3742)
pkg_stable_description = Library of assorted helpers for Cowboy web server.
# makefile (from `erlang.mk', line 3421)
pkg_riak_control_name = riak_control
# makefile (from `erlang.mk', line 1567)
pkg_erlsom_homepage = https://github.com/willemdj/erlsom
# makefile (from `erlang.mk', line 841)
pkg_cloudi_service_timers_repo = https://github.com/CloudI/cloudi_service_timers
# environment
LOGNAME = alex
# makefile (from `erlang.mk', line 3297)
pkg_rafter_repo = https://github.com/andrewjstone/rafter
# makefile (from `erlang.mk', line 3290)
pkg_radierl_commit = master
# makefile (from `erlang.mk', line 1018)
pkg_dirbusterl_commit = master
# environment
APPLICATION_INSIGHTS_NO_DIAGNOSTIC_CHANNEL = true
# makefile (from `erlang.mk', line 1511)
pkg_erlmc_homepage = https://github.com/jkvor/erlmc
# makefile (from `erlang.mk', line 1025)
pkg_dispcount_repo = https://github.com/ferd/dispcount
# makefile (from `erlang.mk', line 530)
pkg_boss_commit = master
# makefile (from `erlang.mk', line 1735)
pkg_exml_homepage = https://github.com/paulgray/exml
# makefile (from `erlang.mk', line 1357)
pkg_eredis_pool_name = eredis_pool
# makefile (from `erlang.mk', line 425)
pkg_barrel_tcp_repo = https://github.com/benoitc-attic/barrel_tcp
# makefile (from `erlang.mk', line 7678)
sphinx_build = $(sphinx_build_$(V))
# makefile (from `erlang.mk', line 4121)
pkg_vmq_snmp_repo = https://github.com/erlio/vmq_snmp
# makefile (from `erlang.mk', line 3973)
pkg_transit_name = transit
# makefile (from `erlang.mk', line 1718)
pkg_evum_description = Spawn Linux VMs as Erlang processes in the Erlang VM
# makefile (from `erlang.mk', line 2782)
pkg_moyo_description = Erlang utility functions library
# makefile (from `erlang.mk', line 3560)
pkg_seestar_fetch = git
# makefile (from `erlang.mk', line 2589)
pkg_luerl_name = luerl
# makefile (from `erlang.mk', line 1287)
pkg_epcap_homepage = https://github.com/msantos/epcap
# makefile (from `erlang.mk', line 3958)
pkg_trails_description = A couple of improvements over Cowboy Routes
# makefile (from `erlang.mk', line 2599)
pkg_luwak_homepage = https://github.com/basho/luwak
# makefile (from `erlang.mk', line 2581)
pkg_lucid_name = lucid
# makefile (from `erlang.mk', line 2873)
pkg_nifty_repo = https://github.com/parapluu/nifty
# makefile (from `erlang.mk', line 6269)
C_SRC_OUTPUT_EXECUTABLE_EXTENSION = 
# makefile (from `erlang.mk', line 2168)
pkg_ibrowse_fetch = git
# makefile (from `erlang.mk', line 2282)
pkg_joxa_commit = master
# makefile (from `erlang.mk', line 2071)
pkg_grapherl_homepage = https://github.com/eproxus/grapherl
# makefile (from `erlang.mk', line 421)
pkg_barrel_tcp_name = barrel_tcp
# environment
VSCODE_HANDLES_UNCAUGHT_ERRORS = true
# makefile (from `erlang.mk', line 3920)
pkg_tinymq_fetch = git
# makefile (from `erlang.mk', line 3998)
pkg_tunctl_description = Erlang TUN/TAP interface
# makefile (from `erlang.mk', line 4237)
pkg_zabbix_sender_name = zabbix_sender
# makefile (from `erlang.mk', line 3199)
pkg_protobuffs_homepage = https://github.com/basho/erlang_protobuffs
# environment
MFLAGS = -Rrqp
# makefile (from `erlang.mk', line 2384)
pkg_key2value_fetch = git
# makefile (from `erlang.mk', line 2991)
pkg_openid_homepage = https://github.com/brendonh/erl_openid
# makefile (from `erlang.mk', line 2535)
pkg_live_homepage = http://ninenines.eu
# makefile (from `erlang.mk', line 367)
pkg_amqp_client_homepage = https://www.rabbitmq.com/erlang-client-user-guide.html
# makefile (from `erlang.mk', line 4225)
pkg_yaws_repo = https://github.com/klacke/yaws
# makefile (from `erlang.mk', line 4431)
ERL_LIBS = $(APPS_DIR):$(DEPS_DIR)
# makefile (from `erlang.mk', line 2360)
pkg_kai_fetch = git
# makefile (from `erlang.mk', line 4072)
pkg_verx_fetch = git
# makefile (from `erlang.mk', line 1194)
pkg_ejabberd_commit = master
# makefile (from `erlang.mk', line 5151)
COMPILE_FIRST_PATHS = $(addprefix src/,$(addsuffix .erl,$(COMPILE_FIRST)))
# makefile (from `erlang.mk', line 4167)
pkg_worker_pool_homepage = https://github.com/inaka/worker_pool
# makefile (from `erlang.mk', line 743)
pkg_cloudi_service_db_riak_homepage = http://cloudi.org/
# makefile (from `erlang.mk', line 1422)
pkg_erlasticsearch_description = Erlang thrift interface to elastic_search
# makefile (from `erlang.mk', line 2998)
pkg_openpoker_description = Genesis Texas hold'em Game Server
# environment
GEM_PATH = /Users/alex/.rvm/gems/ruby-3.0.0:/Users/alex/.rvm/gems/ruby-3.0.0@global
# makefile (from `erlang.mk', line 3455)
pkg_riak_kv_homepage = https://github.com/basho/riak_kv
# makefile (from `erlang.mk', line 1949)
pkg_gen_nb_server_name = gen_nb_server
# makefile (from `erlang.mk', line 286)
ERLANG_HIPE = 
# makefile (from `erlang.mk', line 4129)
pkg_vmq_systree_repo = https://github.com/erlio/vmq_systree
# makefile (from `erlang.mk', line 3800)
pkg_stripe_fetch = git
# makefile (from `erlang.mk', line 3189)
pkg_props_name = props
# default
MAKE = $(MAKE_COMMAND)
# makefile (from `erlang.mk', line 4062)
pkg_vert_description = Erlang binding to libvirt virtualization API
# makefile (from `erlang.mk', line 389)
pkg_apns_name = apns
# makefile (from `erlang.mk', line 3120)
pkg_pobox_fetch = git
# makefile (from `erlang.mk', line 717)
pkg_cloudi_service_db_memcached_name = cloudi_service_db_memcached
# makefile (from `erlang.mk', line 2674)
pkg_meck_commit = master
# makefile (from `erlang.mk', line 3119)
pkg_pobox_homepage = https://github.com/ferd/pobox
# makefile (from `erlang.mk', line 2895)
pkg_nkdocker_homepage = https://github.com/Nekso/nkdocker
# makefile (from `erlang.mk', line 3765)
pkg_statman_name = statman
# makefile (from `erlang.mk', line 1617)
pkg_erserve_repo = https://github.com/del/erserve
# makefile (from `erlang.mk', line 3653)
pkg_simple_bridge_name = simple_bridge
# makefile (from `erlang.mk', line 4015)
pkg_twitter_erlang_homepage = https://github.com/ngerakines/erlang_twitter
# makefile (from `erlang.mk', line 5640)
compat_erlc_opts_to_list = [$(call comma_list,$(foreach o,$(call compat_prepare_erlc_opts,$1),$(call compat_convert_erlc_opts,$o)))]
# makefile (from `erlang.mk', line 3306)
pkg_ranch_commit = 1.2.1
# makefile (from `erlang.mk', line 678)
pkg_cloudi_service_db_description = CloudI Database (in-memory/testing/generic)
# makefile (from `erlang.mk', line 328)
pkg_active_fetch = git
# makefile (from `erlang.mk', line 1214)
pkg_elarm_description = Alarm Manager for Erlang.
# makefile (from `erlang.mk', line 2838)
pkg_nat_upnp_description = Erlang library to map your internal port to an external using UNP IGD
# makefile (from `erlang.mk', line 3661)
pkg_simple_oauth2_name = simple_oauth2
# makefile (from `erlang.mk', line 2442)
pkg_kvlists_commit = master
# makefile (from `erlang.mk', line 5177)
erlc_verbose_2 = set -x;
# makefile (from `erlang.mk', line 2181)
pkg_ierlang_name = ierlang
 
# makefile (from `erlang.mk', line 2016)
pkg_gettext_fetch = git
# makefile (from `erlang.mk', line 3504)
pkg_riakhttpc_fetch = git
# makefile (from `erlang.mk', line 3338)
pkg_rec2json_commit = master
# makefile (from `erlang.mk', line 3609)
pkg_sheriff_repo = https://github.com/extend/sheriff
# makefile (from `erlang.mk', line 4404)
query_extra_ln = -
# makefile (from `erlang.mk', line 3886)
pkg_taskforce_description = Erlang worker pools for controlled parallelisation of arbitrary tasks.
# makefile (from `erlang.mk', line 785)
pkg_cloudi_service_http_elli_repo = https://github.com/CloudI/cloudi_service_http_elli
# makefile (from `erlang.mk', line 1146)
pkg_eep_commit = master
# makefile (from `erlang.mk', line 3023)
pkg_parse_trans_homepage = https://github.com/uwiger/parse_trans
# makefile (from `erlang.mk', line 1413)
pkg_erlastic_search_name = erlastic_search
# makefile (from `erlang.mk', line 2022)
pkg_giallo_description = Small and flexible web framework on top of Cowboy
# makefile (from `erlang.mk', line 866)
pkg_cloudi_service_zeromq_commit = master
# makefile (from `erlang.mk', line 3895)
pkg_tddreloader_homepage = https://github.com/version2beta/tddreloader
# makefile (from `erlang.mk', line 1696)
pkg_eunit_fetch = git
# makefile (from `erlang.mk', line 3015)
pkg_pal_homepage = https://github.com/manifest/pal
# makefile (from `erlang.mk', line 696)
pkg_cloudi_service_db_cassandra_cql_fetch = git
# makefile (from `erlang.mk', line 3359)
pkg_redgrid_homepage = https://github.com/jkvor/redgrid
# makefile (from `erlang.mk', line 3406)
pkg_restc_description = Erlang Rest Client
# makefile (from `erlang.mk', line 3903)
pkg_tempo_homepage = https://github.com/selectel/tempo
# makefile (from `erlang.mk', line 3110)
pkg_pmod_transform_description = Parse transform for parameterized modules
# makefile (from `erlang.mk', line 2097)
pkg_gun_repo = https://github.com/ninenines/gun
# makefile (from `erlang.mk', line 3159)
pkg_procket_homepage = http://blog.listincomprehension.com/search/label/procket
# makefile (from `erlang.mk', line 1872)
pkg_fs_fetch = git
# makefile (from `erlang.mk', line 3798)
pkg_stripe_description = Erlang interface to the stripe.com API
# makefile (from `erlang.mk', line 2712)
pkg_mimerl_fetch = git
# makefile (from `erlang.mk', line 1933)
pkg_gen_icmp_name = gen_icmp
# makefile (from `erlang.mk', line 2975)
pkg_opencouch_homepage = https://github.com/benoitc/opencouch
# makefile (from `erlang.mk', line 1848)
pkg_folsom_fetch = git
# makefile (from `erlang.mk', line 3629)
pkg_sieve_name = sieve
# makefile (from `erlang.mk', line 3873)
pkg_syntaxerl_repo = https://github.com/ten0s/syntaxerl
# makefile (from `erlang.mk', line 782)
pkg_cloudi_service_http_elli_description = elli HTTP CloudI Service
# makefile (from `erlang.mk', line 2773)
pkg_mongooseim_name = mongooseim
# makefile (from `erlang.mk', line 2930)
pkg_nprocreg_commit = master
# makefile (from `erlang.mk', line 985)
pkg_decimal_repo = https://github.com/tim/erlang-decimal
# makefile (from `erlang.mk', line 1421)
pkg_erlasticsearch_name = erlasticsearch
# makefile (from `erlang.mk', line 433)
pkg_basho_bench_repo = https://github.com/basho/basho_bench
# makefile (from `erlang.mk', line 2350)
pkg_kafka_protocol_description = Kafka protocol Erlang library
# makefile (from `erlang.mk', line 4205)
pkg_yamerl_name = yamerl
# makefile (from `erlang.mk', line 1757)
pkg_exs64_name = exs64
# makefile (from `erlang.mk', line 2705)
pkg_merl_repo = https://github.com/richcarl/merl
# makefile (from `erlang.mk', line 3448)
pkg_riak_ensemble_fetch = git
# makefile (from `erlang.mk', line 3689)
pkg_smother_repo = https://github.com/ramsay-t/Smother
# makefile (from `erlang.mk', line 3073)
pkg_pgsql_repo = https://github.com/semiocast/pgsql
# makefile (from `erlang.mk', line 320)
pkg_aberth_fetch = git
# makefile (from `erlang.mk', line 3257)
pkg_quickrand_repo = https://github.com/okeuday/quickrand
# makefile (from `erlang.mk', line 2422)
pkg_kucumberl_description = A pure-erlang, open-source, implementation of Cucumber
# makefile (from `erlang.mk', line 3165)
pkg_prometheus_name = prometheus
# makefile (from `erlang.mk', line 3727)
pkg_srly_homepage = https://github.com/msantos/srly
# makefile (from `erlang.mk', line 727)
pkg_cloudi_service_db_mysql_homepage = http://cloudi.org/
# makefile (from `erlang.mk', line 3758)
pkg_statebox_riak_description = Convenience library that makes it easier to use statebox with riak, extracted from best practices in our production code at Mochi Media.
# makefile (from `erlang.mk', line 905)
pkg_covertool_repo = https://github.com/idubrov/covertool
# makefile (from `erlang.mk', line 1230)
pkg_elixir_description = Elixir is a dynamic, functional language designed for building scalable and maintainable applications
# makefile (from `erlang.mk', line 446)
pkg_beam_description = BEAM emulator written in Erlang
# makefile (from `erlang.mk', line 578)
pkg_cake_commit = master
# makefile (from `erlang.mk', line 3529)
pkg_rivus_cep_repo = https://github.com/vascokk/rivus_cep
# makefile (from `erlang.mk', line 2953)
pkg_observer_cli_repo = https://github.com/zhongwencool/observer_cli
# makefile (from `erlang.mk', line 1213)
pkg_elarm_name = elarm
# makefile (from `erlang.mk', line 3071)
pkg_pgsql_homepage = https://github.com/semiocast/pgsql
# makefile (from `erlang.mk', line 3381)
pkg_reltool_util_name = reltool_util
# makefile (from `erlang.mk', line 3993)
pkg_triq_repo = https://gitlab.com/triq/triq.git
# makefile (from `erlang.mk', line 4087)
pkg_vmq_bridge_homepage = https://verne.mq/
# makefile (from `erlang.mk', line 3576)
pkg_setup_fetch = git
# makefile (from `erlang.mk', line 1408)
pkg_erlang_term_fetch = git
# makefile (from `erlang.mk', line 1217)
pkg_elarm_repo = https://github.com/esl/elarm
# makefile (from `Makefile', line 2)
PROJECT_DESCRIPTION = New project
# makefile (from `erlang.mk', line 2378)
pkg_kdht_commit = master
# makefile (from `erlang.mk', line 3506)
pkg_riakhttpc_commit = master
# makefile (from `erlang.mk', line 3175)
pkg_prop_homepage = https://github.com/nuex/prop
# makefile (from `erlang.mk', line 2666)
pkg_mcerlang_commit = master
# makefile (from `erlang.mk', line 2021)
pkg_giallo_name = giallo
# makefile (from `erlang.mk', line 3313)
pkg_rbeacon_repo = https://github.com/refuge/rbeacon
# makefile (from `erlang.mk', line 559)
pkg_bullet_homepage = http://ninenines.eu
# makefile (from `erlang.mk', line 2310)
pkg_jsonerl_description = yet another but slightly different erlang <-> json encoder/decoder
# makefile (from `erlang.mk', line 623)
pkg_check_node_homepage = https://github.com/basho-labs/riak_nagios
# makefile (from `erlang.mk', line 439)
pkg_bcrypt_homepage = https://github.com/erlangpack/bcrypt
# makefile (from `erlang.mk', line 3374)
pkg_reload_mk_description = Live reload plugin for erlang.mk.
# makefile (from `erlang.mk', line 2245)
pkg_jesse_name = jesse
# makefile (from `erlang.mk', line 999)
pkg_detest_homepage = https://github.com/biokoda/detest
# makefile (from `erlang.mk', line 2864)
pkg_newrelic_fetch = git
# makefile (from `erlang.mk', line 2736)
pkg_mochiweb_fetch = git
# makefile (from `erlang.mk', line 2112)
pkg_hackney_fetch = git
# makefile (from `erlang.mk', line 3821)
pkg_surrogate_name = surrogate
# makefile (from `erlang.mk', line 2407)
pkg_kjell_homepage = https://github.com/karlll/kjell
# makefile (from `erlang.mk', line 615)
pkg_chaos_monkey_homepage = https://github.com/dLuna/chaos_monkey
# makefile (from `erlang.mk', line 2696)
pkg_merge_index_fetch = git
 
# makefile (from `erlang.mk', line 156)
tab := $(subst ,,	)
# makefile (from `erlang.mk', line 3361)
pkg_redgrid_repo = https://github.com/jkvor/redgrid
# makefile (from `erlang.mk', line 1825)
pkg_fix_repo = https://github.com/maxlapshin/fix
# makefile (from `erlang.mk', line 2055)
pkg_gpb_homepage = https://github.com/tomas-abrahamsson/gpb
# makefile (from `erlang.mk', line 504)
pkg_bitcask_fetch = git
# makefile (from `erlang.mk', line 2349)
pkg_kafka_protocol_name = kafka_protocol
# environment
IRBRC = /Users/alex/.rvm/rubies/ruby-3.0.0/.irbrc
# makefile (from `erlang.mk', line 3383)
pkg_reltool_util_homepage = https://github.com/okeuday/reltool_util
# makefile (from `erlang.mk', line 3170)
pkg_prometheus_commit = master
# makefile (from `erlang.mk', line 4086)
pkg_vmq_bridge_description = Component of VerneMQ: A distributed MQTT message broker
# makefile (from `erlang.mk', line 4208)
pkg_yamerl_fetch = git
# makefile (from `erlang.mk', line 5644)
define compat_rebar_config
{deps, [
$(call comma_list,$(foreach d,$(DEPS), $(if $(filter hex,$(call dep_fetch,$d)), {$(call dep_name,$d)$(comma)"$(call dep_repo,$d)"}, {$(call dep_name,$d)$(comma)".*"$(comma){git,"$(call dep_repo,$d)"$(comma)"$(call dep_commit,$d)"}})))
]}.
{erl_opts, $(call compat_erlc_opts_to_list,$(ERLC_OPTS))}.
endef
# makefile (from `erlang.mk', line 1042)
pkg_dns_commit = master
# makefile (from `erlang.mk', line 481)
pkg_bifrost_repo = https://github.com/thorstadt/bifrost
# makefile (from `erlang.mk', line 4412)
dep_fetch = $(call query_fetch_method,$(1))
# makefile (from `erlang.mk', line 2210)
pkg_ircd_commit = master
# makefile (from `erlang.mk', line 1942)
pkg_gen_leader_description = leader election behavior
# makefile (from `erlang.mk', line 2831)
pkg_n2o_homepage = https://github.com/5HT/n2o
# makefile (from `erlang.mk', line 846)
pkg_cloudi_service_udp_description = UDP CloudI Service
# automatic
*D = $(patsubst %/,%,$(dir $*))
# makefile (from `erlang.mk', line 1229)
pkg_elixir_name = elixir
# makefile (from `erlang.mk', line 2854)
pkg_neotoma_description = Erlang library and packrat parser-generator for parsing expression grammars.
# makefile (from `erlang.mk', line 445)
pkg_beam_name = beam
# makefile (from `erlang.mk', line 2201)
pkg_irc_lib_repo = https://github.com/OtpChatBot/irc_lib
# makefile (from `erlang.mk', line 4176)
pkg_wrangler_fetch = git
# makefile (from `erlang.mk', line 3678)
pkg_slack_description = Minimal slack notification OTP library.
# makefile (from `erlang.mk', line 3034)
pkg_parsexml_commit = master
# makefile (from `erlang.mk', line 3623)
pkg_sidejob_homepage = https://github.com/basho/sidejob
# makefile (from `erlang.mk', line 3081)
pkg_pkgx_repo = https://github.com/arjan/pkgx
# makefile (from `erlang.mk', line 2222)
pkg_iso8601_description = Erlang ISO 8601 date formatter/parser
# makefile (from `erlang.mk', line 3217)
pkg_purity_repo = https://github.com/mpitid/purity
# makefile (from `erlang.mk', line 2439)
pkg_kvlists_homepage = https://github.com/jcomellas/kvlists
# automatic
+D = $(patsubst %/,%,$(dir $+))
# makefile (from `erlang.mk', line 384)
pkg_antidote_fetch = git
# makefile (from `erlang.mk', line 2314)
pkg_jsonerl_commit = master
# makefile (from `erlang.mk', line 1967)
pkg_gen_rpc_homepage = https://github.com/priestjim/gen_rpc.git
# makefile (from `erlang.mk', line 1513)
pkg_erlmc_repo = https://github.com/jkvor/erlmc
# makefile (from `erlang.mk', line 3154)
pkg_pqueue_commit = master
# makefile (from `erlang.mk', line 1488)
pkg_erlfsmon_fetch = git
# makefile (from `erlang.mk', line 3830)
pkg_swab_description = General purpose buffer handling module
# makefile (from `erlang.mk', line 3242)
pkg_qrcode_commit = master
# makefile (from `erlang.mk', line 4137)
pkg_vmstats_repo = https://github.com/ferd/vmstats
# makefile (from `erlang.mk', line 1477)
pkg_erldocker_name = erldocker
# makefile (from `erlang.mk', line 3010)
pkg_otpbp_commit = master
# makefile (from `erlang.mk', line 2153)
pkg_hyper_repo = https://github.com/GameAnalytics/hyper
# makefile (from `erlang.mk', line 1336)
pkg_epubnub_fetch = git
# makefile (from `erlang.mk', line 1209)
pkg_ekaf_repo = https://github.com/helpshift/ekaf
# makefile (from `erlang.mk', line 2760)
pkg_modlib_fetch = git
# makefile (from `erlang.mk', line 1057)
pkg_dynamic_compile_repo = https://github.com/jkvor/dynamic_compile
# makefile (from `erlang.mk', line 3782)
pkg_stdinout_pool_description = stdinout_pool    : stuff goes in, stuff goes out. there's never any miscommunication.
# makefile (from `erlang.mk', line 3373)
pkg_reload_mk_name = reload_mk
# makefile (from `erlang.mk', line 2880)
pkg_nitrogen_core_fetch = git
# automatic
%F = $(notdir $%)
# makefile (from `erlang.mk', line 4013)
pkg_twitter_erlang_name = twitter_erlang
# makefile (from `erlang.mk', line 2821)
pkg_mysql_name = mysql
# makefile (from `erlang.mk', line 4181)
pkg_wsock_name = wsock
# makefile (from `erlang.mk', line 3085)
pkg_pkt_name = pkt
# makefile (from `erlang.mk', line 1982)
pkg_gen_tracker_description = supervisor with ets handling of children and their metadata
# makefile (from `erlang.mk', line 2658)
pkg_mcd_commit = master
# makefile (from `erlang.mk', line 2343)
pkg_kafka_homepage = https://github.com/wooga/kafka-erlang
# makefile (from `erlang.mk', line 847)
pkg_cloudi_service_udp_homepage = http://cloudi.org/
# makefile (from `erlang.mk', line 3647)
pkg_simhash_homepage = https://github.com/ferd/simhash
# makefile (from `erlang.mk', line 3517)
pkg_riakpool_name = riakpool
# makefile (from `erlang.mk', line 4576)
dep_autopatch_noop = 	printf "noop:\n" > $(DEPS_DIR)/$(1)/Makefile
# makefile (from `erlang.mk', line 3893)
pkg_tddreloader_name = tddreloader
# makefile (from `erlang.mk', line 3191)
pkg_props_homepage = https://github.com/greyarea/props
# makefile (from `erlang.mk', line 790)
pkg_cloudi_service_map_reduce_description = Map/Reduce CloudI Service
# makefile (from `erlang.mk', line 2305)
pkg_jsone_repo = https://github.com/sile/jsone.git
# makefile (from `erlang.mk', line 3584)
pkg_sext_fetch = git
# makefile (from `erlang.mk', line 1672)
pkg_etest_fetch = git
# makefile (from `erlang.mk', line 3767)
pkg_statman_homepage = https://github.com/knutin/statman
# makefile (from `erlang.mk', line 1170)
pkg_egeoip_commit = master
# makefile (from `erlang.mk', line 350)
pkg_aleppo_description = Alternative Erlang Pre-Processor
# makefile (from `erlang.mk', line 3591)
pkg_sfmt_homepage = https://github.com/jj1bdx/sfmt-erlang
# makefile (from `erlang.mk', line 4233)
pkg_zab_engine_repo = https://github.com/xinmingyao/zab_engine
# makefile (from `erlang.mk', line 640)
pkg_chumak_fetch = git
# makefile (from `erlang.mk', line 554)
pkg_bson_commit = master
 
# makefile (from `erlang.mk', line 1226)
pkg_eleveldb_commit = master
# makefile (from `erlang.mk', line 1745)
pkg_exometer_repo = https://github.com/Feuerlabs/exometer
# makefile (from `erlang.mk', line 2710)
pkg_mimerl_description = library to handle mimetypes
# makefile (from `erlang.mk', line 758)
pkg_cloudi_service_filesystem_description = Filesystem CloudI Service
# makefile (from `erlang.mk', line 4193)
pkg_xhttpc_repo = https://github.com/seriyps/xhttpc
# makefile (from `erlang.mk', line 845)
pkg_cloudi_service_udp_name = cloudi_service_udp
# makefile (from `erlang.mk', line 3999)
pkg_tunctl_homepage = https://github.com/msantos/tunctl
# makefile (from `erlang.mk', line 2719)
pkg_mimetypes_homepage = https://github.com/spawngrid/mimetypes
# makefile (from `erlang.mk', line 1368)
pkg_erl_streams_fetch = git
# makefile (from `erlang.mk', line 3286)
pkg_radierl_description = RADIUS protocol stack implemented in Erlang.
# makefile (from `erlang.mk', line 1272)
pkg_enm_fetch = git
# makefile (from `erlang.mk', line 3677)
pkg_slack_name = slack
# makefile (from `erlang.mk', line 7272)
define hex_release_unretire.erl
	{ok, _} = application:ensure_all_started(ssl),
	{ok, _} = application:ensure_all_started(inets),
	Config = $(hex_config.erl),
	ConfigF = Config#{api_key => <<"$(strip $1)">>},
	case hex_api_release:unretire(ConfigF, <<"$(strip $(PROJECT))">>, <<"$(strip $2)">>) of
		{ok, {204, _, _}} ->
			io:format("Release $(strip $2) is not retired anymore~n"),
			halt(0);
		{ok, {Status, _, Errors}} ->
			io:format("Error ~b: ~0p~n", [Status, Errors]),
			halt(87)
	end
endef
# makefile (from `erlang.mk', line 3365)
pkg_redo_name = redo
# makefile (from `erlang.mk', line 4178)
pkg_wrangler_commit = master
# makefile (from `erlang.mk', line 2914)
pkg_nksip_commit = master
# makefile (from `erlang.mk', line 798)
pkg_cloudi_service_oauth1_description = OAuth v1.0 CloudI Service
# makefile (from `erlang.mk', line 2221)
pkg_iso8601_name = iso8601
# makefile (from `erlang.mk', line 3665)
pkg_simple_oauth2_repo = https://github.com/virtan/simple_oauth2
# makefile (from `erlang.mk', line 1959)
pkg_gen_paxos_homepage = https://github.com/gburd/gen_paxos
# makefile (from `erlang.mk', line 4263)
pkg_zlists_homepage = https://github.com/vjache/erlang-zlists
# makefile (from `erlang.mk', line 8004)
COVER_DATA_DIR = $(COVER_REPORT_DIR)
# makefile (from `erlang.mk', line 4361)
_qfm_pkg = $(if $(pkg_$(1)_fetch),$(pkg_$(1)_fetch),fail)
# makefile (from `erlang.mk', line 2398)
pkg_kinetic_description = Erlang Kinesis Client
# makefile (from `erlang.mk', line 7023)
DEP_NAME := hex_core
# makefile (from `erlang.mk', line 1582)
pkg_erlvolt_description = VoltDB Erlang Client Driver
# makefile (from `erlang.mk', line 840)
pkg_cloudi_service_timers_fetch = git
# makefile (from `erlang.mk', line 3262)
pkg_rabbit_description = RabbitMQ Server
# makefile (from `erlang.mk', line 2046)
pkg_gold_fever_description = A Treasure Hunt for Erlangers
# makefile (from `erlang.mk', line 3829)
pkg_swab_name = swab
# makefile (from `erlang.mk', line 734)
pkg_cloudi_service_db_pgsql_description = PostgreSQL CloudI Service
# makefile (from `erlang.mk', line 6990)
EUNIT_TEST_MODS = $(notdir $(basename $(call core_find,$(TEST_DIR)/,*.erl)))
# makefile (from `erlang.mk', line 1552)
pkg_erlsh_fetch = git
# makefile (from `erlang.mk', line 1993)
pkg_gen_unix_repo = https://github.com/msantos/gen_unix
# makefile (from `erlang.mk', line 4110)
pkg_vmq_server_description = Component of VerneMQ: A distributed MQTT message broker
# makefile (from `erlang.mk', line 2861)
pkg_newrelic_name = newrelic
# makefile (from `erlang.mk', line 3458)
pkg_riak_kv_commit = master
# makefile (from `erlang.mk', line 480)
pkg_bifrost_fetch = git
# makefile (from `erlang.mk', line 4350)
DEP_EARLY_PLUGINS = 
# makefile (from `erlang.mk', line 750)
pkg_cloudi_service_db_tokyotyrant_description = Tokyo Tyrant CloudI Service
# makefile (from `erlang.mk', line 3781)
pkg_stdinout_pool_name = stdinout_pool
# makefile (from `erlang.mk', line 1687)
pkg_etoml_homepage = https://github.com/kalta/etoml
# makefile (from `erlang.mk', line 1353)
pkg_eredis_repo = https://github.com/wooga/eredis
# makefile (from `erlang.mk', line 710)
pkg_cloudi_service_db_elasticsearch_description = elasticsearch CloudI Service
# makefile (from `erlang.mk', line 2295)
pkg_json_rec_homepage = https://github.com/justinkirby/json_rec
# makefile (from `erlang.mk', line 2329)
pkg_jsonx_repo = https://github.com/iskra/jsonx
# makefile (from `erlang.mk', line 1981)
pkg_gen_tracker_name = gen_tracker
# makefile (from `erlang.mk', line 2286)
pkg_json_description = a high level json library for erlang (17.0+)
# makefile (from `erlang.mk', line 2231)
pkg_jamdb_sybase_homepage = https://github.com/erlangbureau/jamdb_sybase
# makefile (from `erlang.mk', line 1026)
pkg_dispcount_commit = master
# makefile (from `erlang.mk', line 2401)
pkg_kinetic_repo = https://github.com/AdRoll/kinetic
# makefile (from `erlang.mk', line 1710)
pkg_euthanasia_description = Merciful killer for your Erlang processes
# environment
LC_ALL = C
# makefile (from `erlang.mk', line 2121)
pkg_hamcrest_repo = https://github.com/hyperthunk/hamcrest-erlang
# makefile (from `erlang.mk', line 4413)
dep_name = $(call query_name,$(1))
# makefile (from `erlang.mk', line 2149)
pkg_hyper_name = hyper
# makefile (from `erlang.mk', line 823)
pkg_cloudi_service_router_homepage = http://cloudi.org/
# makefile (from `erlang.mk', line 546)
pkg_brod_commit = master
# makefile (from `erlang.mk', line 1406)
pkg_erlang_term_description = Erlang Term Info
# makefile (from `erlang.mk', line 4152)
pkg_webmachine_fetch = git
# makefile (from `erlang.mk', line 349)
pkg_aleppo_name = aleppo
# makefile (from `erlang.mk', line 2429)
pkg_kvc_name = kvc
# makefile (from `erlang.mk', line 703)
pkg_cloudi_service_db_couchdb_homepage = http://cloudi.org/
# makefile (from `erlang.mk', line 586)
pkg_carotene_commit = master
# makefile (from `erlang.mk', line 3281)
pkg_rack_repo = https://github.com/erlyvideo/rack
# makefile (from `erlang.mk', line 3462)
pkg_riak_pg_description = Distributed process groups with riak_core.
# makefile (from `erlang.mk', line 2335)
pkg_jsx_homepage = https://github.com/talentdeficit/jsx
# makefile (from `erlang.mk', line 3934)
pkg_tirerl_description = Erlang interface to Elastic Search
# makefile (from `erlang.mk', line 3664)
pkg_simple_oauth2_fetch = git
# makefile (from `erlang.mk', line 1314)
pkg_episcina_commit = master
# makefile (from `erlang.mk', line 3871)
pkg_syntaxerl_homepage = https://github.com/ten0s/syntaxerl
# makefile (from `erlang.mk', line 3031)
pkg_parsexml_homepage = https://github.com/maxlapshin/parsexml
# makefile (from `erlang.mk', line 3135)
pkg_poolboy_homepage = https://github.com/devinus/poolboy
# makefile (from `erlang.mk', line 3902)
pkg_tempo_description = NIF-based date and time parsing and formatting for Erlang.
# makefile (from `erlang.mk', line 591)
pkg_cberl_homepage = https://github.com/chitika/cberl
# makefile (from `erlang.mk', line 3733)
pkg_sshrpc_name = sshrpc
# makefile (from `erlang.mk', line 1065)
pkg_e2_repo = https://github.com/gar1t/e2
# makefile (from `erlang.mk', line 3285)
pkg_radierl_name = radierl
# makefile (from `erlang.mk', line 3142)
pkg_pooler_description = An OTP Process Pool Application
# makefile (from `erlang.mk', line 511)
pkg_bitstore_homepage = https://github.com/bdionne/bitstore
# makefile (from `erlang.mk', line 610)
pkg_cferl_commit = master
# makefile (from `erlang.mk', line 4065)
pkg_vert_repo = https://github.com/msantos/erlang-libvirt
# makefile (from `erlang.mk', line 458)
pkg_beanstalk_commit = master
# makefile (from `erlang.mk', line 2737)
pkg_mochiweb_repo = https://github.com/mochi/mochiweb
# makefile (from `erlang.mk', line 3377)
pkg_reload_mk_repo = https://github.com/bullno1/reload.mk
# makefile (from `erlang.mk', line 1462)
pkg_erldis_description = redis erlang client library
# makefile (from `erlang.mk', line 2033)
pkg_gin_repo = https://github.com/mad-cocktail/gin
# makefile (from `erlang.mk', line 818)
pkg_cloudi_service_quorum_commit = master
# makefile (from `erlang.mk', line 2766)
 
pkg_mongodb_description = MongoDB driver for Erlang
# makefile (from `erlang.mk', line 2137)
pkg_hottub_repo = https://github.com/bfrog/hottub
# makefile (from `erlang.mk', line 1581)
pkg_erlvolt_name = erlvolt
# makefile (from `erlang.mk', line 5168)
appsrc_verbose_2 = set -x;
# makefile (from `erlang.mk', line 3239)
pkg_qrcode_homepage = https://github.com/komone/qrcode
# makefile (from `erlang.mk', line 733)
pkg_cloudi_service_db_pgsql_name = cloudi_service_db_pgsql
# default
SUFFIXES := 
# makefile (from `erlang.mk', line 2753)
pkg_mockgyver_repo = https://github.com/klajo/mockgyver
# makefile (from `erlang.mk', line 3022)
pkg_parse_trans_description = Parse transform utilities for Erlang
# makefile (from `erlang.mk', line 180)
core_native_path = $1
# makefile (from `erlang.mk', line 3026)
pkg_parse_trans_commit = master
# makefile (from `erlang.mk', line 7566)
define get_relx_release.erl
	{ok, Config} = file:consult("$(call core_native_path,$(RELX_CONFIG))"),
	{release, {Name, Vsn0}, _} = lists:keyfind(release, 1, Config),
	Vsn = case Vsn0 of
		{cmd, Cmd} -> os:cmd(Cmd);
		semver -> "";
		{semver, _} -> "";
		VsnStr -> Vsn0
	end,
	Extended = case lists:keyfind(extended_start_script, 1, Config) of
		{_, true} -> "1";
		_ -> ""
	end,
	io:format("~s ~s ~s", [Name, Vsn, Extended]),
	halt(0).
endef
# makefile (from `erlang.mk', line 1837)
pkg_fn_name = fn
# makefile (from `erlang.mk', line 2936)
pkg_oauth_fetch = git
# makefile (from `erlang.mk', line 3608)
pkg_sheriff_fetch = git
# makefile (from `erlang.mk', line 749)
pkg_cloudi_service_db_tokyotyrant_name = cloudi_service_db_tokyotyrant
# makefile (from `erlang.mk', line 401)
pkg_asciideck_repo = https://github.com/ninenines/asciideck
# makefile (from `erlang.mk', line 3898)
pkg_tddreloader_commit = master
# makefile (from `erlang.mk', line 1200)
pkg_ejwt_fetch = git
# makefile (from `erlang.mk', line 2607)
pkg_lux_homepage = https://github.com/hawk/lux
# makefile (from `erlang.mk', line 709)
pkg_cloudi_service_db_elasticsearch_name = cloudi_service_db_elasticsearch
# makefile (from `erlang.mk', line 1866)
pkg_folsomite_commit = master
# makefile (from `erlang.mk', line 4127)
pkg_vmq_systree_homepage = https://verne.mq/
# makefile (from `erlang.mk', line 357)
pkg_alog_name = alog
# makefile (from `erlang.mk', line 4189)
pkg_xhttpc_name = xhttpc
# makefile (from `erlang.mk', line 2689)
pkg_memo_repo = https://github.com/tuncer/memo
# makefile (from `erlang.mk', line 2285)
pkg_json_name = json
# makefile (from `erlang.mk', line 415)
pkg_backoff_homepage = https://github.com/ferd/backoff
# makefile (from `erlang.mk', line 1158)
pkg_efene_description = Alternative syntax for the Erlang Programming Language focusing on simplicity, ease of use and programmer UX
# makefile (from `erlang.mk', line 2921)
pkg_nodefinder_repo = https://github.com/okeuday/nodefinder
# makefile (from `erlang.mk', line 3094)
pkg_plain_fsm_description = A behaviour/support library for writing plain Erlang FSMs.
# makefile (from `erlang.mk', line 3861)
pkg_sync_name = sync
# makefile (from `erlang.mk', line 1709)
pkg_euthanasia_name = euthanasia
# makefile (from `erlang.mk', line 2096)
pkg_gun_fetch = git
# makefile (from `erlang.mk', line 5920)
define tpl_cowboy_http
-module($(n)).
-behaviour(cowboy_http_handler).

-export([init/3]).
-export([handle/2]).
-export([terminate/3]).

-record(state, {
}).

init(_, Req, _Opts) ->
	{ok, Req, #state{}}.

handle(Req, State=#state{}) ->
	{ok, Req2} = cowboy_req:reply(200, Req),
	{ok, Req2, State}.

terminate(_Reason, _Req, _State) ->
	ok.
endef
# makefile (from `erlang.mk', line 3160)
 
pkg_procket_fetch = git
# makefile (from `erlang.mk', line 1361)
pkg_eredis_pool_repo = https://github.com/hiroeorz/eredis_pool
# makefile (from `erlang.mk', line 7302)
define hex_docs_publish.erl
	{ok, _} = application:ensure_all_started(ssl),
	{ok, _} = application:ensure_all_started(inets),
	Config = $(hex_config.erl),
	ConfigF = Config#{api_key => <<"$(strip $1)">>},
	{ok, Tarball} = file:read_file("$(strip $(HEX_DOCS_TARBALL_OUTPUT_FILE))"),
	case hex_api:post(ConfigF,
			["packages", "$(strip $(PROJECT))", "releases", "$(strip $(PROJECT_VERSION))", "docs"],
			{"application/octet-stream", Tarball}) of
		{ok, {Status, _, _}} when Status >= 200, Status < 300 ->
			io:format("Docs published~n"),
			halt(0);
		{ok, {Status, _, Errors}} ->
			io:format("Error ~b: ~0p~n", [Status, Errors]),
			halt(88)
	end
endef
# makefile (from `erlang.mk', line 3543)
pkg_rust_mk_homepage = https://github.com/goertzenator/rust.mk
# makefile (from `erlang.mk', line 190)
core_lc = $(subst A,a,$(subst B,b,$(subst C,c,$(subst D,d,$(subst E,e,$(subst F,f,$(subst G,g,$(subst H,h,$(subst I,i,$(subst J,j,$(subst K,k,$(subst L,l,$(subst M,m,$(subst N,n,$(subst O,o,$(subst P,p,$(subst Q,q,$(subst R,r,$(subst S,s,$(subst T,t,$(subst U,u,$(subst V,v,$(subst W,w,$(subst X,x,$(subst Y,y,$(subst Z,z,$(1)))))))))))))))))))))))))))
# makefile (from `erlang.mk', line 2808)
pkg_mustache_fetch = git
# makefile (from `erlang.mk', line 3014)
pkg_pal_description = Pragmatic Authentication Library
# makefile (from `erlang.mk', line 2111)
pkg_hackney_homepage = https://github.com/benoitc/hackney
# makefile (from `erlang.mk', line 2593)
pkg_luerl_repo = https://github.com/rvirding/luerl
# makefile (from `erlang.mk', line 2461)
pkg_lager_amqp_backend_name = lager_amqp_backend
# makefile (from `erlang.mk', line 1296)
pkg_eper_fetch = git
# makefile (from `erlang.mk', line 1830)
pkg_flower_description = FlowER - a Erlang OpenFlow development platform
# makefile (from `erlang.mk', line 2585)
pkg_lucid_repo = https://github.com/tatsuhiro-t/lucid
# makefile (from `erlang.mk', line 417)
pkg_backoff_repo = https://github.com/ferd/backoff
# makefile (from `erlang.mk', line 168)
escape_dquotes = $(subst ",\",$1)
# makefile (from `erlang.mk', line 3185)
pkg_proper_repo = https://github.com/manopapad/proper
# makefile (from `erlang.mk', line 432)
pkg_basho_bench_fetch = git
# makefile (from `erlang.mk', line 2366)
pkg_katja_description = A simple Riemann client written in Erlang.
# makefile (from `erlang.mk', line 7512)
define relx_tar.erl
	{ok, Config} = file:consult("$(call core_native_path,$(RELX_CONFIG))"),
	{release, {Name, Vsn0}, _} = lists:keyfind(release, 1, Config),
	Vsn = case Vsn0 of
		{cmd, Cmd} -> os:cmd(Cmd);
		semver -> "";
		{semver, _} -> "";
		VsnStr -> Vsn0
	end,
	{ok, _} = relx:build_tar(#{name => Name, vsn => Vsn}, Config),
	halt(0).
endef
# makefile (from `erlang.mk', line 192)
core_ls = $(filter-out $(1),$(shell echo $(1)))
# makefile (from `erlang.mk', line 914)
pkg_cowboy_commit = 1.0.4
# makefile (from `erlang.mk', line 2558)
pkg_locks_description = A scalable, deadlock-resolving resource locker
# makefile (from `erlang.mk', line 2306)
pkg_jsone_commit = master
# makefile (from `erlang.mk', line 2254)
pkg_jiffy_description = JSON NIFs for Erlang.
# makefile (from `erlang.mk', line 3141)
pkg_pooler_name = pooler
# makefile (from `erlang.mk', line 164)
comma_list = $(subst $(space),$(comma),$(strip $(1)))
# makefile (from `erlang.mk', line 1197)
pkg_ejwt_name = ejwt
# makefile (from `erlang.mk', line 2514)
pkg_lethink_commit = master
# makefile (from `erlang.mk', line 5021)
dep_fetch_svn = 	svn checkout -q $(call dep_repo,$(1)) $(DEPS_DIR)/$(call dep_name,$(1));
# makefile (from `erlang.mk', line 3074)
pkg_pgsql_commit = master
# makefile (from `erlang.mk', line 1461)
pkg_erldis_name = erldis
# makefile (from `erlang.mk', line 1549)
pkg_erlsh_name = erlsh
# makefile (from `erlang.mk', line 2454)
pkg_lager_description = A logging framework for Erlang/OTP.
# environment
ORIGINAL_XDG_CURRENT_DESKTOP = undefined
# makefile (from `erlang.mk', line 2765)
pkg_mongodb_name = mongodb
# makefile (from `erlang.mk', line 1887)
pkg_gcm_homepage = https://github.com/pdincau/gcm-erlang
# makefile (from `erlang.mk', line 633)
pkg_chronos_repo = https://github.com/lehoff/chronos
# makefile (from `erlang.mk', line 2952)
pkg_observer_cli_fetch = git
# makefile (from `erlang.mk', line 2158)
pkg_i18n_description = International components for unicode from Erlang (unicode, date, string, number, format, locale, localization, transliteration, icu4e)
# makefile (from `erlang.mk', line 679)
pkg_cloudi_service_db_homepage = http://cloudi.org/
# makefile (from `erlang.mk', line 1327)
pkg_epocxy_homepage = https://github.com/duomark/epocxy
# makefile (from `erlang.mk', line 2554)
pkg_locker_commit = master
# makefile (from `erlang.mk', line 1397)
pkg_erlang_smtp_name = erlang_smtp
# makefile (from `erlang.mk', line 1606)
pkg_errd_description = Erlang RRDTool library
# makefile (from `erlang.mk', line 3833)
pkg_swab_repo = https://github.com/crownedgrouse/swab
# makefile (from `erlang.mk', line 3215)
pkg_purity_homepage = https://github.com/mpitid/purity
# makefile (from `erlang.mk', line 775)
pkg_cloudi_service_http_cowboy_homepage = http://cloudi.org/
# makefile (from `erlang.mk', line 2303)
pkg_jsone_homepage = https://github.com/sile/jsone.git
# makefile (from `erlang.mk', line 1154)
pkg_eep_app_commit = master
# makefile (from `erlang.mk', line 2945)
pkg_oauth2_repo = https://github.com/kivra/oauth2
# makefile (from `erlang.mk', line 721)
pkg_cloudi_service_db_memcached_repo = https://github.com/CloudI/cloudi_service_db_memcached
# makefile (from `erlang.mk', line 1182)
pkg_ej_description = Helper module for working with Erlang terms representing JSON
# makefile (from `erlang.mk', line 3847)
pkg_switchboard_homepage = https://github.com/thusfresh/switchboard
# environment
MY_RUBY_HOME = /Users/alex/.rvm/rubies/ruby-3.0.0
# makefile (from `erlang.mk', line 6506)
CI_ERLLVM = 
# makefile (from `erlang.mk', line 1797)
pkg_fast_disk_log_name = fast_disk_log
# makefile (from `erlang.mk', line 3442)
pkg_riak_dt_commit = master
# makefile (from `erlang.mk', line 2703)
pkg_merl_homepage = https://github.com/richcarl/merl
# makefile (from `erlang.mk', line 4079)
pkg_vmq_acl_homepage = https://verne.mq/
# makefile (from `erlang.mk', line 6803)
EDOC_SRC_DIRS = 
# makefile (from `erlang.mk', line 6504)
 
CI_OTP = 
# makefile (from `erlang.mk', line 1157)
pkg_efene_name = efene
# makefile (from `erlang.mk', line 1344)
pkg_eqm_fetch = git
# makefile (from `erlang.mk', line 2414)
pkg_kraken_description = Distributed Pubsub Server for Realtime Apps
# automatic
<D = $(patsubst %/,%,$(dir $<))
# makefile (from `erlang.mk', line 3831)
pkg_swab_homepage = https://github.com/crownedgrouse/swab
# makefile (from `erlang.mk', line 4365)
query_repo = $(call _qr,$(1),$(call query_fetch_method,$(1)))
# makefile (from `erlang.mk', line 3434)
pkg_riak_core_commit = master
# makefile (from `erlang.mk', line 1266)
pkg_emysql_commit = master
# makefile (from `erlang.mk', line 4145)
pkg_walrus_repo = https://github.com/devinus/walrus
# makefile (from `erlang.mk', line 3362)
pkg_redgrid_commit = master
# makefile (from `erlang.mk', line 3343)
pkg_recon_homepage = https://github.com/ferd/recon
# makefile (from `erlang.mk', line 1591)
pkg_erlware_commons_homepage = https://github.com/erlware/erlware_commons
# makefile (from `erlang.mk', line 2785)
pkg_moyo_repo = https://github.com/dwango/moyo
# makefile (from `erlang.mk', line 1417)
pkg_erlastic_search_repo = https://github.com/tsloughter/erlastic_search
# makefile (from `erlang.mk', line 2574)
pkg_lol_description = Lisp on erLang, and programming is fun again
# makefile (from `erlang.mk', line 3961)
pkg_trails_repo = https://github.com/inaka/cowboy-trails
# makefile (from `erlang.mk', line 1829)
pkg_flower_name = flower
# makefile (from `erlang.mk', line 2902)
pkg_nkpacket_description = Generic Erlang transport layer
# makefile (from `erlang.mk', line 3186)
pkg_proper_commit = master
# makefile (from `erlang.mk', line 869)
pkg_cluster_info_name = cluster_info
# makefile (from `erlang.mk', line 2790)
pkg_msgpack_description = MessagePack (de)serializer implementation for Erlang
# makefile (from `erlang.mk', line 2365)
pkg_katja_name = katja
# makefile (from `erlang.mk', line 3728)
pkg_srly_fetch = git
# makefile (from `erlang.mk', line 462)
pkg_bear_description = a set of statistics functions for erlang
# makefile (from `erlang.mk', line 3881)
pkg_syslog_repo = https://github.com/Vagabond/erlang-syslog
# makefile (from `erlang.mk', line 534)
pkg_boss_db_description = BossDB: a sharded, caching, pooling, evented ORM for Erlang
# makefile (from `erlang.mk', line 4001)
pkg_tunctl_repo = https://github.com/msantos/tunctl
# makefile (from `erlang.mk', line 2253)
pkg_jiffy_name = jiffy
# makefile (from `erlang.mk', line 647)
pkg_cl_homepage = https://github.com/tonyrog/cl
# makefile (from `erlang.mk', line 4456)
ALL_APPS_DIRS_TO_BUILD = $(if $(LOCAL_DEPS_DIRS)$(IS_APP),$(LOCAL_DEPS_DIRS),$(ALL_APPS_DIRS))
# makefile (from `erlang.mk', line 3039)
pkg_partisan_homepage = http://partisan.cloud
# makefile (from `erlang.mk', line 1937)
pkg_gen_icmp_repo = https://github.com/msantos/gen_icmp
# makefile (from `erlang.mk', line 3951)
pkg_traffic_tools_homepage = https://github.com/systra/traffic_tools
# makefile (from `erlang.mk', line 3633)
pkg_sieve_repo = https://github.com/benoitc/sieve
# makefile (from `erlang.mk', line 670)
pkg_cloudi_service_api_requests_description = CloudI Service API requests (JSON-RPC/Erlang-term support)
# makefile (from `erlang.mk', line 2322)
pkg_jsonpath_commit = master
# makefile (from `erlang.mk', line 21)
ERLANG_MK_WITHOUT = 
# makefile (from `erlang.mk', line 4497)
FORCE_REBUILD = 
# makefile (from `erlang.mk', line 2453)
pkg_lager_name = lager
# makefile (from `erlang.mk', line 3222)
pkg_push_service_description = Push service
# makefile (from `erlang.mk', line 4143)
pkg_walrus_homepage = https://github.com/devinus/walrus
# makefile (from `erlang.mk', line 2200)
pkg_irc_lib_fetch = git
# makefile (from `erlang.mk', line 1997)
pkg_geode_name = geode
# makefile (from `erlang.mk', line 1425)
pkg_erlasticsearch_repo = https://github.com/dieswaytoofast/erlasticsearch
# makefile (from `erlang.mk', line 2157)
pkg_i18n_name = i18n
# automatic
?D = $(patsubst %/,%,$(dir $?))
# makefile (from `erlang.mk', line 465)
pkg_bear_repo = https://github.com/boundary/bear
# makefile (from `erlang.mk', line 4209)
pkg_yamerl_repo = https://github.com/yakaz/yamerl
# makefile (from `erlang.mk', line 3080)
pkg_pkgx_fetch = git
# makefile (from `erlang.mk', line 3562)
pkg_seestar_commit = master
# makefile (from `erlang.mk', line 3226)
pkg_push_service_commit = master
# makefile (from `erlang.mk', line 2421)
pkg_kucumberl_name = kucumberl
# makefile (from `erlang.mk', line 3776)
pkg_statsderl_fetch = git
# makefile (from `erlang.mk', line 4032)
pkg_unicorn_fetch = git
# makefile (from `erlang.mk', line 7324)
define hex_docs_delete.erl
	{ok, _} = application:ensure_all_started(ssl),
	{ok, _} = application:ensure_all_started(inets),
	Config = $(hex_config.erl),
	ConfigF = Config#{api_key => <<"$(strip $1)">>},
	case hex_api:delete(ConfigF,
			["packages", "$(strip $(PROJECT))", "releases", "$(strip $2)", "docs"]) of
		{ok, {Status, _, _}} when Status >= 200, Status < 300 ->
			io:format("Docs removed~n"),
			halt(0);
		{ok, {Status, _, Errors}} ->
			io:format("Error ~b: ~0p~n", [Status, Errors]),
			halt(89)
	end
endef
# makefile (from `erlang.mk', line 2170)
pkg_ibrowse_commit = master
# makefile (from `erlang.mk', line 1181)
pkg_ej_name = ej
# makefile (from `erlang.mk', line 3046)
pkg_pegjs_description = An implementation of PEG.js grammar for Erlang.
# makefile (from `erlang.mk', line 6319)
link_verbose_0 = @echo " LD    " $(@F);
# automatic
@D = $(patsubst %/,%,$(dir $@))
# makefile (from `erlang.mk', line 1902)
pkg_geas_description = Guess Erlang Application Scattering
# makefile (from `erlang.mk', line 663)
pkg_cloudi_core_homepage = http://cloudi.org/
# makefile (from `erlang.mk', line 3750)
pkg_statebox_description = Erlang state monad with merge/conflict-resolution capabilities. Useful for Riak.
# makefile (from `erlang.mk', line 4136)
pkg_vmstats_fetch = git
# makefile (from `erlang.mk', line 2386)
pkg_key2value_commit = master
# makefile (from `erlang.mk', line 3230)
pkg_qdate_description = Date, time, and timezone parsing, formatting, and conversion for Erlang.
# makefile (from `erlang.mk', line 1208)
pkg_ekaf_fetch = git
# makefile (from `erlang.mk', line 495)
pkg_bisect_homepage = https://github.com/knutin/bisect
# makefile (from `erlang.mk', line 4369)
query_repo_git = $(patsubst git://github.com/%,https://github.com/%,$(call query_repo_default,$(1)))
# makefile (from `erlang.mk', line 1056)
pkg_dynamic_compile_fetch = git
# makefile (from `erlang.mk', line 2362)
pkg_kai_commit = master
# makefile (from `erlang.mk', line 2815)
pkg_myproto_homepage = https://github.com/altenwald/myproto
# makefile (from `erlang.mk', line 970)
 
pkg_damocles_commit = master
# makefile (from `erlang.mk', line 4057)
pkg_ux_repo = https://github.com/erlang-unicode/ux
# makefile (from `erlang.mk', line 3822)
pkg_surrogate_description = Proxy server written in erlang. Supports reverse proxy load balancing and forward proxy with http (including CONNECT), socks4, socks5, and transparent proxy modes.
# makefile (from `erlang.mk', line 4142)
pkg_walrus_description = Walrus - Mustache-like Templating
# makefile (from `erlang.mk', line 3415)
pkg_rfc4627_jsonrpc_homepage = https://github.com/tonyg/erlang-rfc4627
# makefile (from `erlang.mk', line 48)
verbose = $(verbose_$(V))
# makefile (from `erlang.mk', line 3911)
pkg_ticktick_homepage = https://github.com/ericliang/ticktick
# makefile (from `erlang.mk', line 2777)
pkg_mongooseim_repo = https://github.com/esl/MongooseIM
# makefile (from `erlang.mk', line 3889)
pkg_taskforce_repo = https://github.com/g-andrade/taskforce
# makefile (from `erlang.mk', line 1393)
pkg_erlang_localtime_repo = https://github.com/dmitryme/erlang_localtime
# makefile (from `erlang.mk', line 1319)
pkg_eplot_homepage = https://github.com/psyeugenic/eplot
# makefile (from `erlang.mk', line 2573)
pkg_lol_name = lol
# makefile (from `erlang.mk', line 2025)
pkg_giallo_repo = https://github.com/kivra/giallo
# makefile (from `erlang.mk', line 4041)
pkg_unsplit_repo = https://github.com/uwiger/unsplit
# makefile (from `erlang.mk', line 2901)
pkg_nkpacket_name = nkpacket
# makefile (from `erlang.mk', line 4631)
define dep_autopatch_rebar.erl
	application:load(rebar),
	application:set_env(rebar, log_level, debug),
	rmemo:start(),
	Conf1 = case file:consult("$(call core_native_path,$(DEPS_DIR)/$1/rebar.config)") of
		{ok, Conf0} -> Conf0;
		_ -> []
	end,
	{Conf, OsEnv} = fun() ->
		case filelib:is_file("$(call core_native_path,$(DEPS_DIR)/$1/rebar.config.script)") of
			false -> {Conf1, []};
			true ->
				Bindings0 = erl_eval:new_bindings(),
				Bindings1 = erl_eval:add_binding('CONFIG', Conf1, Bindings0),
				Bindings = erl_eval:add_binding('SCRIPT', "$(call core_native_path,$(DEPS_DIR)/$1/rebar.config.script)", Bindings1),
				Before = os:getenv(),
				{ok, Conf2} = file:script("$(call core_native_path,$(DEPS_DIR)/$1/rebar.config.script)", Bindings),
				{Conf2, lists:foldl(fun(E, Acc) -> lists:delete(E, Acc) end, os:getenv(), Before)}
		end
	end(),
	Write = fun (Text) ->
		file:write_file("$(call core_native_path,$(DEPS_DIR)/$1/Makefile)", Text, [append])
	end,
	Escape = fun (Text) ->
		re:replace(Text, "\\\\$$", "\$$$$", [global, {return, list}])
	end,
	Write("IGNORE_DEPS += edown eper eunit_formatters meck node_package "
		"rebar_lock_deps_plugin rebar_vsn_plugin reltool_util\n"),
	Write("C_SRC_DIR = /path/do/not/exist\n"),
	Write("C_SRC_TYPE = rebar\n"),
	Write("DRV_CFLAGS = -fPIC\nexport DRV_CFLAGS\n"),
	Write(["ERLANG_ARCH = ", rebar_utils:wordsize(), "\nexport ERLANG_ARCH\n"]),
	ToList = fun
		(V) when is_atom(V) -> atom_to_list(V);
		(V) when is_list(V) -> "'\\"" ++ V ++ "\\"'"
	end,
	fun() ->
		Write("ERLC_OPTS = +debug_info\nexport ERLC_OPTS\n"),
		case lists:keyfind(erl_opts, 1, Conf) of
			false -> ok;
			{_, ErlOpts} ->
				lists:foreach(fun
					({d, D}) ->
						Write("ERLC_OPTS += -D" ++ ToList(D) ++ "=1\n");
					({d, DKey, DVal}) ->
						Write("ERLC_OPTS += -D" ++ ToList(DKey) ++ "=" ++ ToList(DVal) ++ "\n");
					({i, I}) ->
						Write(["ERLC_OPTS += -I ", I, "\n"]);
					({platform_define, Regex, D}) ->
						case rebar_utils:is_arch(Regex) of
							true -> Write("ERLC_OPTS += -D" ++ ToList(D) ++ "=1\n");
							false -> ok
						end;
					({parse_transform, PT}) ->
						Write("ERLC_OPTS += +'{parse_transform, " ++ ToList(PT) ++ "}'\n");
					(_) -> ok
				end, ErlOpts)
		end,
		Write("\n")
	end(),
	GetHexVsn = fun(N, NP) ->
		case file:consult("$(call core_native_path,$(DEPS_DIR)/$1/rebar.lock)") of
			{ok, Lock} ->
				io:format("~p~n", [Lock]),
				LockPkgs = case lists:keyfind("1.2.0", 1, Lock) of
					{_, LP} ->
						LP;
					_ ->
						case lists:keyfind("1.1.0", 1, Lock) of
							{_, LP} ->
								LP;
							_ ->
								false
						end
				end,
				if
					is_list(LockPkgs) ->
						io:format("~p~n", [LockPkgs]),
						case lists:keyfind(atom_to_binary(N, latin1), 1, LockPkgs) of
							{_, {pkg, _, Vsn}, _} ->
								io:format("~p~n", [Vsn]),
								{N, {hex, NP, binary_to_list(Vsn)}};
							_ ->
								false
						end;
					true ->
						false
				end;
			_ ->
				false
		end
	end,
	SemVsn = fun
		("~>" ++ S0) ->
			S = case S0 of
				" " ++ S1 -> S1;
				_ -> S0
			end,
			case length([ok || $$. <- S]) of
				0 -> S ++ ".0.0";
				1 -> S ++ ".0";
				_ -> S
			end;
		(S) -> S
	end,
	fun() ->
		File = case lists:keyfind(deps, 1, Conf) of
			false -> [];
			{_, Deps} ->
				[begin case case Dep of
							N when is_atom(N) -> GetHexVsn(N, N);
							{N, S} when is_atom(N), is_list(S) -> {N, {hex, N, SemVsn(S)}};
							{N, {pkg, NP}} when is_atom(N) -> GetHexVsn(N, NP);
							{N, S, {pkg, NP}} -> {N, {hex, NP, S}};
							{N, S} when is_tuple(S) -> {N, S};
							{N, _, S} -> {N, S};
							{N, _, S, _} -> {N, S};
							_ -> false
						end of
					false -> ok;
					{Name, Source} ->
						{Method, Repo, Commit} = case Source of
							{hex, NPV, V} -> {hex, V, NPV};
							{git, R} -> {git, R, master};
							{M, R, {branch, C}} -> {M, R, C};
							{M, R, {ref, C}} -> {M, R, C};
							{M, R, {tag, C}} -> {M, R, C};
							{M, R, C} -> {M, R, C}
						end,
						Write(io_lib:format("DEPS += ~s\ndep_~s = ~s ~s ~s~n", [Name, Name, Method, Repo, Commit]))
				end end || Dep <- Deps]
		end
	end(),
	fun() ->
		case lists:keyfind(erl_first_files, 1, Conf) of
			false -> ok;
			{_, Files} ->
				Names = [[" ", case lists:reverse(F) of
					"lre." ++ Elif -> lists:reverse(Elif);
					"lrx." ++ Elif -> lists:reverse(Elif);
					"lry." ++ Elif -> lists:reverse(Elif);
					Elif -> lists:reverse(Elif)
				end] || "src/" ++ F <- Files],
				Write(io_lib:format("COMPILE_FIRST +=~s\n", [Names]))
		end
	end(),
	Write("\n\nrebar_dep: preprocess pre-deps deps pre-app app\n"),
	Write("\npreprocess::\n"),
	Write("\npre-deps::\n"),
 
	Write("\npre-app::\n"),
	PatchHook = fun(Cmd) ->
		Cmd2 = re:replace(Cmd, "^([g]?make)(.*)( -C.*)", "\\\\1\\\\3\\\\2", [{return, list}]),
		case Cmd2 of
			"make -C" ++ Cmd1 -> "$$\(MAKE) -C" ++ Escape(Cmd1);
			"gmake -C" ++ Cmd1 -> "$$\(MAKE) -C" ++ Escape(Cmd1);
			"make " ++ Cmd1 -> "$$\(MAKE) -f Makefile.orig.mk " ++ Escape(Cmd1);
			"gmake " ++ Cmd1 -> "$$\(MAKE) -f Makefile.orig.mk " ++ Escape(Cmd1);
			_ -> Escape(Cmd)
		end
	end,
	fun() ->
		case lists:keyfind(pre_hooks, 1, Conf) of
			false -> ok;
			{_, Hooks} ->
				[case H of
					{'get-deps', Cmd} ->
						Write("\npre-deps::\n\t" ++ PatchHook(Cmd) ++ "\n");
					{compile, Cmd} ->
						Write("\npre-app::\n\tCC=$$\(CC) " ++ PatchHook(Cmd) ++ "\n");
					{Regex, compile, Cmd} ->
						case rebar_utils:is_arch(Regex) of
							true -> Write("\npre-app::\n\tCC=$$\(CC) " ++ PatchHook(Cmd) ++ "\n");
							false -> ok
						end;
					_ -> ok
				end || H <- Hooks]
		end
	end(),
	ShellToMk = fun(V0) ->
		V1 = re:replace(V0, "[$$][(]", "$$\(shell ", [global]),
		V = re:replace(V1, "([$$])(?![(])(\\\\w*)", "\\\\1(\\\\2)", [global]),
		re:replace(V, "-Werror\\\\b", "", [{return, list}, global])
	end,
	PortSpecs = fun() ->
		case lists:keyfind(port_specs, 1, Conf) of
			false ->
				case filelib:is_dir("$(call core_native_path,$(DEPS_DIR)/$1/c_src)") of
					false -> [];
					true ->
						[{"priv/" ++ proplists:get_value(so_name, Conf, "$(1)_drv.so"),
							proplists:get_value(port_sources, Conf, ["c_src/*.c"]), []}]
				end;
			{_, Specs} ->
				lists:flatten([case S of
					{Output, Input} -> {ShellToMk(Output), Input, []};
					{Regex, Output, Input} ->
						case rebar_utils:is_arch(Regex) of
							true -> {ShellToMk(Output), Input, []};
							false -> []
						end;
					{Regex, Output, Input, [{env, Env}]} ->
						case rebar_utils:is_arch(Regex) of
							true -> {ShellToMk(Output), Input, Env};
							false -> []
						end
				end || S <- Specs])
		end
	end(),
	PortSpecWrite = fun (Text) ->
		file:write_file("$(call core_native_path,$(DEPS_DIR)/$1/c_src/Makefile.erlang.mk)", Text, [append])
	end,
	case PortSpecs of
		[] -> ok;
		_ ->
			Write("\npre-app::\n\t@$$\(MAKE) --no-print-directory -f c_src/Makefile.erlang.mk\n"),
			PortSpecWrite(io_lib:format("ERL_CFLAGS ?= -finline-functions -Wall -fPIC -I \\"~s/erts-~s/include\\" -I \\"~s\\"\n",
				[code:root_dir(), erlang:system_info(version), code:lib_dir(erl_interface, include)])),
			PortSpecWrite(io_lib:format("ERL_LDFLAGS ?= -L \\"~s\\" -lei\n",
				[code:lib_dir(erl_interface, lib)])),
			[PortSpecWrite(["\n", E, "\n"]) || E <- OsEnv],
			FilterEnv = fun(Env) ->
				lists:flatten([case E of
					{_, _} -> E;
					{Regex, K, V} ->
						case rebar_utils:is_arch(Regex) of
							true -> {K, V};
							false -> []
						end
				end || E <- Env])
			end,
			MergeEnv = fun(Env) ->
				lists:foldl(fun ({K, V}, Acc) ->
					case lists:keyfind(K, 1, Acc) of
						false -> [{K, rebar_utils:expand_env_variable(V, K, "")}|Acc];
						{_, V0} -> [{K, rebar_utils:expand_env_variable(V, K, V0)}|Acc]
					end
				end, [], Env)
			end,
			PortEnv = case lists:keyfind(port_env, 1, Conf) of
				false -> [];
				{_, PortEnv0} -> FilterEnv(PortEnv0)
			end,
			PortSpec = fun ({Output, Input0, Env}) ->
				filelib:ensure_dir("$(call core_native_path,$(DEPS_DIR)/$1/)" ++ Output),
				Input = [[" ", I] || I <- Input0],
				PortSpecWrite([
					[["\n", K, " = ", ShellToMk(V)] || {K, V} <- lists:reverse(MergeEnv(PortEnv))],
					case $(PLATFORM) of
						darwin -> "\n\nLDFLAGS += -flat_namespace -undefined suppress";
						_ -> ""
					end,
					"\n\nall:: ", Output, "\n\t@:\n\n",
					"%.o: %.c\n\t$$\(CC) -c -o $$\@ $$\< $$\(CFLAGS) $$\(ERL_CFLAGS) $$\(DRV_CFLAGS) $$\(EXE_CFLAGS)\n\n",
					"%.o: %.C\n\t$$\(CXX) -c -o $$\@ $$\< $$\(CXXFLAGS) $$\(ERL_CFLAGS) $$\(DRV_CFLAGS) $$\(EXE_CFLAGS)\n\n",
					"%.o: %.cc\n\t$$\(CXX) -c -o $$\@ $$\< $$\(CXXFLAGS) $$\(ERL_CFLAGS) $$\(DRV_CFLAGS) $$\(EXE_CFLAGS)\n\n",
					"%.o: %.cpp\n\t$$\(CXX) -c -o $$\@ $$\< $$\(CXXFLAGS) $$\(ERL_CFLAGS) $$\(DRV_CFLAGS) $$\(EXE_CFLAGS)\n\n",
					[[Output, ": ", K, " += ", ShellToMk(V), "\n"] || {K, V} <- lists:reverse(MergeEnv(FilterEnv(Env)))],
					Output, ": $$\(foreach ext,.c .C .cc .cpp,",
						"$$\(patsubst %$$\(ext),%.o,$$\(filter %$$\(ext),$$\(wildcard", Input, "))))\n",
					"\t$$\(CC) -o $$\@ $$\? $$\(LDFLAGS) $$\(ERL_LDFLAGS) $$\(DRV_LDFLAGS) $$\(EXE_LDFLAGS)",
					case {filename:extension(Output), $(PLATFORM)} of
					    {[], _} -> "\n";
					    {_, darwin} -> "\n";
					    _ -> " -shared\n"
					end])
			end,
			[PortSpec(S) || S <- PortSpecs]
	end,
	fun() ->
		case lists:keyfind(plugins, 1, Conf) of
			false -> ok;
			{_, Plugins0} ->
				Plugins = [P || P <- Plugins0, is_tuple(P)],
				case lists:keyfind('lfe-compile', 1, Plugins) of
					false -> ok;
					_ -> Write("\nBUILD_DEPS = lfe lfe.mk\ndep_lfe.mk = git https://github.com/ninenines/lfe.mk master\nDEP_PLUGINS = lfe.mk\n")
				end
		end
	end(),
	Write("\ninclude $$\(if $$\(ERLANG_MK_FILENAME),$$\(ERLANG_MK_FILENAME),erlang.mk)"),
	RunPlugin = fun(Plugin, Step) ->
		case erlang:function_exported(Plugin, Step, 2) of
			false -> ok;
			true ->
				c:cd("$(call core_native_path,$(DEPS_DIR)/$1/)"),
				Ret = Plugin:Step({config, "", Conf, dict:new(), dict:new(), dict:new(),
					dict:store(base_dir, "", dict:new())}, undefined),
				io:format("rebar plugin ~p step ~p ret ~p~n", [Plugin, Step, Ret])
		end
	end,
	fun() ->
		case lists:keyfind(plugins, 1, Conf) of
			false -> ok;
			{_, Plugins0} ->
				Plugins = [P || P <- Plugins0, is_atom(P)],
				[begin
					case lists:keyfind(deps, 1, Conf) of
						false -> ok;
						{_, Deps} ->
							case lists:keyfind(P, 1, Deps) of
								false -> ok;
								_ ->
									Path = "$(call core_native_path,$(DEPS_DIR)/)" ++ atom_to_list(P),
									io:format("~s", [os:cmd("$(MAKE) -C $(call core_native_path,$(DEPS_DIR)/$1) " ++ Path)]),
									io:format("~s", [os:cmd("$(MAKE) -C " ++ Path ++ " IS_DEP=1")]),
									code:add_patha(Path ++ "/ebin")
							end
					end
				end || P <- Plugins],
				[case code:load_file(P) of
					{module, P} -> ok;
					_ ->
						case lists:keyfind(plugin_dir, 1, Conf) of
							false -> ok;
							{_, PluginsDir} ->
								ErlFile = "$(call core_native_path,$(DEPS_DIR)/$1/)" ++ PluginsDir ++ "/" ++ atom_to_list(P) ++ ".erl",
								{ok, P, Bin} = compile:file(ErlFile, [binary]),
								{module, P} = code:load_binary(P, ErlFile, Bin)
						end
				end || P <- Plugins],
				[RunPlugin(P, preprocess) || P <- Plugins],
				[RunPlugin(P, pre_compile) || P <- Plugins],
				[RunPlugin(P, compile) || P <- Plugins]
		end
	end(),
	halt()
endef
# makefile (from `erlang.mk', line 3696)
pkg_snappyer_fetch = git
# makefile (from `erlang.mk', line 7620)
SHELL_OPTS = 
# makefile (from `erlang.mk', line 2304)
pkg_jsone_fetch = git
# makefile (from `erlang.mk', line 839)
pkg_cloudi_service_timers_homepage = http://cloudi.org/
# makefile (from `erlang.mk', line 2513)
pkg_lethink_repo = https://github.com/taybin/lethink
# makefile (from `erlang.mk', line 1440)
pkg_erlcloud_fetch = git
# makefile (from `erlang.mk', line 1874)
pkg_fs_commit = master
# makefile (from `erlang.mk', line 533)
pkg_boss_db_name = boss_db
# makefile (from `erlang.mk', line 1599)
pkg_erlydtl_homepage = https://github.com/erlydtl/erlydtl
# makefile (from `erlang.mk', line 4053)
pkg_ux_name = ux
# makefile (from `erlang.mk', line 2249)
pkg_jesse_repo = https://github.com/for-GET/jesse
# makefile (from `erlang.mk', line 3801)
pkg_stripe_repo = https://github.com/mattsta/stripe-erlang
# makefile (from `erlang.mk', line 330)
pkg_active_commit = master
# makefile (from `erlang.mk', line 2104)
pkg_gut_fetch = git
# makefile (from `erlang.mk', line 8003)
COVER_REPORT_DIR = cover
# makefile (from `erlang.mk', line 5833)
define bs_relx_config
{release, {$p_release, "1"}, [$p, sasl, runtime_tools]}.
{dev_mode, false}.
{include_erts, true}.
{extended_start_script, true}.
{sys_config, "config/sys.config"}.
{vm_args, "config/vm.args"}.
endef
# makefile (from `erlang.mk', line 4239)
pkg_zabbix_sender_homepage = https://github.com/stalkermn/zabbix_sender
 
# makefile (from `erlang.mk', line 4006)
pkg_twerl_description = Erlang client for the Twitter Streaming API
# makefile (from `erlang.mk', line 2720)
pkg_mimetypes_fetch = git
# makefile (from `erlang.mk', line 2433)
pkg_kvc_repo = https://github.com/etrepum/kvc
# makefile (from `erlang.mk', line 2039)
pkg_gitty_homepage = https://github.com/maxlapshin/gitty
# makefile (from `erlang.mk', line 3549)
pkg_safetyvalve_name = safetyvalve
# makefile (from `erlang.mk', line 3221)
pkg_push_service_name = push_service
# makefile (from `erlang.mk', line 1984)
pkg_gen_tracker_fetch = git
# makefile (from `erlang.mk', line 4061)
pkg_vert_name = vert
# makefile (from `erlang.mk', line 3311)
pkg_rbeacon_homepage = https://github.com/refuge/rbeacon
# makefile (from `erlang.mk', line 2846)
pkg_neo4j_description = Erlang client library for Neo4J.
# makefile (from `erlang.mk', line 3585)
pkg_sext_repo = https://github.com/uwiger/sext
# makefile (from `erlang.mk', line 2519)
pkg_lfe_homepage = https://github.com/rvirding/lfe
# makefile (from `erlang.mk', line 1674)
pkg_etest_commit = master
# makefile (from `erlang.mk', line 7475)
RELX_CONFIG = $(CURDIR)/relx.config
# makefile (from `erlang.mk', line 455)
pkg_beanstalk_homepage = https://github.com/tim/erlang-beanstalk
# makefile (from `erlang.mk', line 2463)
pkg_lager_amqp_backend_homepage = https://github.com/jbrisbin/lager_amqp_backend
# makefile (from `erlang.mk', line 4255)
pkg_zippers_homepage = https://github.com/ferd/zippers
# makefile (from `erlang.mk', line 46)
verbose_0 = @
# makefile (from `erlang.mk', line 3482)
pkg_riak_sysmon_commit = master
# makefile (from `erlang.mk', line 634)
pkg_chronos_commit = master
# makefile (from `erlang.mk', line 698)
pkg_cloudi_service_db_cassandra_cql_commit = master
# makefile (from `erlang.mk', line 494)
pkg_bisect_description = Ordered fixed-size binary dictionary in Erlang
# makefile (from `erlang.mk', line 3045)
pkg_pegjs_name = pegjs
# makefile (from `erlang.mk', line 921)
pkg_cowdb_repo = https://github.com/refuge/cowdb
# makefile (from `erlang.mk', line 3761)
pkg_statebox_riak_repo = https://github.com/mochi/statebox_riak
# makefile (from `erlang.mk', line 1901)
pkg_geas_name = geas
# makefile (from `erlang.mk', line 1233)
pkg_elixir_repo = https://github.com/elixir-lang/elixir
# makefile (from `erlang.mk', line 3749)
pkg_statebox_name = statebox
# makefile (from `erlang.mk', line 449)
pkg_beam_repo = https://github.com/tonyrog/beam
# makefile (from `erlang.mk', line 1992)
pkg_gen_unix_fetch = git
# makefile (from `erlang.mk', line 4373)
query_repo_svn = $(call query_repo_default,$(1))
# makefile (from `erlang.mk', line 3704)
pkg_social_fetch = git
# makefile (from `erlang.mk', line 1850)
pkg_folsom_commit = master
# makefile (from `erlang.mk', line 3792)
pkg_stockdb_fetch = git
# makefile (from `erlang.mk', line 5915)
define tpl_module
-module($(n)).
-export([]).
endef
# makefile (from `erlang.mk', line 6317)
cpp_verbose = $(cpp_verbose_$(V))
# makefile (from `erlang.mk', line 919)
pkg_cowdb_homepage = https://github.com/refuge/cowdb
# makefile (from `erlang.mk', line 1663)
pkg_etap_homepage = https://github.com/ngerakines/etap
# makefile (from `erlang.mk', line 1352)
pkg_eredis_fetch = git
# makefile (from `erlang.mk', line 1799)
pkg_fast_disk_log_homepage = https://github.com/lpgauth/fast_disk_log
# makefile (from `erlang.mk', line 1207)
pkg_ekaf_homepage = https://github.com/helpshift/ekaf
# makefile (from `erlang.mk', line 2328)
pkg_jsonx_fetch = git
# makefile (from `erlang.mk', line 4959)
define dep_autopatch_appsrc_script.erl
	AppSrc = "$(call core_native_path,$(DEPS_DIR)/$1/src/$1.app.src)",
	AppSrcScript = AppSrc ++ ".script",
	Conf1 = case file:consult(AppSrc) of
		{ok, Conf0} -> Conf0;
		{error, enoent} -> []
	end,
	Bindings0 = erl_eval:new_bindings(),
	Bindings1 = erl_eval:add_binding('CONFIG', Conf1, Bindings0),
	Bindings = erl_eval:add_binding('SCRIPT', AppSrcScript, Bindings1),
	Conf = case file:script(AppSrcScript, Bindings) of
		{ok, [C]} -> C;
		{ok, C} -> C
	end,
	ok = file:write_file(AppSrc, io_lib:format("~p.~n", [Conf])),
	halt()
endef
# makefile (from `erlang.mk', line 1918)
pkg_gen_coap_description = Generic Erlang CoAP Client/Server
# makefile (from `erlang.mk', line 3042)
pkg_partisan_commit = master
# makefile (from `erlang.mk', line 2856)
pkg_neotoma_fetch = git
# makefile (from `erlang.mk', line 3063)
pkg_pgo_homepage = https://github.com/erleans/pgo.git
# makefile (from `erlang.mk', line 1894)
pkg_gcprof_description = Garbage Collection profiler for Erlang
# makefile (from `erlang.mk', line 3464)
pkg_riak_pg_fetch = git
# makefile (from `erlang.mk', line 1086)
pkg_ecapnp_description = Cap'n Proto library for Erlang
# makefile (from `erlang.mk', line 322)
pkg_aberth_commit = master
# environment
VSCODE_VERBOSE_LOGGING = true
# makefile (from `erlang.mk', line 2120)
pkg_hamcrest_fetch = git
# makefile (from `erlang.mk', line 1646)
pkg_espec_description = ESpec: Behaviour driven development framework for Erlang
# makefile (from `erlang.mk', line 3522)
pkg_riakpool_commit = master
# makefile (from `erlang.mk', line 3581)
pkg_sext_name = sext
# makefile (from `erlang.mk', line 7166)
hex_tar_verbose = $(hex_tar_verbose_$(V))
# makefile (from `erlang.mk', line 3206)
pkg_psycho_description = HTTP server that provides a WSGI-like interface for applications and middleware.
# makefile (from `erlang.mk', line 4070)
pkg_verx_description = Erlang implementation of the libvirtd remote protocol
# makefile (from `erlang.mk', line 1911)
pkg_geef_homepage = https://github.com/carlosmn/geef
# makefile (from `erlang.mk', line 4025)
pkg_ucol_nif_repo = https://github.com/refuge/ucol_nif
# makefile (from `erlang.mk', line 2727)
pkg_mixer_homepage = https://github.com/chef/mixer
# makefile (from `erlang.mk', line 3552)
pkg_safetyvalve_fetch = git
# makefile (from `erlang.mk', line 3280)
pkg_rack_fetch = git
# makefile (from `erlang.mk', line 3319)
pkg_rebar_homepage = http://www.rebar3.org
# makefile (from `erlang.mk', line 757)
pkg_cloudi_service_filesystem_name = cloudi_service_filesystem
# makefile (from `erlang.mk', line 3095)
pkg_plain_fsm_homepage = https://github.com/uwiger/plain_fsm
# makefile (from `erlang.mk', line 4005)
pkg_twerl_name = twerl
# makefile (from `erlang.mk', line 514)
pkg_bitstore_commit = master
# makefile (from `erlang.mk', line 3246)
pkg_quest_description = Learn Erlang through this set of challenges. An interactive system for getting to know Erlang.
# makefile (from `erlang.mk', line 1824)
pkg_fix_fetch = git
# makefile (from `erlang.mk', line 4094)
pkg_vmq_graphite_description = Component of VerneMQ: A distributed MQTT message broker
# makefile (from `erlang.mk', line 4029)
pkg_unicorn_name = unicorn
# makefile (from `erlang.mk', line 1410)
pkg_erlang_term_commit = master
# makefile (from `erlang.mk', line 1782)
pkg_ezmq_description = zMQ implemented in Erlang
# makefile (from `erlang.mk', line 1031)
pkg_dlhttpc_homepage = https://github.com/ferd/dlhttpc
# makefile (from `erlang.mk', line 4183)
pkg_wsock_homepage = https://github.com/madtrick/wsock
# makefile (from `erlang.mk', line 1120)
pkg_edis_fetch = git
# makefile (from `erlang.mk', line 4120)
pkg_vmq_snmp_fetch = git
# makefile (from `erlang.mk', line 2688)
pkg_memo_fetch = git
# makefile (from `erlang.mk', line 7033)
HEX_CONFIG = 
# default
MAKEFILEPATH = $(shell /usr/bin/xcode-select -print-path 2>/dev/null || echo /Developer)/Makefiles
# makefile (from `erlang.mk', line 5447)
define validate_app_file
	case file:consult("ebin/$(PROJECT).app") of
		{ok, _} -> halt();
		_ -> halt(1)
	end
endef
# makefile (from `erlang.mk', line 938)
 
pkg_cpg_commit = master
# makefile (from `erlang.mk', line 2478)
pkg_lambdapad_description = Static site generator using Erlang. Yes, Erlang.
# makefile (from `erlang.mk', line 2839)
pkg_nat_upnp_homepage = https://github.com/benoitc/nat_upnp
# makefile (from `erlang.mk', line 2103)
pkg_gut_homepage = https://github.com/unbalancedparentheses/gut
# makefile (from `erlang.mk', line 886)
pkg_confetti_description = Erlang configuration provider / application:get_env/2 on steroids
# makefile (from `erlang.mk', line 2136)
pkg_hottub_fetch = git
# makefile (from `erlang.mk', line 493)
pkg_bisect_name = bisect
# makefile (from `erlang.mk', line 1945)
pkg_gen_leader_repo = https://github.com/garret-smith/gen_leader_revival
# makefile (from `erlang.mk', line 2270)
pkg_jobs_description = a Job scheduler for load regulation
# makefile (from `erlang.mk', line 2561)
pkg_locks_repo = https://github.com/uwiger/locks
# makefile (from `erlang.mk', line 2862)
pkg_newrelic_description = Erlang library for sending metrics to New Relic
# makefile (from `erlang.mk', line 3688)
pkg_smother_fetch = git
# makefile (from `erlang.mk', line 2752)
pkg_mockgyver_fetch = git
# makefile (from `erlang.mk', line 3662)
pkg_simple_oauth2_description = Simple erlang OAuth2 client module for any http server framework (Google, Facebook, Yandex, Vkontakte are preconfigured)
# makefile (from `erlang.mk', line 1566)
pkg_erlsom_description = XML parser for Erlang
# makefile (from `erlang.mk', line 2738)
pkg_mochiweb_commit = main
# makefile (from `erlang.mk', line 2178)
pkg_idna_commit = master
# makefile (from `erlang.mk', line 7817)
XREF_EXTRA_APP_DIRS = 
# makefile (from `erlang.mk', line 3737)
pkg_sshrpc_repo = https://github.com/jj1bdx/sshrpc
# makefile (from `erlang.mk', line 2542)
pkg_lmq_description = Lightweight Message Queue
# makefile (from `erlang.mk', line 400)
pkg_asciideck_fetch = git
# makefile (from `erlang.mk', line 2646)
pkg_mc_erl_description = mc-erl is a server for Minecraft 1.4.7 written in Erlang.
# makefile (from `erlang.mk', line 2698)
pkg_merge_index_commit = master
# makefile (from `erlang.mk', line 4096)
pkg_vmq_graphite_fetch = git
# makefile (from `erlang.mk', line 3615)
pkg_shotgun_homepage = https://github.com/inaka/shotgun
# makefile (from `erlang.mk', line 1734)
pkg_exml_description = XML parsing library in Erlang
# makefile (from `erlang.mk', line 2757)
pkg_modlib_name = modlib
# makefile (from `erlang.mk', line 506)
pkg_bitcask_commit = develop
# makefile (from `erlang.mk', line 2989)
pkg_openid_name = openid
 
# makefile (from `erlang.mk', line 1917)
pkg_gen_coap_name = gen_coap
# makefile (from `erlang.mk', line 1289)
pkg_epcap_repo = https://github.com/msantos/epcap
# makefile (from `erlang.mk', line 1437)
pkg_erlcloud_name = erlcloud
# makefile (from `erlang.mk', line 4063)
pkg_vert_homepage = https://github.com/msantos/erlang-libvirt
# makefile (from `erlang.mk', line 1893)
pkg_gcprof_name = gcprof
# makefile (from `erlang.mk', line 3877)
pkg_syslog_name = syslog
# makefile (from `erlang.mk', line 1551)
pkg_erlsh_homepage = https://github.com/proger/erlsh
# makefile (from `erlang.mk', line 1286)
pkg_epcap_description = Erlang packet capture interface using pcap
# makefile (from `erlang.mk', line 2598)
pkg_luwak_description = Large-object storage interface for Riak
# makefile (from `erlang.mk', line 2887)
pkg_nkbase_homepage = https://github.com/Nekso/nkbase
# makefile (from `erlang.mk', line 1360)
pkg_eredis_pool_fetch = git
# makefile (from `erlang.mk', line 1645)
 
pkg_espec_name = espec
# makefile (from `erlang.mk', line 5542)
TEST_DIR = $(CURDIR)/test
# makefile (from `erlang.mk', line 3785)
pkg_stdinout_pool_repo = https://github.com/mattsta/erlang-stdinout-pool
# makefile (from `erlang.mk', line 2070)
pkg_grapherl_description = Create graphs of Erlang systems and programs
# makefile (from `erlang.mk', line 1719)
pkg_evum_homepage = https://github.com/msantos/evum
# makefile (from `erlang.mk', line 2592)
pkg_luerl_fetch = git
# makefile (from `erlang.mk', line 3197)
pkg_protobuffs_name = protobuffs
# makefile (from `erlang.mk', line 3198)
pkg_protobuffs_description = An implementation of Google's Protocol Buffers for Erlang, based on ngerakines/erlang_protobuffs.
# makefile (from `erlang.mk', line 5819)
define bs_app
-module($p_app).
-behaviour(application).

-export([start/2]).
-export([stop/1]).

start(_Type, _Args) ->
	$p_sup:start_link().

stop(_State) ->
	ok.
endef
# makefile (from `erlang.mk', line 1985)
pkg_gen_tracker_repo = https://github.com/erlyvideo/gen_tracker
# makefile (from `erlang.mk', line 759)
pkg_cloudi_service_filesystem_homepage = http://cloudi.org/
# makefile (from `erlang.mk', line 2990)
pkg_openid_description = Erlang OpenID
# makefile (from `erlang.mk', line 2534)
pkg_live_description = Automated module and configuration reloader.
# makefile (from `erlang.mk', line 366)
pkg_amqp_client_description = RabbitMQ Erlang AMQP client
# makefile (from `erlang.mk', line 1577)
pkg_erlubi_repo = https://github.com/krestenkrab/erlubi
# makefile (from `erlang.mk', line 4033)
pkg_unicorn_repo = https://github.com/shizzard/unicorn
# makefile (from `erlang.mk', line 424)
pkg_barrel_tcp_fetch = git
# makefile (from `erlang.mk', line 386)
pkg_antidote_commit = master
# makefile (from `erlang.mk', line 1781)
pkg_ezmq_name = ezmq
# makefile (from `erlang.mk', line 742)
pkg_cloudi_service_db_riak_description = Riak CloudI Service
# makefile (from `erlang.mk', line 197)
core_render = 	printf -- '$(subst $(newline),\n,$(subst %,%%,$(subst ','\'',$(subst $(tab),$(WS),$(call $(1))))))\n' > $(2)
# makefile (from `erlang.mk', line 6838)
DTL_PREFIX = 
# makefile (from `erlang.mk', line 1490)
pkg_erlfsmon_commit = master
# makefile (from `erlang.mk', line 3454)
pkg_riak_kv_description = Riak Key/Value Store
# makefile (from `erlang.mk', line 353)
pkg_aleppo_repo = https://github.com/ErlyORM/aleppo
# makefile (from `erlang.mk', line 807)
pkg_cloudi_service_queue_homepage = http://cloudi.org/
# makefile (from `erlang.mk', line 3488)
pkg_riak_test_fetch = git
# makefile (from `erlang.mk', line 2477)
pkg_lambdapad_name = lambdapad
# makefile (from `erlang.mk', line 2920)
 
pkg_nodefinder_fetch = git
# makefile (from `erlang.mk', line 3021)
pkg_parse_trans_name = parse_trans
# makefile (from `erlang.mk', line 1338)
pkg_epubnub_commit = master
# makefile (from `erlang.mk', line 2143)
pkg_hpack_homepage = https://github.com/joedevivo/hpack
# makefile (from `erlang.mk', line 761)
pkg_cloudi_service_filesystem_repo = https://github.com/CloudI/cloudi_service_filesystem
# makefile (from `erlang.mk', line 2269)
pkg_jobs_name = jobs
# makefile (from `erlang.mk', line 3118)
pkg_pobox_description = External buffer processes to protect against mailbox overflow in Erlang
# makefile (from `erlang.mk', line 682)
pkg_cloudi_service_db_commit = master
# makefile (from `erlang.mk', line 1952)
pkg_gen_nb_server_fetch = git
# makefile (from `erlang.mk', line 719)
pkg_cloudi_service_db_memcached_homepage = http://cloudi.org/
# makefile (from `erlang.mk', line 648)
pkg_cl_fetch = git
# makefile (from `erlang.mk', line 3289)
pkg_radierl_repo = https://github.com/vances/radierl
# makefile (from `erlang.mk', line 1565)
pkg_erlsom_name = erlsom
# makefile (from `erlang.mk', line 2471)
pkg_lager_syslog_homepage = https://github.com/erlang-lager/lager_syslog
# makefile (from `erlang.mk', line 4158)
pkg_websocket_client_description = Erlang websocket client (ws and wss supported)
# makefile (from `erlang.mk', line 2320)
pkg_jsonpath_fetch = git
# makefile (from `erlang.mk', line 4231)
pkg_zab_engine_homepage = https://github.com/xinmingyao/zab_engine
# makefile (from `erlang.mk', line 720)
pkg_cloudi_service_db_memcached_fetch = git
# makefile (from `erlang.mk', line 1240)
pkg_elli_fetch = git
# makefile (from `erlang.mk', line 885)
pkg_confetti_name = confetti
# makefile (from `erlang.mk', line 1509)
pkg_erlmc_name = erlmc
# makefile (from `erlang.mk', line 1631)
pkg_escalus_homepage = https://github.com/esl/escalus
# makefile (from `erlang.mk', line 1733)
pkg_exml_name = exml
# makefile (from `erlang.mk', line 3304)
 
pkg_ranch_fetch = git
# makefile (from `erlang.mk', line 2639)
pkg_mavg_homepage = https://github.com/EchoTeam/mavg
# makefile (from `erlang.mk', line 632)
pkg_chronos_fetch = git
# makefile (from `erlang.mk', line 4390)
query_version_ln = -
# makefile (from `erlang.mk', line 737)
pkg_cloudi_service_db_pgsql_repo = https://github.com/CloudI/cloudi_service_db_pgsql
# makefile (from `erlang.mk', line 1578)
pkg_erlubi_commit = master
# makefile (from `erlang.mk', line 3326)
pkg_rebus_description = A stupid simple, internal, pub/sub event bus written in- and for Erlang.
# makefile (from `erlang.mk', line 2141)
pkg_hpack_name = hpack
# makefile (from `erlang.mk', line 1285)
pkg_epcap_name = epcap
# makefile (from `erlang.mk', line 642)
pkg_chumak_commit = master
# makefile (from `erlang.mk', line 2597)
pkg_luwak_name = luwak
# makefile (from `erlang.mk', line 6061)
define tpl_cowboy_rest
-module($(n)).

-export([init/3]).
-export([content_types_provided/2]).
-export([get_html/2]).

init(_, _Req, _Opts) ->
	{upgrade, protocol, cowboy_rest}.

content_types_provided(Req, State) ->
	{[{{<<"text">>, <<"html">>, '*'}, get_html}], Req, State}.

get_html(Req, State) ->
	{<<"<html><body>This is REST!</body></html>">>, Req, State}.
endef
# makefile (from `erlang.mk', line 1047)
pkg_dnssd_homepage = https://github.com/benoitc/dnssd_erlang
# makefile (from `erlang.mk', line 204)
ERLANG_MK_COMMIT = 
# makefile (from `erlang.mk', line 753)
pkg_cloudi_service_db_tokyotyrant_repo = https://github.com/CloudI/cloudi_service_db_tokyotyrant
# makefile (from `erlang.mk', line 1298)
pkg_eper_commit = master
# makefile (from `erlang.mk', line 2069)
pkg_grapherl_name = grapherl
# makefile (from `erlang.mk', line 631)
pkg_chronos_homepage = https://github.com/lehoff/chronos
# makefile (from `erlang.mk', line 2784)
pkg_moyo_fetch = git
# makefile (from `erlang.mk', line 3640)
pkg_sighandler_fetch = git
# makefile (from `erlang.mk', line 1416)
pkg_erlastic_search_fetch = git
# makefile (from `erlang.mk', line 3970)
pkg_trane_commit = master
# makefile (from `erlang.mk', line 1274)
pkg_enm_commit = master
# makefile (from `erlang.mk', line 3113)
pkg_pmod_transform_repo = https://github.com/erlang/pmod_transform
# makefile (from `erlang.mk', line 1640)
pkg_esh_mk_fetch = git
# makefile (from `erlang.mk', line 2289)
pkg_json_repo = https://github.com/talentdeficit/json
# makefile (from `erlang.mk', line 2533)
pkg_live_name = live
# makefile (from `erlang.mk', line 365)
pkg_amqp_client_name = amqp_client
# makefile (from `erlang.mk', line 2943)
pkg_oauth2_homepage = https://github.com/kivra/oauth2
# makefile (from `erlang.mk', line 4103)
pkg_vmq_passwd_homepage = https://verne.mq/
# makefile (from `erlang.mk', line 3309)
pkg_rbeacon_name = rbeacon
# makefile (from `erlang.mk', line 1198)
pkg_ejwt_description = erlang library for JSON Web Token
# makefile (from `erlang.mk', line 1184)
pkg_ej_fetch = git
# makefile (from `erlang.mk', line 3511)
pkg_riaknostic_homepage = https://github.com/basho/riaknostic
# makefile (from `erlang.mk', line 3305)
pkg_ranch_repo = https://github.com/ninenines/ranch
# makefile (from `erlang.mk', line 3879)
pkg_syslog_homepage = https://github.com/Vagabond/erlang-syslog
# makefile (from `erlang.mk', line 741)
pkg_cloudi_service_db_riak_name = cloudi_service_db_riak
# makefile (from `erlang.mk', line 842)
pkg_cloudi_service_timers_commit = master
# makefile (from `erlang.mk', line 1936)
pkg_gen_icmp_fetch = git
# makefile (from `erlang.mk', line 1550)
pkg_erlsh_description = Erlang shell tools
# makefile (from `erlang.mk', line 3453)
pkg_riak_kv_name = riak_kv
# makefile (from `erlang.mk', line 3632)
pkg_sieve_fetch = git
# makefile (from `erlang.mk', line 589)
pkg_cberl_name = cberl
# makefile (from `erlang.mk', line 1450)
pkg_erlcron_commit = master
# makefile (from `erlang.mk', line 3293)
pkg_rafter_name = rafter
# makefile (from `erlang.mk', line 3328)
pkg_rebus_fetch = git
# makefile (from `erlang.mk', line 2298)
pkg_json_rec_commit = master
# makefile (from `erlang.mk', line 482)
pkg_bifrost_commit = master
# makefile (from `erlang.mk', line 3617)
pkg_shotgun_repo = https://github.com/inaka/shotgun
# makefile (from `erlang.mk', line 1424)
pkg_erlasticsearch_fetch = git
# makefile (from `erlang.mk', line 3598)
pkg_sgte_description = A simple Erlang Template Engine
# makefile (from `erlang.mk', line 3117)
pkg_pobox_name = pobox
# makefile (from `erlang.mk', line 2487)
pkg_lasp_homepage = http://lasp-lang.org/
# makefile (from `erlang.mk', line 2047)
pkg_gold_fever_homepage = https://github.com/inaka/gold_fever
# makefile (from `erlang.mk', line 3096)
pkg_plain_fsm_fetch = git
# environment
SSH_AUTH_SOCK = /private/tmp/com.apple.launchd.9SjzKtx4Ld/Listeners
# makefile (from `erlang.mk', line 2982)
pkg_openflow_description = An OpenFlow controller written in pure erlang
# makefile (from `erlang.mk', line 3145)
pkg_pooler_repo = https://github.com/seth/pooler
# makefile (from `erlang.mk', line 799)
pkg_cloudi_service_oauth1_homepage = http://cloudi.org/
# makefile (from `erlang.mk', line 1447)
pkg_erlcron_homepage = https://github.com/erlware/erlcron
# makefile (from `erlang.mk', line 6040)
define tpl_cowboy_loop
-module($(n)).
-behaviour(cowboy_loop_handler).

-export([init/3]).
-export([info/3]).
-export([terminate/3]).

-record(state, {
}).

init(_, Req, _Opts) ->
	{loop, Req, #state{}, 5000, hibernate}.

info(_Info, Req, State) ->
	{loop, Req, State, hibernate}.

terminate(_Reason, _Req, _State) ->
	ok.
endef
# makefile (from `erlang.mk', line 5173)
makedep_verbose = $(makedep_verbose_$(V))
# makefile (from `erlang.mk', line 4250)
pkg_zeta_commit = master
# makefile (from `erlang.mk', line 1465)
pkg_erldis_repo = https://github.com/cstar/erldis
# makefile (from `erlang.mk', line 2590)
pkg_luerl_description = Lua in Erlang
# makefile (from `erlang.mk', line 853)
pkg_cloudi_service_validate_name = cloudi_service_validate
# makefile (from `erlang.mk', line 2769)
pkg_mongodb_repo = https://github.com/comtihon/mongodb-erlang
# makefile (from `erlang.mk', line 7292)
HEX_DOCS_DOC_DIR = doc/
# makefile (from `erlang.mk', line 1774)
pkg_exsplus128_description = Xorshift128plus pseudo random number generator for Erlang.
# makefile (from `erlang.mk', line 1216)
pkg_elarm_fetch = git
# makefile (from `erlang.mk', line 5139)
ERLANG_MK_QUERY_SHELL_DEPS_FILE = $(ERLANG_MK_TMP)/query-shell-deps.log
# makefile (from `erlang.mk', line 1401)
pkg_erlang_smtp_repo = https://github.com/tonyg/erlang-smtp
# makefile (from `erlang.mk', line 1481)
pkg_erldocker_repo = https://github.com/proger/erldocker
# makefile (from `erlang.mk', line 2629)
pkg_marina_name = marina
# makefile (from `erlang.mk', line 7664)
SPHINX_OPTS = 
# makefile (from `erlang.mk', line 4385)
query_version_git-subfolder = $(call query_version_git,$(1))
# makefile (from `erlang.mk', line 1519)
pkg_erlmongo_homepage = https://github.com/SergejJurecko/erlmongo
# makefile (from `erlang.mk', line 558)
pkg_bullet_description = Simple, reliable, efficient streaming for Cowboy.
# makefile (from `erlang.mk', line 3013)
pkg_pal_name = pal
# makefile (from `erlang.mk', line 2405)
pkg_kjell_name = kjell
# makefile (from `erlang.mk', line 47)
verbose_2 = set -x;
# makefile (from `erlang.mk', line 622)
pkg_check_node_description = Nagios Scripts for monitoring Riak
# makefile (from `erlang.mk', line 438)
pkg_bcrypt_description = Bcrypt Erlang / C library
# makefile (from `erlang.mk', line 2274)
pkg_jobs_commit = master
# makefile (from `erlang.mk', line 3840)
pkg_swarm_fetch = git
# makefile (from `erlang.mk', line 3157)
pkg_procket_name = procket
# makefile (from `erlang.mk', line 2529)
pkg_ling_repo = https://github.com/cloudozer/ling
# makefile (from `erlang.mk', line 2024)
pkg_giallo_fetch = git
# makefile (from `erlang.mk', line 998)
pkg_detest_description = Tool for running tests on a cluster of erlang nodes
# makefile (from `erlang.mk', line 3533)
pkg_rlimit_name = rlimit
# makefile (from `erlang.mk', line 3009)
pkg_otpbp_repo = https://github.com/Ledest/otpbp
# makefile (from `erlang.mk', line 951)
pkg_cr_homepage = https://synrc.com/apps/cr/doc/cr.htm
# makefile (from `erlang.mk', line 2154)
 
pkg_hyper_commit = master
# makefile (from `erlang.mk', line 1161)
pkg_efene_repo = https://github.com/efene/efene
# makefile (from `erlang.mk', line 5171)
makedep_verbose_0 = @echo " DEPEND" $(PROJECT).d;
# makefile (from `erlang.mk', line 614)
pkg_chaos_monkey_description = This is The CHAOS MONKEY.  It will kill your processes.
# makefile (from `erlang.mk', line 1618)
pkg_erserve_commit = master
# makefile (from `erlang.mk', line 2183)
pkg_ierlang_homepage = https://github.com/robbielynch/ierlang
# makefile (from `erlang.mk', line 4359)
query_fetch_method = $(if $(dep_$(1)),$(call _qfm_dep,$(word 1,$(dep_$(1)))),$(call _qfm_pkg,$(1)))
# makefile (from `erlang.mk', line 2248)
pkg_jesse_fetch = git
# makefile (from `erlang.mk', line 391)
pkg_apns_homepage = http://inaka.github.com/apns4erl
# makefile (from `erlang.mk', line 2054)
pkg_gpb_description = A Google Protobuf implementation for Erlang
# makefile (from `erlang.mk', line 343)
pkg_actordb_thrift_homepage = http://www.actordb.com/
# makefile (from `erlang.mk', line 2985)
pkg_openflow_repo = https://github.com/renatoaguiar/erlang-openflow
# makefile (from `erlang.mk', line 4977)
define dep_autopatch_appsrc.erl
	AppSrcOut = "$(call core_native_path,$(DEPS_DIR)/$1/src/$1.app.src)",
	AppSrcIn = case filelib:is_regular(AppSrcOut) of false -> "$(call core_native_path,$(DEPS_DIR)/$1/ebin/$1.app)"; true -> AppSrcOut end,
	case filelib:is_regular(AppSrcIn) of
		false -> ok;
		true ->
			{ok, [{application, $(1), L0}]} = file:consult(AppSrcIn),
			L1 = lists:keystore(modules, 1, L0, {modules, []}),
			L2 = case lists:keyfind(vsn, 1, L1) of
				{_, git} -> lists:keyreplace(vsn, 1, L1, {vsn, lists:droplast(os:cmd("git -C $(DEPS_DIR)/$1 describe --dirty --tags --always"))});
				{_, {cmd, _}} -> lists:keyreplace(vsn, 1, L1, {vsn, "cmd"});
				_ -> L1
			end,
			L3 = case lists:keyfind(registered, 1, L2) of false -> [{registered, []}|L2]; _ -> L2 end,
			ok = file:write_file(AppSrcOut, io_lib:format("~p.~n", [{application, $(1), L3}])),
			case AppSrcOut of AppSrcIn -> ok; _ -> ok = file:delete(AppSrcIn) end
	end,
	halt()
endef
# makefile (from `erlang.mk', line 3382)
pkg_reltool_util_description = Erlang reltool utility functionality application
# makefile (from `erlang.mk', line 3101)
pkg_plumtree_name = plumtree
# makefile (from `erlang.mk', line 1815)
pkg_find_crate_homepage = https://github.com/goertzenator/find_crate
# makefile (from `erlang.mk', line 2522)
pkg_lfe_commit = master
# makefile (from `erlang.mk', line 1833)
pkg_flower_repo = https://github.com/travelping/flower
# makefile (from `erlang.mk', line 1383)
pkg_erlang_js_homepage = https://github.com/basho/erlang_js
# makefile (from `erlang.mk', line 3610)
pkg_sheriff_commit = master
# makefile (from `erlang.mk', line 3525)
pkg_rivus_cep_name = rivus_cep
# makefile (from `erlang.mk', line 2369)
pkg_katja_repo = https://github.com/nifoc/katja
# makefile (from `erlang.mk', line 2352)
pkg_kafka_protocol_fetch = git
# makefile (from `erlang.mk', line 786)
pkg_cloudi_service_http_elli_commit = master
# makefile (from `erlang.mk', line 2775)
pkg_mongooseim_homepage = https://www.erlang-solutions.com/products/mongooseim-massively-scalable-ejabberd-platform
# makefile (from `erlang.mk', line 3401)
pkg_resource_discovery_repo = https://github.com/erlware/resource_discovery
# makefile (from `erlang.mk', line 2257)
pkg_jiffy_repo = https://github.com/davisp/jiffy
# makefile (from `erlang.mk', line 2511)
pkg_lethink_homepage = https://github.com/taybin/lethink
# makefile (from `erlang.mk', line 3146)
pkg_pooler_commit = master
# makefile (from `erlang.mk', line 3266)
pkg_rabbit_commit = master
# makefile (from `erlang.mk', line 6910)
ESCRIPT_ZIP_FILE = $(ERLANG_MK_TMP)/escript.zip
# makefile (from `erlang.mk', line 3622)
pkg_sidejob_description = Parallel worker and capacity limiting library for Erlang
# makefile (from `erlang.mk', line 3158)
pkg_procket_description = Erlang interface to low level socket operations
# makefile (from `erlang.mk', line 2117)
pkg_hamcrest_name = hamcrest
# makefile (from `erlang.mk', line 4217)
pkg_yamler_repo = https://github.com/goertzenator/yamler
# makefile (from `erlang.mk', line 2457)
pkg_lager_repo = https://github.com/erlang-lager/lager
# makefile (from `erlang.mk', line 448)
pkg_beam_fetch = git
# makefile (from `erlang.mk', line 4279)
pkg_zucchini_homepage = https://github.com/devinus/zucchini
# makefile (from `erlang.mk', line 2001)
pkg_geode_repo = https://github.com/bradfordw/geode
# makefile (from `erlang.mk', line 1966)
pkg_gen_rpc_description = A scalable RPC library for Erlang-VM based languages
# makefile (from `erlang.mk', line 2161)
pkg_i18n_repo = https://github.com/erlang-unicode/i18n
# makefile (from `erlang.mk', line 2810)
pkg_mustache_commit = master
# makefile (from `erlang.mk', line 1294)
pkg_eper_description = Erlang performance and debugging tools.
# makefile (from `erlang.mk', line 2866)
pkg_newrelic_commit = master
# makefile (from `erlang.mk', line 3917)
pkg_tinymq_name = tinymq
# makefile (from `erlang.mk', line 3358)
pkg_redgrid_description = automatic Erlang node discovery via redis
# makefile (from `erlang.mk', line 4366)
_qr = $(if $(query_repo_$(2)),$(call query_repo_$(2),$(1)),$(call dep_repo,$(1)))
# makefile (from `erlang.mk', line 1759)
pkg_exs64_homepage = https://github.com/jj1bdx/exs64
# makefile (from `erlang.mk', line 2431)
pkg_kvc_homepage = https://github.com/etrepum/kvc
# makefile (from `erlang.mk', line 557)
pkg_bullet_name = bullet
# makefile (from `erlang.mk', line 986)
pkg_decimal_commit = master
# makefile (from `erlang.mk', line 6845)
dtl_verbose = $(dtl_verbose_$(V))
# makefile (from `erlang.mk', line 434)
pkg_basho_bench_commit = master
# makefile (from `erlang.mk', line 621)
pkg_check_node_name = check_node
# makefile (from `erlang.mk', line 437)
pkg_bcrypt_name = bcrypt
# makefile (from `erlang.mk', line 2497)
pkg_lasse_repo = https://github.com/inaka/lasse
# makefile (from `erlang.mk', line 3128)
pkg_ponos_fetch = git
# makefile (from `erlang.mk', line 4331)
REBAR_DEPS_DIR = $(DEPS_DIR)
# makefile (from `erlang.mk', line 1480)
pkg_erldocker_fetch = git
# makefile (from `erlang.mk', line 997)
pkg_detest_name = detest
# makefile (from `erlang.mk', line 3705)
pkg_social_repo = https://github.com/dvv/social
# makefile (from `erlang.mk', line 2312)
pkg_jsonerl_fetch = git
# makefile (from `erlang.mk', line 3807)
pkg_subproc_homepage = http://dozzie.jarowit.net/trac/wiki/subproc
# makefile (from `erlang.mk', line 3152)
pkg_pqueue_fetch = git
# makefile (from `erlang.mk', line 2342)
pkg_kafka_description = Kafka consumer and producer in Erlang
# makefile (from `erlang.mk', line 2417)
pkg_kraken_repo = https://github.com/Asana/kraken
# makefile (from `erlang.mk', line 613)
pkg_chaos_monkey_name = chaos_monkey
# makefile (from `erlang.mk', line 3376)
pkg_reload_mk_fetch = git
# makefile (from `erlang.mk', line 1573)
pkg_erlubi_name = erlubi
# makefile (from `erlang.mk', line 2824)
pkg_mysql_fetch = git
# makefile (from `erlang.mk', line 3493)
pkg_riakc_name = riakc
# makefile (from `erlang.mk', line 2053)
pkg_gpb_name = gpb
# makefile (from `erlang.mk', line 3265)
pkg_rabbit_repo = https://github.com/rabbitmq/rabbitmq-server.git
# makefile (from `erlang.mk', line 1334)
pkg_epubnub_description = Erlang PubNub API
# makefile (from `erlang.mk', line 1743)
pkg_exometer_homepage = https://github.com/Feuerlabs/exometer
# makefile (from `erlang.mk', line 822)
pkg_cloudi_service_router_description = CloudI Router Service
# makefile (from `erlang.mk', line 2577)
pkg_lol_repo = https://github.com/b0oh/lol
# makefile (from `erlang.mk', line 3520)
pkg_riakpool_fetch = git
# makefile (from `erlang.mk', line 79)
PLATFORM = darwin
# makefile (from `erlang.mk', line 4613)
dep_autopatch_fetch_rebar2 = 	if [ ! -d $(ERLANG_MK_TMP)/rebar ]; then git clone -q -n -- $(REBAR_GIT) $(ERLANG_MK_TMP)/rebar; cd $(ERLANG_MK_TMP)/rebar; git checkout -q $(REBAR_COMMIT); ./bootstrap; cd -; fi
# makefile (from `erlang.mk', line 6844)
dtl_verbose_0 = @echo " DTL   " $(filter %.dtl,$(?F));
# makefile (from `erlang.mk', line 3882)
 
pkg_syslog_commit = master
# makefile (from `erlang.mk', line 3527)
pkg_rivus_cep_homepage = https://github.com/vascokk/rivus_cep
# makefile (from `erlang.mk', line 2829)
pkg_n2o_name = n2o
# makefile (from `erlang.mk', line 2423)
pkg_kucumberl_homepage = https://github.com/openshine/kucumberl
# makefile (from `erlang.mk', line 4097)
pkg_vmq_graphite_repo = https://github.com/erlio/vmq_graphite
# makefile (from `erlang.mk', line 1431)
pkg_erlbrake_homepage = https://github.com/kenpratt/erlbrake
# makefile (from `erlang.mk', line 4210)
pkg_yamerl_commit = master
# makefile (from `erlang.mk', line 1527)
pkg_erlog_homepage = https://github.com/rvirding/erlog
# makefile (from `erlang.mk', line 3137)
pkg_poolboy_repo = https://github.com/devinus/poolboy
# makefile (from `erlang.mk', line 5137)
ERLANG_MK_QUERY_REL_DEPS_FILE = $(ERLANG_MK_TMP)/query-rel-deps.log
# makefile (from `erlang.mk', line 4409)
query_absolute_path = $(addprefix $(DEPS_DIR)/,$(call query_name,$(1)))
# makefile (from `erlang.mk', line 1890)
pkg_gcm_commit = master
# automatic
^D = $(patsubst %/,%,$(dir $^))
# makefile (from `erlang.mk', line 3621)
pkg_sidejob_name = sidejob
# makefile (from `erlang.mk', line 1944)
pkg_gen_leader_fetch = git
# makefile (from `erlang.mk', line 848)
pkg_cloudi_service_udp_fetch = git
# makefile (from `erlang.mk', line 3631)
pkg_sieve_homepage = https://github.com/benoitc/sieve
# makefile (from `erlang.mk', line 1958)
pkg_gen_paxos_description = An Erlang/OTP-style implementation of the PAXOS distributed consensus protocol
# makefile (from `erlang.mk', line 3225)
pkg_push_service_repo = https://github.com/hairyhum/push_service
# makefile (from `erlang.mk', line 2847)
pkg_neo4j_homepage = https://github.com/dmitriid/neo4j-erlang
# makefile (from `erlang.mk', line 4262)
pkg_zlists_description = Erlang lazy lists library.
# makefile (from `erlang.mk', line 1190)
pkg_ejabberd_description = Robust, ubiquitous and massively scalable Jabber / XMPP Instant Messaging platform
# makefile (from `erlang.mk', line 1965)
pkg_gen_rpc_name = gen_rpc
# makefile (from `erlang.mk', line 1175)
pkg_ehsa_homepage = https://bitbucket.org/a12n/ehsa
# makefile (from `erlang.mk', line 1222)
pkg_eleveldb_description = Erlang LevelDB API
# makefile (from `erlang.mk', line 1466)
pkg_erldis_commit = master
# makefile (from `erlang.mk', line 4221)
pkg_yaws_name = yaws
# makefile (from `erlang.mk', line 3182)
pkg_proper_description = PropEr: a QuickCheck-inspired property-based testing tool for Erlang.
# makefile (from `erlang.mk', line 2224)
pkg_iso8601_fetch = git
# makefile (from `erlang.mk', line 6112)
define tpl_ranch_protocol
-module($(n)).
-behaviour(ranch_protocol).

-export([start_link/4]).
-export([init/4]).

-type opts() :: [].
-export_type([opts/0]).

-record(state, {
	socket :: inet:socket(),
	transport :: module()
}).

start_link(Ref, Socket, Transport, Opts) ->
	Pid = spawn_link(?MODULE, init, [Ref, Socket, Transport, Opts]),
	{ok, Pid}.

-spec init(ranch:ref(), inet:socket(), module(), opts()) -> ok.
init(Ref, Socket, Transport, _Opts) ->
	ok = ranch:accept_ack(Ref),
	loop(#state{socket=Socket, transport=Transport}).

loop(State) ->
	loop(State).
endef
# makefile (from `erlang.mk', line 2079)
pkg_grpc_homepage = https://github.com/Bluehouse-Technology/grpc
# makefile (from `erlang.mk', line 3938)
pkg_tirerl_commit = master
# makefile (from `erlang.mk', line 4170)
pkg_worker_pool_commit = master
# makefile (from `erlang.mk', line 4066)
pkg_vert_commit = master
# makefile (from `erlang.mk', line 1359)
pkg_eredis_pool_homepage = https://github.com/hiroeorz/eredis_pool
# makefile (from `erlang.mk', line 653)
pkg_clique_name = clique
# makefile (from `erlang.mk', line 3049)
pkg_pegjs_repo = https://github.com/dmitriid/pegjs
# makefile (from `erlang.mk', line 2469)
pkg_lager_syslog_name = lager_syslog
# makefile (from `erlang.mk', line 3495)
pkg_riakc_homepage = https://github.com/basho/riak-erlang-client
# makefile (from `erlang.mk', line 1905)
pkg_geas_repo = https://github.com/crownedgrouse/geas
# makefile (from `erlang.mk', line 1686)
pkg_etoml_description = TOML language erlang parser
# makefile (from `erlang.mk', line 783)
pkg_cloudi_service_http_elli_homepage = http://cloudi.org/
# makefile (from `erlang.mk', line 1769)
pkg_exsplus116_repo = https://github.com/jj1bdx/exsplus116
# makefile (from `erlang.mk', line 3925)
pkg_tinymt_name = tinymt
# makefile (from `erlang.mk', line 2294)
pkg_json_rec_description = JSON to erlang record
# makefile (from `erlang.mk', line 3582)
pkg_sext_description = Sortable Erlang Term Serialization
# makefile (from `erlang.mk', line 2063)
pkg_gproc_homepage = https://github.com/uwiger/gproc
# makefile (from `erlang.mk', line 6644)
CT_SUITES = 
# environment
SHLVL = 1
# makefile (from `erlang.mk', line 2341)
pkg_kafka_name = kafka
# makefile (from `erlang.mk', line 2230)
pkg_jamdb_sybase_description = Erlang driver for SAP Sybase ASE
# makefile (from `erlang.mk', line 3057)
pkg_percept2_repo = https://github.com/huiqing/percept2
# makefile (from `erlang.mk', line 1910)
pkg_geef_description = Git NEEEEF (Erlang NIF)
# makefile (from `erlang.mk', line 2202)
pkg_irc_lib_commit = master
# makefile (from `erlang.mk', line 6953)
EUNIT_OPTS = 
# makefile (from `erlang.mk', line 2528)
pkg_ling_fetch = git
# makefile (from `erlang.mk', line 831)
pkg_cloudi_service_tcp_homepage = http://cloudi.org/
# makefile (from `erlang.mk', line 3082)
pkg_pkgx_commit = master
# makefile (from `erlang.mk', line 821)
pkg_cloudi_service_router_name = cloudi_service_router
# makefile (from `erlang.mk', line 4399)
query_extra_git-subfolder = $(if $(dep_$(1)),subfolder=$(word 4,$(dep_$(1))),-)
# makefile (from `erlang.mk', line 702)
pkg_cloudi_service_db_couchdb_description = CouchDB CloudI Service
# makefile (from `erlang.mk', line 3261)
pkg_rabbit_name = rabbit
# makefile (from `erlang.mk', line 1007)
pkg_dh_date_homepage = https://github.com/daleharvey/dh_date
# makefile (from `erlang.mk', line 2334)
pkg_jsx_description = An Erlang application for consuming, producing and manipulating JSON.
# makefile (from `erlang.mk', line 5152)
ERLC_EXCLUDE = 
# makefile (from `erlang.mk', line 2152)
pkg_hyper_fetch = git
# makefile (from `erlang.mk', line 1754)
pkg_exs1024_commit = master
# makefile (from `erlang.mk', line 3870)
pkg_syntaxerl_description = Syntax checker for Erlang
# makefile (from `erlang.mk', line 4134)
pkg_vmstats_description = tiny Erlang app that works in conjunction with statsderl in order to generate information on the Erlang VM for graphite logs.
# makefile (from `erlang.mk', line 2146)
pkg_hpack_commit = master
# makefile (from `erlang.mk', line 3351)
pkg_record_info_homepage = https://github.com/bipthelin/erlang-record_info
# makefile (from `erlang.mk', line 352)
pkg_aleppo_fetch = git
# makefile (from `erlang.mk', line 4138)
pkg_vmstats_commit = master
# makefile (from `erlang.mk', line 5178)
erlc_verbose = $(erlc_verbose_$(V))
# makefile (from `erlang.mk', line 1210)
pkg_ekaf_commit = master
# makefile (from `erlang.mk', line 1446)
pkg_erlcron_description = Erlang cronish system
# makefile (from `erlang.mk', line 760)
pkg_cloudi_service_filesystem_fetch = git
# makefile (from `erlang.mk', line 1058)
pkg_dynamic_compile_commit = master
# makefile (from `erlang.mk', line 4372)
query_repo_hg = $(call query_repo_default,$(1))
# makefile (from `erlang.mk', line 1957)
pkg_gen_paxos_name = gen_paxos
# makefile (from `erlang.mk', line 2813)
pkg_myproto_name = myproto
# makefile (from `erlang.mk', line 3586)
pkg_sext_commit = master
# makefile (from `erlang.mk', line 3288)
pkg_radierl_fetch = git
# makefile (from `erlang.mk', line 6314)
c_verbose = $(c_verbose_$(V))
# default
MAKECMDGOALS := all
# makefile (from `erlang.mk', line 1634)
pkg_escalus_commit = master
# makefile (from `erlang.mk', line 2944)
pkg_oauth2_fetch = git
# makefile (from `erlang.mk', line 4387)
query_version_hg = $(call query_version_default,$(1))
# makefile (from `erlang.mk', line 673)
pkg_cloudi_service_api_requests_repo = https://github.com/CloudI/cloudi_service_api_requests
# makefile (from `erlang.mk', line 4363)
 
query_name = $(if $(dep_$(1)),$(1),$(if $(pkg_$(1)_name),$(pkg_$(1)_name),$(1)))
# makefile (from `erlang.mk', line 3694)
pkg_snappyer_description = Snappy as nif for Erlang
# makefile (from `erlang.mk', line 326)
pkg_active_description = Active development for Erlang: rebuild and reload source/binary files while the VM is running
# makefile (from `erlang.mk', line 3814)
pkg_supervisor3_description = OTP supervisor with additional strategies
# makefile (from `erlang.mk', line 3864)
pkg_sync_fetch = git
# makefile (from `erlang.mk', line 2446)
pkg_kvs_description = Container and Iterator
# makefile (from `erlang.mk', line 4246)
pkg_zeta_description = HTTP access log parser in Erlang
# makefile (from `erlang.mk', line 1584)
pkg_erlvolt_fetch = git
# makefile (from `erlang.mk', line 1813)
pkg_find_crate_name = find_crate
# makefile (from `erlang.mk', line 5544)
ALL_TEST_DEPS_DIRS = $(addprefix $(DEPS_DIR)/,$(TEST_DEPS))
# makefile (from `erlang.mk', line 5232)
ALL_SRC_FILES := src/erlang_app.erl src/erlang_sup.erl
# makefile (from `erlang.mk', line 7042)
define hex_user_create.erl
	{ok, _} = application:ensure_all_started(ssl),
	{ok, _} = application:ensure_all_started(inets),
	Config = $(hex_config.erl),
	case hex_api_user:create(Config, <<"$(strip $1)">>, <<"$(strip $2)">>, <<"$(strip $3)">>) of
		{ok, {201, _, #{<<"email">> := Email, <<"url">> := URL, <<"username">> := Username}}} ->
			io:format("User ~s (~s) created at ~s~n"
				"Please check your inbox for a confirmation email.~n"
				"You must confirm before you are allowed to publish packages.~n",
				[Username, Email, URL]),
			halt(0);
		{ok, {Status, _, Errors}} ->
			io:format("Error ~b: ~0p~n", [Status, Errors]),
			halt(80)
	end
endef
# makefile (from `erlang.mk', line 1685)
pkg_etoml_name = etoml
# makefile (from `erlang.mk', line 2984)
pkg_openflow_fetch = git
# makefile (from `erlang.mk', line 2606)
pkg_lux_description = Lux (LUcid eXpect scripting) simplifies test automation and provides an Expect-style execution of commands
# makefile (from `erlang.mk', line 1594)
pkg_erlware_commons_commit = master
# makefile (from `erlang.mk', line 2293)
pkg_json_rec_name = json_rec
# makefile (from `erlang.mk', line 2175)
pkg_idna_homepage = https://github.com/benoitc/erlang-idna
# makefile (from `erlang.mk', line 2718)
pkg_mimetypes_description = Erlang MIME types library
# makefile (from `erlang.mk', line 1561)
pkg_erlsha2_repo = https://github.com/vinoski/erlsha2
# makefile (from `erlang.mk', line 6840)
DTL_OPTS = 
# makefile (from `erlang.mk', line 414)
pkg_backoff_description = Simple exponential backoffs in Erlang
# makefile (from `erlang.mk', line 752)
pkg_cloudi_service_db_tokyotyrant_fetch = git
# makefile (from `erlang.mk', line 2229)
pkg_jamdb_sybase_name = jamdb_sybase
# makefile (from `erlang.mk', line 1855)
pkg_folsom_cowboy_homepage = https://github.com/boundary/folsom_cowboy
# makefile (from `erlang.mk', line 4169)
pkg_worker_pool_repo = https://github.com/inaka/worker_pool
# makefile (from `erlang.mk', line 1909)
pkg_geef_name = geef
# makefile (from `erlang.mk', line 712)
pkg_cloudi_service_db_elasticsearch_fetch = git
# makefile (from `erlang.mk', line 1704)
pkg_eunit_formatters_fetch = git
# makefile (from `erlang.mk', line 2761)
pkg_modlib_repo = https://github.com/gar1t/modlib
# makefile (from `erlang.mk', line 4340)
define core_dep_plugin
ifeq ($(2),$(PROJECT))
-include $$(patsubst $(PROJECT)/%,%,$(1))
else
-include $(DEPS_DIR)/$(1)

$(DEPS_DIR)/$(1): $(DEPS_DIR)/$(2) ;
endif
endef
# makefile (from `erlang.mk', line 1921)
pkg_gen_coap_repo = https://github.com/gotthardp/gen_coap
# makefile (from `erlang.mk', line 2288)
pkg_json_fetch = git
# makefile (from `erlang.mk', line 3752)
pkg_statebox_fetch = git
# makefile (from `erlang.mk', line 599)
pkg_cecho_homepage = https://github.com/mazenharake/cecho
# makefile (from `erlang.mk', line 2110)
pkg_hackney_description = simple HTTP client in Erlang
# makefile (from `erlang.mk', line 1089)
pkg_ecapnp_repo = https://github.com/kaos/ecapnp
# makefile (from `erlang.mk', line 1807)
pkg_feeder_homepage = https://github.com/michaelnisi/feeder
# makefile (from `erlang.mk', line 4417)
LOCAL_DEPS_DIRS = $(foreach a,$(LOCAL_DEPS),$(if $(wildcard $(APPS_DIR)/$(a)),$(APPS_DIR)/$(a)))
# makefile (from `erlang.mk', line 2333)
pkg_jsx_name = jsx
# makefile (from `erlang.mk', line 3503)
pkg_riakhttpc_homepage = https://github.com/basho/riak-erlang-http-client
# makefile (from `erlang.mk', line 1649)
pkg_espec_repo = https://github.com/lucaspiller/espec
# makefile (from `erlang.mk', line 2855)
pkg_neotoma_homepage = https://github.com/seancribbs/neotoma
# makefile (from `erlang.mk', line 3869)
pkg_syntaxerl_name = syntaxerl
# makefile (from `erlang.mk', line 5131)
ERLANG_MK_RECURSIVE_REL_DEPS_LIST = $(ERLANG_MK_TMP)/recursive-rel-deps-list.log
# makefile (from `erlang.mk', line 3209)
pkg_psycho_repo = https://github.com/gar1t/psycho
# makefile (from `erlang.mk', line 537)
pkg_boss_db_repo = https://github.com/ErlyORM/boss_db
# makefile (from `erlang.mk', line 471)
pkg_bertconf_homepage = https://github.com/ferd/bertconf
# makefile (from `erlang.mk', line 1474)
pkg_erldns_commit = master
# makefile (from `erlang.mk', line 1994)
pkg_gen_unix_commit = master
# makefile (from `erlang.mk', line 2081)
pkg_grpc_repo = https://github.com/Bluehouse-Technology/grpc
# makefile (from `erlang.mk', line 991)
pkg_detergent_homepage = https://github.com/devinus/detergent
# makefile (from `erlang.mk', line 7294)
HEX_DOCS_TARBALL_OUTPUT_FILE = $(ERLANG_MK_TMP)/$(PROJECT)-docs.tar.gz
# makefile (from `erlang.mk', line 3936)
pkg_tirerl_fetch = git
# makefile (from `erlang.mk', line 1445)
pkg_erlcron_name = erlcron
# makefile (from `erlang.mk', line 3047)
pkg_pegjs_homepage = https://github.com/dmitriid/pegjs
# makefile (from `erlang.mk', line 5150)
COMPILE_FIRST = 
# makefile (from `erlang.mk', line 374)
pkg_annotations_description = Simple code instrumentation utilities
# makefile (from `erlang.mk', line 895)
pkg_couchbeam_homepage = https://github.com/benoitc/couchbeam
# makefile (from `erlang.mk', line 1354)
pkg_eredis_commit = master
# makefile (from `erlang.mk', line 1785)
pkg_ezmq_repo = https://github.com/RoadRunnr/ezmq
# makefile (from `erlang.mk', line 1886)
pkg_gcm_description = An Erlang application for Google Cloud Messaging
# makefile (from `erlang.mk', line 2330)
pkg_jsonx_commit = master
# makefile (from `erlang.mk', line 2622)
pkg_mad_description = Small and Fast Rebar Replacement
# makefile (from `erlang.mk', line 1326)
pkg_epocxy_description = Erlang Patterns of Concurrency
# makefile (from `erlang.mk', line 5172)
makedep_verbose_2 = set -x;
# makefile (from `erlang.mk', line 3111)
pkg_pmod_transform_homepage = https://github.com/erlang/pmod_transform
# makefile (from `erlang.mk', line 1600)
pkg_erlydtl_fetch = git
# makefile (from `erlang.mk', line 2402)
pkg_kinetic_commit = master
# makefile (from `erlang.mk', line 2481)
pkg_lambdapad_repo = https://github.com/gar1t/lambdapad
# makefile (from `erlang.mk', line 2394)
pkg_keys1value_commit = master
# makefile (from `erlang.mk', line 774)
pkg_cloudi_service_http_cowboy_description = cowboy HTTP/HTTPS CloudI Service
# makefile (from `erlang.mk', line 2122)
pkg_hamcrest_commit = master
# makefile (from `erlang.mk', line 4245)
 
pkg_zeta_name = zeta
# makefile (from `erlang.mk', line 3329)
pkg_rebus_repo = https://github.com/olle/rebus
# makefile (from `erlang.mk', line 2800)
pkg_mu2_fetch = git
# makefile (from `erlang.mk', line 2273)
pkg_jobs_repo = https://github.com/esl/jobs
# makefile
MAKEFLAGS = Rrqp
# makefile (from `erlang.mk', line 3065)
pkg_pgo_repo = https://github.com/erleans/pgo.git
# makefile (from `erlang.mk', line 1400)
pkg_erlang_smtp_fetch = git
# makefile (from `erlang.mk', line 2605)
pkg_lux_name = lux
# automatic
^F = $(notdir $^)
# makefile (from `erlang.mk', line 1690)
pkg_etoml_commit = master
# makefile (from `erlang.mk', line 1569)
pkg_erlsom_repo = https://github.com/willemdj/erlsom
# makefile (from `erlang.mk', line 1256)
pkg_emagick_fetch = git
# makefile (from `erlang.mk', line 1822)
pkg_fix_description = http://fixprotocol.org/ implementation.
# makefile (from `erlang.mk', line 413)
pkg_backoff_name = backoff
# makefile (from `erlang.mk', line 2545)
pkg_lmq_repo = https://github.com/iij/lmq
# makefile (from `erlang.mk', line 2774)
pkg_mongooseim_description = Jabber / XMPP server with focus on performance and scalability, by Erlang Solutions
# makefile (from `erlang.mk', line 2649)
pkg_mc_erl_repo = https://github.com/clonejo/mc-erl
# environment
XPC_SERVICE_NAME = application.com.microsoft.VSCode.11538574.11538580
# makefile (from `erlang.mk', line 1455)
pkg_erldb_homepage = http://erldb.org
# makefile (from `erlang.mk', line 3173)
pkg_prop_name = prop
# makefile (from `erlang.mk', line 1737)
pkg_exml_repo = https://github.com/paulgray/exml
# makefile (from `erlang.mk', line 4118)
pkg_vmq_snmp_description = Component of VerneMQ: A distributed MQTT message broker
# makefile (from `erlang.mk', line 4023)
pkg_ucol_nif_homepage = https://github.com/refuge/ucol_nif
# makefile (from `erlang.mk', line 4247)
pkg_zeta_homepage = https://github.com/s1n4/zeta
# makefile (from `erlang.mk', line 1122)
pkg_edis_commit = master
# makefile (from `erlang.mk', line 3541)
pkg_rust_mk_name = rust_mk
# makefile (from `erlang.mk', line 4325)
APPS_DIR = $(CURDIR)/apps
# makefile (from `erlang.mk', line 600)
pkg_cecho_fetch = git
# makefile (from `erlang.mk', line 1160)
pkg_efene_fetch = git
# makefile (from `erlang.mk', line 2109)
pkg_hackney_name = hackney
# makefile (from `erlang.mk', line 1064)
pkg_e2_fetch = git
# makefile (from `erlang.mk', line 2034)
pkg_gin_commit = master
# makefile (from `erlang.mk', line 2601)
pkg_luwak_repo = https://github.com/basho/luwak
# makefile (from `erlang.mk', line 2138)
pkg_hottub_commit = master
# makefile (from `erlang.mk', line 3518)
pkg_riakpool_description = erlang riak client pool
# makefile (from `erlang.mk', line 2191)
pkg_iota_homepage = https://github.com/jpgneves/iota
# makefile (from `erlang.mk', line 2073)
pkg_grapherl_repo = https://github.com/eproxus/grapherl
# makefile (from `erlang.mk', line 2881)
pkg_nitrogen_core_repo = https://github.com/nitrogen/nitrogen_core
# makefile (from `erlang.mk', line 4058)
pkg_ux_commit = master
# makefile (from `erlang.mk', line 2754)
pkg_mockgyver_commit = master
# makefile (from `erlang.mk', line 1818)
pkg_find_crate_commit = master
# makefile (from `erlang.mk', line 646)
pkg_cl_description = OpenCL binding for Erlang
# makefile (from `erlang.mk', line 1832)
pkg_flower_fetch = git
# makefile (from `erlang.mk', line 1840)
pkg_fn_fetch = git
# makefile (from `erlang.mk', line 1394)
pkg_erlang_localtime_commit = master
# makefile (from `erlang.mk', line 2537)
pkg_live_repo = https://github.com/ninenines/live
# makefile (from `erlang.mk', line 369)
pkg_amqp_client_repo = https://github.com/rabbitmq/rabbitmq-erlang-client.git
# makefile (from `erlang.mk', line 2368)
pkg_katja_fetch = git
# environment
MAKELEVEL := 0
# makefile (from `erlang.mk', line 1391)
pkg_erlang_localtime_homepage = https://github.com/dmitryme/erlang_localtime
# makefile (from `erlang.mk', line 2744)
pkg_mochiweb_xpath_fetch = git
# makefile (from `erlang.mk', line 1702)
pkg_eunit_formatters_description = Because eunit's output sucks. Let's make it better.
# makefile (from `erlang.mk', line 2256)
pkg_jiffy_fetch = git
# makefile (from `erlang.mk', line 1885)
pkg_gcm_name = gcm
# makefile (from `erlang.mk', line 745)
pkg_cloudi_service_db_riak_repo = https://github.com/CloudI/cloudi_service_db_riak
# makefile (from `erlang.mk', line 1726)
pkg_exec_description = Execute and control OS processes from Erlang/OTP.
# makefile (from `erlang.mk', line 2690)
pkg_memo_commit = master
# makefile (from `erlang.mk', line 677)
pkg_cloudi_service_db_name = cloudi_service_db
# makefile (from `erlang.mk', line 1325)
pkg_epocxy_name = epocxy
# makefile (from `erlang.mk', line 3007)
pkg_otpbp_homepage = https://github.com/Ledest/otpbp
# makefile (from `erlang.mk', line 2922)
pkg_nodefinder_commit = master
# makefile (from `erlang.mk', line 2981)
pkg_openflow_name = openflow
# makefile (from `erlang.mk', line 1962)
pkg_gen_paxos_commit = master
# makefile (from `erlang.mk', line 3554)
pkg_safetyvalve_commit = master
# makefile (from `erlang.mk', line 2456)
pkg_lager_fetch = git
# makefile (from `erlang.mk', line 773)
pkg_cloudi_service_http_cowboy_name = cloudi_service_http_cowboy
# makefile (from `erlang.mk', line 3768)
pkg_statman_fetch = git
# makefile (from `erlang.mk', line 1362)
pkg_eredis_pool_commit = master
# makefile (from `erlang.mk', line 2000)
pkg_geode_fetch = git
# makefile (from `erlang.mk', line 2160)
pkg_i18n_fetch = git
# makefile (from `erlang.mk', line 3121)
pkg_pobox_repo = https://github.com/ferd/pobox
# makefile (from `erlang.mk', line 2897)
 
pkg_nkdocker_repo = https://github.com/Nekso/nkdocker
# makefile (from `erlang.mk', line 3809)
pkg_subproc_repo = https://github.com/dozzie/subproc
# makefile (from `erlang.mk', line 1439)
pkg_erlcloud_homepage = https://github.com/gleber/erlcloud
# makefile (from `erlang.mk', line 662)
pkg_cloudi_core_description = CloudI internal service runtime
# makefile (from `erlang.mk', line 2594)
pkg_luerl_commit = develop
# makefile (from `erlang.mk', line 4418)
ALL_DEPS_DIRS = $(addprefix $(DEPS_DIR)/,$(foreach dep,$(filter-out $(IGNORE_DEPS),$(BUILD_DEPS) $(DEPS)),$(call dep_name,$(dep))))
# makefile (from `erlang.mk', line 4603)
dep_autopatch_fetch_rebar = 	if command -v flock >/dev/null; then flock $(ERLANG_MK_TMP)/rebar.lock sh -c "$(call dep_autopatch_fetch_rebar2)"; elif command -v lockf >/dev/null; then lockf $(ERLANG_MK_TMP)/rebar.lock sh -c "$(call dep_autopatch_fetch_rebar2)"; else $(call dep_autopatch_fetch_rebar2); fi
# makefile (from `erlang.mk', line 2496)
pkg_lasse_fetch = git
# makefile (from `erlang.mk', line 2586)
pkg_lucid_commit = master
# makefile (from `erlang.mk', line 3367)
pkg_redo_homepage = https://github.com/jkvor/redo
# makefile (from `erlang.mk', line 4368)
query_repo_default = $(if $(dep_$(1)),$(word 2,$(dep_$(1))),$(pkg_$(1)_repo))
# makefile (from `erlang.mk', line 793)
pkg_cloudi_service_map_reduce_repo = https://github.com/CloudI/cloudi_service_map_reduce
# makefile (from `erlang.mk', line 64)
ERLANG_MK_TMP = $(CURDIR)/.erlang.mk
# makefile (from `erlang.mk', line 426)
pkg_barrel_tcp_commit = master
# makefile (from `erlang.mk', line 2814)
pkg_myproto_description = MySQL Server Protocol in Erlang
# makefile (from `erlang.mk', line 3400)
pkg_resource_discovery_fetch = git
# makefile (from `erlang.mk', line 3414)
pkg_rfc4627_jsonrpc_description = Erlang RFC4627 (JSON) codec and JSON-RPC server implementation.
# makefile (from `erlang.mk', line 1278)
pkg_entop_description = A top-like tool for monitoring an Erlang node
# makefile (from `erlang.mk', line 3910)
pkg_ticktick_description = Ticktick is an id generator for message service.
# makefile (from `erlang.mk', line 3341)
pkg_recon_name = recon
# makefile (from `erlang.mk', line 3909)
pkg_ticktick_name = ticktick
# makefile (from `erlang.mk', line 2416)
pkg_kraken_fetch = git
# makefile (from `erlang.mk', line 1826)
pkg_fix_commit = master
# makefile (from `erlang.mk', line 1453)
pkg_erldb_name = erldb
# makefile (from `erlang.mk', line 4229)
pkg_zab_engine_name = zab_engine
# makefile (from `erlang.mk', line 1589)
pkg_erlware_commons_name = erlware_commons
# makefile (from `erlang.mk', line 1503)
pkg_erlguten_homepage = https://github.com/richcarl/erlguten
# makefile (from `erlang.mk', line 3017)
pkg_pal_repo = https://github.com/manifest/pal
# makefile (from `erlang.mk', line 2409)
pkg_kjell_repo = https://github.com/karlll/kjell
# makefile (from `erlang.mk', line 1066)
pkg_e2_commit = master
# makefile (from `erlang.mk', line 1559)
pkg_erlsha2_homepage = https://github.com/vinoski/erlsha2
# makefile (from `erlang.mk', line 1954)
pkg_gen_nb_server_commit = master
# makefile (from `erlang.mk', line 3710)
pkg_spapi_router_description = Partially-connected Erlang clustering
# makefile (from `erlang.mk', line 903)
pkg_covertool_homepage = https://github.com/idubrov/covertool
# makefile (from `erlang.mk', line 1598)
pkg_erlydtl_description = Django Template Language for Erlang.
# makefile (from `erlang.mk', line 2576)
pkg_lol_fetch = git
# makefile (from `erlang.mk', line 889)
pkg_confetti_repo = https://github.com/jtendo/confetti
# makefile (from `erlang.mk', line 1238)
pkg_elli_description = Simple, robust and performant Erlang web server
# makefile (from `erlang.mk', line 2904)
pkg_nkpacket_fetch = git
# makefile (from `erlang.mk', line 3794)
pkg_stockdb_commit = master
# makefile (from `erlang.mk', line 3949)
pkg_traffic_tools_name = traffic_tools
# makefile (from `erlang.mk', line 722)
pkg_cloudi_service_db_memcached_commit = master
# makefile (from `erlang.mk', line 2280)
pkg_joxa_fetch = git
# makefile (from `erlang.mk', line 4037)
pkg_unsplit_name = unsplit
# makefile (from `erlang.mk', line 464)
pkg_bear_fetch = git
# makefile (from `erlang.mk', line 2038)
pkg_gitty_description = Git access in erlang
# makefile (from `erlang.mk', line 536)
pkg_boss_db_fetch = git
# makefile (from `erlang.mk', line 3136)
pkg_poolboy_fetch = git
# makefile (from `erlang.mk', line 2165)
pkg_ibrowse_name = ibrowse
# makefile (from `erlang.mk', line 1725)
pkg_exec_name = erlexec
# makefile (from `erlang.mk', line 2797)
pkg_mu2_name = mu2
# makefile (from `erlang.mk', line 3663)
pkg_simple_oauth2_homepage = https://github.com/virtan/simple_oauth2
# makefile (from `erlang.mk', line 3654)
pkg_simple_bridge_description = A simple, standardized interface library to Erlang HTTP Servers.
# makefile (from `erlang.mk', line 1518)
pkg_erlmongo_description = Record based Erlang driver for MongoDB with gridfs support
# makefile (from `erlang.mk', line 3863)
pkg_sync_homepage = https://github.com/rustyio/sync
# makefile (from `erlang.mk', line 3105)
pkg_plumtree_repo = https://github.com/helium/plumtree
# makefile (from `erlang.mk', line 2462)
pkg_lager_amqp_backend_description = AMQP RabbitMQ Lager backend
# makefile (from `erlang.mk', line 3103)
pkg_plumtree_homepage = https://github.com/helium/plumtree
# makefile (from `erlang.mk', line 3224)
pkg_push_service_fetch = git
# makefile (from `erlang.mk', line 3601)
pkg_sgte_repo = https://github.com/filippo/sgte
# makefile (from `erlang.mk', line 4105)
pkg_vmq_passwd_repo = https://github.com/erlio/vmq_passwd
# makefile (from `erlang.mk', line 1677)
pkg_etest_http_name = etest_http
# makefile (from `erlang.mk', line 519)
pkg_bootstrap_homepage = https://github.com/schlagert/bootstrap
# makefile (from `erlang.mk', line 2786)
pkg_moyo_commit = master
# makefile (from `erlang.mk', line 661)
pkg_cloudi_core_name = cloudi_core
# makefile (from `erlang.mk', line 1418)
pkg_erlastic_search_commit = master
# makefile (from `erlang.mk', line 2713)
pkg_mimerl_repo = https://github.com/benoitc/mimerl
# makefile (from `erlang.mk', line 3962)
pkg_trails_commit = master
# makefile (from `erlang.mk', line 5777)
define bs_appsrc_lib
{application, $p, [
	{description, ""},
	{vsn, "0.1.0"},
	{id, "git"},
 
	{modules, []},
	{registered, []},
	{applications, [
		kernel,
		stdlib
	]}
]}.
endef
# makefile (from `erlang.mk', line 3446)
pkg_riak_ensemble_description = Multi-Paxos framework in Erlang
# makefile (from `erlang.mk', line 1615)
pkg_erserve_homepage = https://github.com/del/erserve
# makefile (from `erlang.mk', line 1703)
pkg_eunit_formatters_homepage = https://github.com/seancribbs/eunit_formatters
# makefile (from `erlang.mk', line 942)
pkg_cqerl_description = Native Erlang CQL client for Cassandra
# makefile (from `erlang.mk', line 1607)
pkg_errd_homepage = https://github.com/archaelus/errd
# makefile (from `erlang.mk', line 3048)
pkg_pegjs_fetch = git
# makefile (from `erlang.mk', line 3441)
pkg_riak_dt_repo = https://github.com/basho/riak_dt
# makefile (from `erlang.mk', line 1904)
pkg_geas_fetch = git
# makefile (from `erlang.mk', line 918)
pkg_cowdb_description = Pure Key/Value database library for Erlang Applications
# makefile (from `erlang.mk', line 1662)
pkg_etap_description = etap is a simple erlang testing library that provides TAP compliant output.
# makefile (from `erlang.mk', line 3810)
pkg_subproc_commit = v0.1.0
# makefile (from `erlang.mk', line 3967)
pkg_trane_homepage = https://github.com/massemanet/trane
# makefile (from `erlang.mk', line 1798)
pkg_fast_disk_log_description = Pool-based asynchronous Erlang disk logger
# makefile (from `erlang.mk', line 1277)
pkg_entop_name = entop
# makefile (from `erlang.mk', line 1938)
pkg_gen_icmp_commit = master
# makefile (from `erlang.mk', line 3429)
pkg_riak_core_name = riak_core
# makefile (from `erlang.mk', line 927)
pkg_cowlib_homepage = http://ninenines.eu
# makefile (from `erlang.mk', line 3634)
pkg_sieve_commit = master
# makefile (from `erlang.mk', line 1317)
pkg_eplot_name = eplot
# makefile (from `erlang.mk', line 590)
pkg_cberl_description = NIF based Erlang bindings for Couchbase
# makefile (from `erlang.mk', line 2447)
pkg_kvs_homepage = https://github.com/synrc/kvs
# makefile (from `erlang.mk', line 3336)
pkg_rec2json_fetch = git
# makefile (from `erlang.mk', line 561)
pkg_bullet_repo = https://github.com/ninenines/bullet
# makefile (from `erlang.mk', line 1426)
pkg_erlasticsearch_commit = master
# makefile (from `erlang.mk', line 2679)
pkg_mekao_homepage = https://github.com/ddosia/mekao
# makefile (from `erlang.mk', line 441)
pkg_bcrypt_repo = https://github.com/erlangpack/bcrypt.git
# makefile (from `erlang.mk', line 3919)
pkg_tinymq_homepage = https://github.com/ChicagoBoss/tinymq
# makefile (from `erlang.mk', line 3098)
pkg_plain_fsm_commit = master
# makefile (from `erlang.mk', line 6709)
define ct_suite_target
ct-$(1): test-build
	$(verbose) mkdir -p $(CT_LOGS_DIR)
	$(gen_verbose_esc) $(CT_RUN) -sname ct_$(PROJECT) -suite $(addsuffix _SUITE,$(1)) $(CT_EXTRA) $(CT_OPTS)
endef
# makefile (from `erlang.mk', line 1597)
pkg_erlydtl_name = erlydtl
# makefile (from `erlang.mk', line 3672)
pkg_skel_fetch = git
# makefile (from `erlang.mk', line 2726)
pkg_mixer_description = Mix in functions from other modules
# makefile (from `erlang.mk', line 1001)
pkg_detest_repo = https://github.com/biokoda/detest
# makefile (from `erlang.mk', line 1856)
pkg_folsom_cowboy_fetch = git
# makefile (from `erlang.mk', line 1805)
pkg_feeder_name = feeder
# makefile (from `erlang.mk', line 3318)
pkg_rebar_description = Erlang build tool that makes it easy to compile and test Erlang applications, port drivers and releases.
# makefile (from `erlang.mk', line 1111)
pkg_edgar_homepage = https://github.com/crownedgrouse/edgar
# makefile (from `erlang.mk', line 3486)
pkg_riak_test_description = I'm in your cluster, testing your riaks
# makefile (from `erlang.mk', line 617)
pkg_chaos_monkey_repo = https://github.com/dLuna/chaos_monkey
# makefile (from `erlang.mk', line 2037)
pkg_gitty_name = gitty
# makefile (from `erlang.mk', line 1879)
pkg_fuse_homepage = https://github.com/jlouis/fuse
# makefile (from `erlang.mk', line 3093)
pkg_plain_fsm_name = plain_fsm
# makefile (from `erlang.mk', line 1562)
pkg_erlsha2_commit = master
# makefile (from `erlang.mk', line 3497)
pkg_riakc_repo = https://github.com/basho/riak-erlang-client
# default
.INCLUDE_DIRS = /usr/local/include
# makefile (from `erlang.mk', line 1218)
pkg_elarm_commit = master
# makefile (from `erlang.mk', line 7249)
define hex_release_retire.erl
	{ok, _} = application:ensure_all_started(ssl),
	{ok, _} = application:ensure_all_started(inets),
	Config = $(hex_config.erl),
	ConfigF = Config#{api_key => <<"$(strip $1)">>},
	Params = #{<<"reason">> => <<"$(strip $3)">>, <<"message">> => <<"$(strip $4)">>},
	case hex_api_release:retire(ConfigF, <<"$(strip $(PROJECT))">>, <<"$(strip $2)">>, Params) of
		{ok, {204, _, _}} ->
			io:format("Release $(strip $2) has been retired~n"),
			halt(0);
		{ok, {Status, _, Errors}} ->
			io:format("Error ~b: ~0p~n", [Status, Errors]),
			halt(86)
	end
endef
# makefile (from `erlang.mk', line 1430)
pkg_erlbrake_description = Erlang Airbrake notification client
# makefile (from `erlang.mk', line 3295)
pkg_rafter_homepage = https://github.com/andrewjstone/rafter
# makefile (from `erlang.mk', line 3385)
pkg_reltool_util_repo = https://github.com/okeuday/reltool_util
# makefile (from `erlang.mk', line 896)
pkg_couchbeam_fetch = git
# automatic
%D = $(patsubst %/,%,$(dir $%))
# makefile (from `erlang.mk', line 3766)
pkg_statman_description = Efficiently collect massive volumes of metrics inside the Erlang VM
# makefile (from `erlang.mk', line 5803)
define bs_apps_Makefile
PROJECT = $p
PROJECT_DESCRIPTION = New project
PROJECT_VERSION = 0.1.0
$(if $(SP),
# Whitespace to be used when creating files from templates.
SP = $(SP)
)
# Make sure we know where the applications are located.
ROOT_DIR ?= $(call core_relpath,$(dir $(ERLANG_MK_FILENAME)),$(APPS_DIR)/app)
APPS_DIR ?= ..
DEPS_DIR ?= $(call core_relpath,$(DEPS_DIR),$(APPS_DIR)/app)

include $$(ROOT_DIR)/erlang.mk
 
endef
# makefile (from `erlang.mk', line 2493)
pkg_lasse_name = lasse
# makefile (from `erlang.mk', line 2102)
pkg_gut_description = gut is a template printing, aka scaffolding, tool for Erlang. Like rails generate or yeoman
# makefile (from `erlang.mk', line 3695)
pkg_snappyer_homepage = https://github.com/zmstone/snappyer
# makefile (from `erlang.mk', line 4026)
pkg_ucol_nif_commit = master
# makefile (from `erlang.mk', line 1975)
pkg_gen_smtp_homepage = https://github.com/Vagabond/gen_smtp
# makefile (from `erlang.mk', line 2297)
pkg_json_rec_repo = https://github.com/justinkirby/json_rec
# makefile (from `erlang.mk', line 2833)
pkg_n2o_repo = https://github.com/5HT/n2o
# makefile (from `erlang.mk', line 1927)
pkg_gen_cycle_homepage = https://github.com/aerosol/gen_cycle
# makefile (from `erlang.mk', line 3717)
pkg_sqerl_name = sqerl
# makefile (from `erlang.mk', line 2026)
pkg_giallo_commit = master
# makefile (from `erlang.mk', line 4042)
pkg_unsplit_commit = master
# makefile (from `erlang.mk', line 6804)
EDOC_OUTPUT = doc
# makefile (from `erlang.mk', line 941)
pkg_cqerl_name = cqerl
# makefile (from `erlang.mk', line 496)
pkg_bisect_fetch = git
# makefile (from `erlang.mk', line 1766)
pkg_exsplus116_description = Xorshift116plus for Erlang
# makefile (from `erlang.mk', line 2871)
pkg_nifty_homepage = https://github.com/parapluu/nifty
# makefile (from `erlang.mk', line 442)
pkg_bcrypt_commit = master
# makefile (from `erlang.mk', line 917)
pkg_cowdb_name = cowdb
# makefile (from `erlang.mk', line 1661)
pkg_etap_name = etap
# makefile (from `erlang.mk', line 3346)
pkg_recon_commit = master
# makefile (from `erlang.mk', line 2250)
pkg_jesse_commit = master
# makefile (from `erlang.mk', line 1817)
pkg_find_crate_repo = https://github.com/goertzenator/find_crate
# makefile (from `erlang.mk', line 1969)
pkg_gen_rpc_repo = https://github.com/priestjim/gen_rpc.git
# environment
LANG = C
# makefile (from `erlang.mk', line 69)
ERL = erl +A1 -noinput -boot no_dot_erlang
# makefile (from `erlang.mk', line 3825)
pkg_surrogate_repo = https://github.com/skruger/Surrogate
# makefile (from `erlang.mk', line 4122)
pkg_vmq_snmp_commit = master
# makefile (from `erlang.mk', line 5995)
define tpl_gen_statem
-module($(n)).
-behaviour(gen_statem).

%% API.
-export([start_link/0]).

%% gen_statem.
-export([callback_mode/0]).
-export([init/1]).
-export([state_name/3]).
-export([handle_event/4]).
-export([terminate/3]).
-export([code_change/4]).

-record(state, {
}).

%% API.

-spec start_link() -> {ok, pid()}.
start_link() ->
	gen_statem:start_link(?MODULE, [], []).

%% gen_statem.

callback_mode() ->
	state_functions.

init([]) ->
	{ok, state_name, #state{}}.

state_name(_EventType, _EventData, StateData) ->
	{next_state, state_name, StateData}.

handle_event(_EventType, _EventData, StateName, StateData) ->
	{next_state, StateName, StateData}.

terminate(_Reason, _StateName, _StateData) ->
	ok.

code_change(_OldVsn, StateName, StateData, _Extra) ->
	{ok, StateName, StateData}.
endef
# makefile (from `erlang.mk', line 1543)
pkg_erlport_homepage = https://github.com/hdima/erlport
# makefile (from `erlang.mk', line 2238)
pkg_jerg_description = JSON Schema to Erlang Records Generator
# makefile (from `erlang.mk', line 3126)
pkg_ponos_description = ponos is a simple yet powerful load generator written in erlang
# environment
VSCODE_PID = 73197
# makefile (from `erlang.mk', line 1079)
pkg_eavro_homepage = https://github.com/SIfoxDevTeam/eavro
# makefile (from `erlang.mk', line 3233)
pkg_qdate_repo = https://github.com/choptastic/qdate
# makefile (from `erlang.mk', line 2277)
pkg_joxa_name = joxa
# makefile (from `erlang.mk', line 2354)
pkg_kafka_protocol_commit = master
# makefile (from `erlang.mk', line 567)
pkg_cache_homepage = https://github.com/fogfish/cache
# makefile (from `erlang.mk', line 3512)
pkg_riaknostic_fetch = git
# makefile (from `erlang.mk', line 1896)
pkg_gcprof_fetch = git
# makefile (from `erlang.mk', line 1088)
pkg_ecapnp_fetch = git
# makefile (from `erlang.mk', line 3817)
pkg_supervisor3_repo = https://github.com/klarna/supervisor3.git
# makefile (from `erlang.mk', line 2381)
pkg_key2value_name = key2value
# makefile (from `erlang.mk', line 4216)
pkg_yamler_fetch = git
# makefile (from `erlang.mk', line 3317)
pkg_rebar_name = rebar
# makefile (from `erlang.mk', line 6730)
PLT_APPS = 
# makefile (from `erlang.mk', line 1648)
pkg_espec_fetch = git
# makefile (from `erlang.mk', line 2345)
pkg_kafka_repo = https://github.com/wooga/kafka-erlang
# makefile (from `erlang.mk', line 6258)
C_SRC_DIR = $(CURDIR)/c_src
# makefile (from `erlang.mk', line 3762)
pkg_statebox_riak_commit = master
# makefile (from `erlang.mk', line 3208)
pkg_psycho_fetch = git
# makefile (from `erlang.mk', line 1234)
pkg_elixir_commit = master
# makefile (from `erlang.mk', line 7015)
pkg_hex_core_name = hex_core
# makefile (from `erlang.mk', line 450)
pkg_beam_commit = master
# makefile (from `erlang.mk', line 1029)
pkg_dlhttpc_name = dlhttpc
# makefile (from `erlang.mk', line 1376)
pkg_erlang_cep_fetch = git
# makefile (from `erlang.mk', line 39)
PROJECT_MOD = $(PROJECT)_app
# makefile (from `erlang.mk', line 407)
pkg_azdht_homepage = https://github.com/arcusfelis/azdht
# makefile (from `erlang.mk', line 3409)
pkg_restc_repo = https://github.com/kivra/restclient
# makefile (from `erlang.mk', line 3769)
pkg_statman_repo = https://github.com/knutin/statman
# makefile (from `erlang.mk', line 1279)
pkg_entop_homepage = https://github.com/mazenharake/entop
# makefile (from `erlang.mk', line 825)
pkg_cloudi_service_router_repo = https://github.com/CloudI/cloudi_service_router
# makefile (from `erlang.mk', line 806)
pkg_cloudi_service_queue_description = Persistent Queue Service
# makefile (from `erlang.mk', line 6733)
DIALYZER_PLT_OPTS = 
# makefile (from `erlang.mk', line 3087)
pkg_pkt_homepage = https://github.com/msantos/pkt
# makefile (from `erlang.mk', line 2837)
pkg_nat_upnp_name = nat_upnp
# makefile (from `erlang.mk', line 2101)
pkg_gut_name = gut
# makefile (from `erlang.mk', line 1784)
pkg_ezmq_fetch = git
# makefile (from `erlang.mk', line 4200)
pkg_xref_runner_fetch = git
# makefile (from `erlang.mk', line 2623)
pkg_mad_homepage = https://github.com/synrc/mad
# makefile (from `erlang.mk', line 2215)
pkg_iris_homepage = https://github.com/project-iris/iris-erl
# makefile (from `erlang.mk', line 5182)
xyrl_verbose = $(xyrl_verbose_$(V))
# makefile (from `erlang.mk', line 3928)
pkg_tinymt_fetch = git
# makefile (from `erlang.mk', line 2086)
pkg_grpc_client_description = gRPC client in Erlang
# makefile (from `erlang.mk', line 959)
pkg_cuttlefish_homepage = https://github.com/Kyorai/cuttlefish
# makefile (from `erlang.mk', line 4266)
pkg_zlists_commit = master
# makefile (from `erlang.mk', line 1482)
pkg_erldocker_commit = master
# makefile (from `erlang.mk', line 2480)
pkg_lambdapad_fetch = git
# makefile (from `erlang.mk', line 2353)
pkg_kafka_protocol_repo = https://github.com/klarna/kafka_protocol.git
# makefile (from `erlang.mk', line 2470)
pkg_lager_syslog_description = Syslog backend for lager
# makefile (from `erlang.mk', line 888)
pkg_confetti_fetch = git
# makefile (from `erlang.mk', line 5186)
asn1_verbose = $(asn1_verbose_$(V))
# makefile (from `erlang.mk', line 1765)
pkg_exsplus116_name = exsplus116
# makefile (from `erlang.mk', line 3760)
pkg_statebox_riak_fetch = git
# makefile (from `erlang.mk', line 3378)
pkg_reload_mk_commit = master
# makefile (from `erlang.mk', line 1961)
pkg_gen_paxos_repo = https://github.com/gburd/gen_paxos
# makefile (from `erlang.mk', line 4265)
pkg_zlists_repo = https://github.com/vjache/erlang-zlists
# makefile (from `erlang.mk', line 3613)
pkg_shotgun_name = shotgun
# makefile (from `erlang.mk', line 2826)
pkg_mysql_commit = 1.7.0
 
# makefile (from `erlang.mk', line 2568)
pkg_log4erl_fetch = git
# makefile (from `erlang.mk', line 1568)
pkg_erlsom_fetch = git
# makefile (from `erlang.mk', line 2638)
pkg_mavg_description = Erlang :: Exponential moving average library
# makefile (from `erlang.mk', line 3701)
pkg_social_name = social
# makefile (from `erlang.mk', line 926)
pkg_cowlib_description = Support library for manipulating Web protocols.
# makefile (from `erlang.mk', line 5002)
dep_fetch_git-subfolder = 	mkdir -p $(ERLANG_MK_TMP)/git-subfolder; git clone -q -n -- $(call dep_repo,$1) $(ERLANG_MK_TMP)/git-subfolder/$(call dep_name,$1); cd $(ERLANG_MK_TMP)/git-subfolder/$(call dep_name,$1) && git checkout -q $(call dep_commit,$1); ln -s $(ERLANG_MK_TMP)/git-subfolder/$(call dep_name,$1)/$(word 4,$(dep_$(1))) $(DEPS_DIR)/$(call dep_name,$1);
# makefile (from `erlang.mk', line 5942)
define tpl_gen_fsm
-module($(n)).
-behaviour(gen_fsm).

%% API.
-export([start_link/0]).

%% gen_fsm.
-export([init/1]).
-export([state_name/2]).
-export([handle_event/3]).
-export([state_name/3]).
-export([handle_sync_event/4]).
-export([handle_info/3]).
-export([terminate/3]).
-export([code_change/4]).

-record(state, {
}).

%% API.

-spec start_link() -> {ok, pid()}.
start_link() ->
	gen_fsm:start_link(?MODULE, [], []).

%% gen_fsm.

init([]) ->
	{ok, state_name, #state{}}.

state_name(_Event, StateData) ->
	{next_state, state_name, StateData}.

handle_event(_Event, StateName, StateData) ->
	{next_state, StateName, StateData}.

state_name(_Event, _From, StateData) ->
	{reply, ignored, state_name, StateData}.

handle_sync_event(_Event, _From, StateName, StateData) ->
	{reply, ignored, StateName, StateData}.

handle_info(_Info, StateName, StateData) ->
	{next_state, StateName, StateData}.

terminate(_Reason, _StateName, _StateData) ->
	ok.

code_change(_OldVsn, StateName, StateData, _Extra) ->
	{ok, StateName, StateData}.
endef
# makefile (from `erlang.mk', line 2544)
pkg_lmq_fetch = git
# makefile (from `erlang.mk', line 2849)
pkg_neo4j_repo = https://github.com/dmitriid/neo4j-erlang
# makefile (from `erlang.mk', line 1512)
pkg_erlmc_fetch = git
# makefile (from `erlang.mk', line 2237)
pkg_jerg_name = jerg
# makefile (from `erlang.mk', line 3984)
pkg_trie_fetch = git
# environment
rvm_path = /Users/alex/.rvm
# makefile (from `erlang.mk', line 1736)
pkg_exml_fetch = git
# makefile (from `erlang.mk', line 2400)
pkg_kinetic_fetch = git
# makefile (from `erlang.mk', line 2530)
pkg_ling_commit = master
# makefile (from `erlang.mk', line 1046)
pkg_dnssd_description = Erlang interface to Apple's Bonjour D    NS Service Discovery implementation
# makefile (from `erlang.mk', line 1414)
pkg_erlastic_search_description = An Erlang app for communicating with Elastic Search's rest interface.
# makefile (from `erlang.mk', line 4191)
pkg_xhttpc_homepage = https://github.com/seriyps/xhttpc
# makefile (from `erlang.mk', line 159)
define newline


endef
# makefile (from `erlang.mk', line 1689)
pkg_etoml_repo = https://github.com/kalta/etoml
# makefile (from `erlang.mk', line 1237)
pkg_elli_name = elli
# makefile (from `erlang.mk', line 521)
pkg_bootstrap_repo = https://github.com/schlagert/bootstrap
# makefile (from `erlang.mk', line 1288)
pkg_epcap_fetch = git
# makefile (from `erlang.mk', line 8053)
define cover.erl
	CoverSetup = fun() -> ok end,
	CoverExport = fun(_) -> ok end,
endef
# makefile (from `erlang.mk', line 2600)
pkg_luwak_fetch = git
# makefile (from `erlang.mk', line 2825)
pkg_mysql_repo = https://github.com/mysql-otp/mysql-otp
# makefile (from `erlang.mk', line 4126)
pkg_vmq_systree_description = Component of VerneMQ: A distributed MQTT message broker
# makefile (from `erlang.mk', line 4098)
pkg_vmq_graphite_commit = master
# makefile
CURDIR := /Users/alex/Desktop/erlang
# makefile (from `erlang.mk', line 487)
pkg_binpp_homepage = https://github.com/jtendo/binpp
# makefile (from `erlang.mk', line 850)
pkg_cloudi_service_udp_commit = master
# makefile (from `erlang.mk', line 2072)
pkg_grapherl_fetch = git
# makefile (from `erlang.mk', line 1791)
pkg_ezmtp_homepage = https://github.com/a13x/ezmtp
# makefile (from `erlang.mk', line 1370)
pkg_erl_streams_commit = master
# makefile (from `erlang.mk', line 1913)
pkg_geef_repo = https://github.com/carlosmn/geef
# makefile (from `erlang.mk', line 3510)
pkg_riaknostic_description = A diagnostic tool for Riak installations, to find common errors asap
# makefile (from `erlang.mk', line 813)
pkg_cloudi_service_quorum_name = cloudi_service_quorum
# makefile (from `erlang.mk', line 3200)
pkg_protobuffs_fetch = git
# makefile (from `erlang.mk', line 3682)
pkg_slack_commit = master
# makefile (from `erlang.mk', line 6905)
ESCRIPT_SHEBANG = /usr/bin/env escript
# makefile (from `erlang.mk', line 1897)
pkg_gcprof_repo = https://github.com/knutin/gcprof
# makefile (from `erlang.mk', line 2992)
pkg_openid_fetch = git
# makefile (from `erlang.mk', line 2536)
pkg_live_fetch = git
# makefile (from `erlang.mk', line 368)
pkg_amqp_client_fetch = git
# makefile (from `erlang.mk', line 2226)
pkg_iso8601_commit = master
# makefile (from `erlang.mk', line 805)
pkg_cloudi_service_queue_name = cloudi_service_queue
# makefile (from `erlang.mk', line 705)
pkg_cloudi_service_db_couchdb_repo = https://github.com/CloudI/cloudi_service_db_couchdb
# makefile (from `erlang.mk', line 4253)
pkg_zippers_name = zippers
# makefile (from `erlang.mk', line 3992)
pkg_triq_fetch = git
# makefile (from `erlang.mk', line 2337)
pkg_jsx_repo = https://github.com/talentdeficit/jsx
# makefile (from `erlang.mk', line 744)
pkg_cloudi_service_db_riak_fetch = git
# makefile (from `erlang.mk', line 3600)
pkg_sgte_fetch = git
# makefile (from `erlang.mk', line 2631)
pkg_marina_homepage = https://github.com/lpgauth/marina
# makefile (from `erlang.mk', line 2486)
pkg_lasp_description = A Language for Distributed, Eventually Consistent Computations
# makefile (from `erlang.mk', line 2087)
pkg_grpc_client_homepage = https://github.com/Bluehouse-Technology/grpc_client
# makefile (from `erlang.mk', line 593)
pkg_cberl_repo = https://github.com/chitika/cberl
# makefile (from `erlang.mk', line 3959)
pkg_trails_homepage = http://inaka.github.io/cowboy-trails/
# makefile (from `erlang.mk', line 3842)
pkg_swarm_commit = master
# makefile (from `erlang.mk', line 552)
pkg_bson_fetch = git
# makefile (from `erlang.mk', line 3296)
 
pkg_rafter_fetch = git
# makefile (from `erlang.mk', line 17)
ERLANG_MK_FILENAME := /Users/alex/Desktop/erlang/erlang.mk
# makefile (from `erlang.mk', line 792)
pkg_cloudi_service_map_reduce_fetch = git
# makefile (from `erlang.mk', line 1449)
pkg_erlcron_repo = https://github.com/erlware/erlcron
# makefile (from `erlang.mk', line 2709)
pkg_mimerl_name = mimerl
# makefile (from `erlang.mk', line 2896)
pkg_nkdocker_fetch = git
# makefile (from `erlang.mk', line 1405)
pkg_erlang_term_name = erlang_term
# makefile (from `erlang.mk', line 4016)
pkg_twitter_erlang_fetch = git
# makefile (from `erlang.mk', line 3933)
pkg_tirerl_name = tirerl
# makefile (from `erlang.mk', line 2637)
pkg_mavg_name = mavg
# makefile (from `erlang.mk', line 1986)
pkg_gen_tracker_commit = master
# makefile (from `erlang.mk', line 925)
pkg_cowlib_name = cowlib
# makefile (from `erlang.mk', line 687)
pkg_cloudi_service_db_cassandra_homepage = http://cloudi.org/
# makefile (from `erlang.mk', line 4018)
pkg_twitter_erlang_commit = master
# makefile (from `erlang.mk', line 335)
pkg_actordb_core_homepage = http://www.actordb.com/
# makefile (from `erlang.mk', line 3167)
pkg_prometheus_homepage = https://github.com/deadtrickster/prometheus.erl
# makefile (from `erlang.mk', line 1225)
pkg_eleveldb_repo = https://github.com/basho/eleveldb
# makefile (from `erlang.mk', line 3327)
pkg_rebus_homepage = https://github.com/olle/rebus
# makefile (from `erlang.mk', line 2934)
pkg_oauth_description = An Erlang OAuth 1.0 implementation
# makefile (from `erlang.mk', line 2010)
pkg_getopt_commit = master
# makefile (from `erlang.mk', line 1)
MAKEFILE_LIST :=  Makefile erlang.mk
# makefile (from `erlang.mk', line 794)
pkg_cloudi_service_map_reduce_commit = master
# makefile (from `Makefile', line 5)
BUILD_DEPS = relx
# makefile (from `erlang.mk', line 1045)
pkg_dnssd_name = dnssd
# makefile (from `erlang.mk', line 3072)
pkg_pgsql_fetch = git
# makefile (from `erlang.mk', line 3680)
pkg_slack_fetch = git
# makefile (from `erlang.mk', line 1623)
pkg_erwa_homepage = https://github.com/bwegh/erwa
# makefile (from `erlang.mk', line 4218)
pkg_yamler_commit = master
# makefile (from `erlang.mk', line 206)
ERLANG_MK_BUILD_DIR = .erlang.mk.build
# makefile (from `erlang.mk', line 354)
pkg_aleppo_commit = master
# makefile (from `erlang.mk', line 2609)
pkg_lux_repo = https://github.com/hawk/lux
# makefile (from `erlang.mk', line 3352)
pkg_record_info_fetch = git
# makefile (from `erlang.mk', line 767)
pkg_cloudi_service_http_client_homepage = http://cloudi.org/
# makefile (from `erlang.mk', line 3456)
pkg_riak_kv_fetch = git
# makefile (from `erlang.mk', line 3399)
pkg_resource_discovery_homepage = http://erlware.org/
# makefile (from `erlang.mk', line 950)
pkg_cr_description = Chain Replication
# makefile (from `erlang.mk', line 762)
pkg_cloudi_service_filesystem_commit = master
# makefile (from `erlang.mk', line 3357)
pkg_redgrid_name = redgrid
# makefile (from `erlang.mk', line 3432)
pkg_riak_core_fetch = git
# makefile (from `erlang.mk', line 4256)
pkg_zippers_fetch = git
# makefile (from `erlang.mk', line 3177)
pkg_prop_repo = https://github.com/nuex/prop
# makefile (from `erlang.mk', line 550)
pkg_bson_description = BSON documents in Erlang, see bsonspec.org
# makefile (from `erlang.mk', line 2190)
pkg_iota_description = iota (Inter-dependency Objective Testing Apparatus) - a tool to enforce clean separation of responsibilities in Erlang code
# makefile (from `erlang.mk', line 1630)
pkg_escalus_description = An XMPP client library in Erlang for conveniently testing XMPP servers
# makefile (from `erlang.mk', line 390)
pkg_apns_description = Apple Push Notification Server for Erlang
# makefile (from `erlang.mk', line 3545)
pkg_rust_mk_repo = https://github.com/goertzenator/rust.mk
# makefile (from `erlang.mk', line 342)
pkg_actordb_thrift_description = Thrift API for ActorDB
# makefile (from `erlang.mk', line 1030)
pkg_dlhttpc_description = dispcount-based lhttpc fork for massive amounts of requests to limited endpoints
# makefile (from `erlang.mk', line 2272)
pkg_jobs_fetch = git
# makefile (from `erlang.mk', line 2113)
pkg_hackney_repo = https://github.com/benoitc/hackney
# makefile (from `erlang.mk', line 4150)
pkg_webmachine_description = A REST-based system for building web applications.
# makefile (from `erlang.mk', line 2263)
pkg_jiffy_v_homepage = https://github.com/shizzard/jiffy-v
# makefile (from `erlang.mk', line 1814)
pkg_find_crate_description = Find Rust libs and exes in Erlang application priv directory
# makefile (from `erlang.mk', line 2610)
pkg_lux_commit = master
# makefile (from `erlang.mk', line 5157)
ERLC_MIB_OPTS = 
# makefile (from `erlang.mk', line 1382)
pkg_erlang_js_description = A linked-in driver for Erlang to Mozilla's Spidermonkey Javascript runtime.
# makefile (from `erlang.mk', line 1586)
pkg_erlvolt_commit = master
# makefile (from `erlang.mk', line 3746)
pkg_stable_commit = master
# makefile (from `erlang.mk', line 1103)
pkg_edate_homepage = https://github.com/dweldon/edate
# makefile (from `erlang.mk', line 2870)
pkg_nifty_description = Erlang NIF wrapper generator
# makefile (from `erlang.mk', line 2485)
pkg_lasp_name = lasp
# makefile (from `erlang.mk', line 738)
pkg_cloudi_service_db_pgsql_commit = master
# makefile (from `erlang.mk', line 584)
pkg_carotene_fetch = git
# makefile (from `erlang.mk', line 4010)
pkg_twerl_commit = oauth
# makefile (from `erlang.mk', line 3205)
pkg_psycho_name = psycho
# makefile (from `erlang.mk', line 1263)
pkg_emysql_homepage = https://github.com/Eonblast/Emysql
# makefile (from `erlang.mk', line 797)
pkg_cloudi_service_oauth1_name = cloudi_service_oauth1
# makefile (from `erlang.mk', line 3526)
 
pkg_rivus_cep_description = Complex event processing in Erlang
# makefile (from `erlang.mk', line 3314)
pkg_rbeacon_commit = master
# makefile (from `erlang.mk', line 754)
pkg_cloudi_service_db_tokyotyrant_commit = master
# makefile (from `erlang.mk', line 4104)
pkg_vmq_passwd_fetch = git
# makefile (from `erlang.mk', line 728)
pkg_cloudi_service_db_mysql_fetch = git
# makefile (from `erlang.mk', line 671)
pkg_cloudi_service_api_requests_homepage = http://cloudi.org/
# makefile (from `erlang.mk', line 2309)
pkg_jsonerl_name = jsonerl
# makefile (from `erlang.mk', line 878)
pkg_color_description = ANSI colors for your Erlang
# makefile (from `erlang.mk', line 1889)
pkg_gcm_repo = https://github.com/pdincau/gcm-erlang
# makefile (from `erlang.mk', line 3637)
pkg_sighandler_name = sighandler
# makefile (from `erlang.mk', line 887)
pkg_confetti_homepage = https://github.com/jtendo/confetti
# makefile (from `erlang.mk', line 681)
pkg_cloudi_service_db_repo = https://github.com/CloudI/cloudi_service_db
# makefile (from `erlang.mk', line 1329)
pkg_epocxy_repo = https://github.com/duomark/epocxy
# makefile (from `erlang.mk', line 1471)
pkg_erldns_homepage = https://github.com/aetrion/erl-dns
# makefile (from `erlang.mk', line 1953)
pkg_gen_nb_server_repo = https://github.com/kevsmith/gen_nb_server
# makefile (from `erlang.mk', line 1714)
pkg_euthanasia_commit = master
# makefile (from `erlang.mk', line 1758)
pkg_exs64_description = Xorshift64star pseudo random number generator for Erlang.
# makefile (from `erlang.mk', line 777)
pkg_cloudi_service_http_cowboy_repo = https://github.com/CloudI/cloudi_service_http_cowboy
# makefile (from `erlang.mk', line 1517)
pkg_erlmongo_name = erlmongo
# makefile (from `erlang.mk', line 3536)
pkg_rlimit_fetch = git
# makefile (from `erlang.mk', line 4102)
pkg_vmq_passwd_description = Component of VerneMQ: A distributed MQTT message broker
# makefile (from `erlang.mk', line 3849)
pkg_switchboard_repo = https://github.com/thusfresh/switchboard
# makefile (from `erlang.mk', line 3574)
pkg_setup_description = Generic setup utility for Erlang-based systems
# makefile (from `erlang.mk', line 1085)
pkg_ecapnp_name = ecapnp
# makefile (from `erlang.mk', line 3969)
pkg_trane_repo = https://github.com/massemanet/trane
# makefile (from `erlang.mk', line 2781)
pkg_moyo_name = moyo
# makefile (from `erlang.mk', line 1129)
pkg_edns_repo = https://github.com/hcvst/erlang-dns
# makefile (from `erlang.mk', line 2505)
pkg_ldap_repo = https://github.com/spawnproc/ldap
# makefile (from `erlang.mk', line 4106)
pkg_vmq_passwd_commit = master
# makefile (from `erlang.mk', line 560)
pkg_bullet_fetch = git
# makefile (from `erlang.mk', line 949)
pkg_cr_name = cr
# makefile (from `erlang.mk', line 3618)
pkg_shotgun_commit = master
# makefile (from `erlang.mk', line 3410)
pkg_restc_commit = master
# makefile (from `erlang.mk', line 624)
pkg_check_node_fetch = git
# makefile (from `erlang.mk', line 440)
pkg_bcrypt_fetch = git
# makefile (from `erlang.mk', line 1839)
pkg_fn_homepage = https://github.com/reiddraper/fn
# makefile (from `erlang.mk', line 2615)
pkg_machi_homepage = https://github.com/basho/machi
# makefile (from `erlang.mk', line 549)
pkg_bson_name = bson
# makefile (from `erlang.mk', line 3904)
pkg_tempo_fetch = git
# makefile (from `erlang.mk', line 1629)
pkg_escalus_name = escalus
# makefile (from `erlang.mk', line 1000)
pkg_detest_fetch = git
# makefile (from `erlang.mk', line 4038)
pkg_unsplit_description = Resolves conflicts in Mnesia after network splits
# makefile (from `erlang.mk', line 2177)
pkg_idna_repo = https://github.com/benoitc/erlang-idna
# makefile (from `erlang.mk', line 341)
pkg_actordb_thrift_name = actordb_thrift
# makefile (from `erlang.mk', line 3345)
pkg_recon_repo = https://github.com/ferd/recon
# makefile (from `erlang.mk', line 5153)
ERLC_EXCLUDE_PATHS = $(addprefix src/,$(addsuffix .erl,$(ERLC_EXCLUDE)))
# makefile (from `erlang.mk', line 1305)
pkg_epgsql_repo = https://github.com/epgsql/epgsql
# makefile (from `erlang.mk', line 870)
pkg_cluster_info_description = Fork of Hibari's nifty cluster_info OTP app
# makefile (from `erlang.mk', line 616)
pkg_chaos_monkey_fetch = git
# makefile (from `erlang.mk', line 56)
gen_verbose = $(gen_verbose_$(V))
# makefile (from `erlang.mk', line 855)
pkg_cloudi_service_validate_homepage = http://cloudi.org/
# makefile (from `erlang.mk', line 2770)
pkg_mongodb_commit = master
# makefile (from `erlang.mk', line 1381)
pkg_erlang_js_name = erlang_js
# makefile (from `erlang.mk', line 3496)
pkg_riakc_fetch = git
# makefile (from `erlang.mk', line 2056)
pkg_gpb_fetch = git
# makefile (from `erlang.mk', line 3247)
pkg_quest_homepage = https://github.com/eriksoe/ErlangQuest
# makefile (from `erlang.mk', line 2869)
pkg_nifty_name = nifty
# makefile (from `erlang.mk', line 2885)
pkg_nkbase_name = nkbase
# makefile (from `erlang.mk', line 2014)
pkg_gettext_description = Erlang internationalization library.
# makefile (from `erlang.mk', line 1402)
pkg_erlang_smtp_commit = master
# makefile (from `erlang.mk', line 3255)
pkg_quickrand_homepage = https://github.com/okeuday/quickrand
# makefile (from `erlang.mk', line 5189)
mib_verbose_2 = set -x;
# makefile (from `erlang.mk', line 1526)
pkg_erlog_description = Prolog interpreter in and for Erlang
# makefile (from `erlang.mk', line 649)
pkg_cl_repo = https://github.com/tonyrog/cl
# makefile (from `erlang.mk', line 4009)
pkg_twerl_repo = https://github.com/lucaspiller/twerl
# makefile (from `erlang.mk', line 3479)
pkg_riak_sysmon_homepage = https://github.com/basho/riak_sysmon
# makefile (from `erlang.mk', line 3473)
pkg_riak_pipe_repo = https://github.com/basho/riak_pipe
# makefile (from `erlang.mk', line 188)
core_find = $(if $(wildcard $1),$(shell find $(1:%/=%) \( -type l -o -type f \) -name $(subst *,\*,$2) | grep -v " "))
# makefile (from `erlang.mk', line 5184)
asn1_verbose_0 = @echo " ASN1  " $(filter %.asn1,$(?F));
# makefile (from `erlang.mk', line 2832)
pkg_n2o_fetch = git
# makefile (from `erlang.mk', line 2845)
pkg_neo4j_name = neo4j
# makefile (from `erlang.mk', line 2503)
pkg_ldap_homepage = https://github.com/spawnproc/ldap
# makefile (from `erlang.mk', line 1071)
pkg_eamf_homepage = https://github.com/mrinalwadhwa/eamf
# makefile (from `erlang.mk', line 877)
pkg_color_name = color
# makefile (from `erlang.mk', line 4422)
ALL_APPS_DIRS = $(if $(wildcard $(APPS_DIR)/),$(filter-out $(APPS_DIR),$(shell find $(APPS_DIR) -maxdepth 1 -type d)))
# makefile (from `erlang.mk', line 1729)
 
pkg_exec_repo = https://github.com/saleyn/erlexec
# makefile (from `erlang.mk', line 1174)
pkg_ehsa_description = Erlang HTTP server basic and digest authentication modules
# makefile (from `erlang.mk', line 5135)
ERLANG_MK_QUERY_DEPS_FILE = $(ERLANG_MK_TMP)/query-deps.log
# makefile (from `erlang.mk', line 1162)
pkg_efene_commit = master
# makefile (from `erlang.mk', line 4254)
pkg_zippers_description = A library for functional zipper data structures in Erlang. Read more on zippers
# environment
PWD = /Users/alex/Desktop/erlang
# makefile (from `erlang.mk', line 4040)
pkg_unsplit_fetch = git
# makefile (from `erlang.mk', line 2078)
pkg_grpc_description = gRPC server in Erlang
# makefile (from `erlang.mk', line 3430)
pkg_riak_core_description = Distributed systems infrastructure used by Riak.
# makefile (from `erlang.mk', line 54)
gen_verbose_0 = @echo " GEN   " $@;
# makefile (from `erlang.mk', line 1968)
pkg_gen_rpc_fetch = git
# makefile (from `erlang.mk', line 5274)
ERL_FILES := src/erlang_app.erl src/erlang_sup.erl  
# makefile (from `erlang.mk', line 4442)
dep_verbose_0 = @echo " DEP    $1 ($(call dep_commit,$1))";
# makefile (from `erlang.mk', line 4047)
pkg_uuid_homepage = https://github.com/okeuday/uuid
# makefile (from `erlang.mk', line 1655)
pkg_estatsd_homepage = https://github.com/RJ/estatsd
# makefile (from `erlang.mk', line 4272)
pkg_zraft_lib_fetch = git
# makefile (from `erlang.mk', line 665)
pkg_cloudi_core_repo = https://github.com/CloudI/cloudi_core
# makefile (from `erlang.mk', line 801)
pkg_cloudi_service_oauth1_repo = https://github.com/CloudI/cloudi_service_oauth1
# makefile (from `erlang.mk', line 1495)
pkg_erlgit_homepage = https://github.com/gleber/erlgit
# makefile (from `erlang.mk', line 975)
pkg_debbie_homepage = https://github.com/crownedgrouse/debbie
# makefile (from `erlang.mk', line 1834)
pkg_flower_commit = master
# makefile (from `erlang.mk', line 962)
pkg_cuttlefish_commit = master
# makefile (from `erlang.mk', line 2062)
pkg_gproc_description = Extended process registry for Erlang
# makefile (from `erlang.mk', line 3943)
pkg_toml_homepage = http://dozzie.jarowit.net/trac/wiki/TOML
# makefile (from `erlang.mk', line 2370)
pkg_katja_commit = master
# makefile (from `erlang.mk', line 3112)
pkg_pmod_transform_fetch = git
# makefile (from `erlang.mk', line 4378)
query_repo_legacy = -
# makefile (from `erlang.mk', line 2049)
pkg_gold_fever_repo = https://github.com/inaka/gold_fever
# makefile (from `erlang.mk', line 2213)
pkg_iris_name = iris
# makefile (from `erlang.mk', line 3282)
pkg_rack_commit = master
# makefile (from `erlang.mk', line 2258)
pkg_jiffy_commit = master
# makefile (from `erlang.mk', line 3417)
pkg_rfc4627_jsonrpc_repo = https://github.com/tonyg/erlang-rfc4627
# makefile (from `erlang.mk', line 1281)
pkg_entop_repo = https://github.com/mazenharake/entop
# makefile (from `erlang.mk', line 3913)
pkg_ticktick_repo = https://github.com/ericliang/ticktick
# makefile (from `erlang.mk', line 4165)
pkg_worker_pool_name = worker_pool
# makefile (from `erlang.mk', line 830)
pkg_cloudi_service_tcp_description = TCP CloudI Service
# makefile (from `erlang.mk', line 2344)
pkg_kafka_fetch = git
# makefile (from `erlang.mk', line 1321)
pkg_eplot_repo = https://github.com/psyeugenic/eplot
# makefile (from `erlang.mk', line 2408)
pkg_kjell_fetch = git
# makefile (from `erlang.mk', line 2458)
pkg_lager_commit = master
# makefile (from `erlang.mk', line 2976)
pkg_opencouch_fetch = git
# makefile (from `Makefile', line 3)
PROJECT_VERSION = 0.1.0
# makefile (from `erlang.mk', line 1006)
pkg_dh_date_description = Date formatting / parsing library for erlang
# makefile (from `erlang.mk', line 2002)
pkg_geode_commit = master
# makefile (from `erlang.mk', line 5041)
dep_fetch_fail = 	echo "Error: Unknown or invalid dependency: $(1)." >&2; exit 78;
# makefile (from `erlang.mk', line 2162)
pkg_i18n_commit = master
# makefile (from `erlang.mk', line 2367)
pkg_katja_homepage = https://github.com/nifoc/katja
# makefile (from `erlang.mk', line 2013)
pkg_gettext_name = gettext
# makefile (from `erlang.mk', line 3407)
pkg_restc_homepage = https://github.com/kivra/restclient
# makefile (from `erlang.mk', line 2798)
pkg_mu2_description = Erlang mutation testing tool
# makefile (from `erlang.mk', line 824)
pkg_cloudi_service_router_fetch = git
# makefile (from `erlang.mk', line 1525)
pkg_erlog_name = erlog
# makefile (from `erlang.mk', line 2926)
pkg_nprocreg_description = Minimal Distributed Erlang Process Registry
# makefile (from `erlang.mk', line 3713)
pkg_spapi_router_repo = https://github.com/spilgames/spapi-router
# makefile (from `erlang.mk', line 5181)
xyrl_verbose_2 = set -x;
# makefile (from `erlang.mk', line 3743)
pkg_stable_homepage = https://github.com/dvv/stable
# makefile (from `erlang.mk', line 1186)
pkg_ej_commit = master
# makefile (from `erlang.mk', line 4206)
pkg_yamerl_description = YAML 1.2 parser in pure Erlang
# makefile (from `erlang.mk', line 7619)
SHELL_PATHS = $(CURDIR)/ebin $(TEST_DIR)
# makefile (from `erlang.mk', line 2041)
pkg_gitty_repo = https://github.com/maxlapshin/gitty
# makefile (from `erlang.mk', line 1409)
pkg_erlang_term_repo = https://github.com/okeuday/erlang_term
# makefile (from `erlang.mk', line 6290)
LDFLAGS = -arch x86_64 -flat_namespace -undefined suppress
# makefile (from `erlang.mk', line 4214)
pkg_yamler_description = libyaml-based yaml loader for Erlang
# makefile (from `erlang.mk', line 1679)
pkg_etest_http_homepage = https://github.com/wooga/etest_http
# makefile (from `erlang.mk', line 1173)
pkg_ehsa_name = ehsa
# makefile (from `erlang.mk', line 359)
pkg_alog_homepage = https://github.com/siberian-fast-food/alogger
# makefile (from `erlang.mk', line 3657)
pkg_simple_bridge_repo = https://github.com/nitrogen/simple_bridge
 
# makefile (from `erlang.mk', line 1373)
pkg_erlang_cep_name = erlang_cep
# makefile (from `erlang.mk', line 2418)
pkg_kraken_commit = master
# makefile (from `erlang.mk', line 2465)
pkg_lager_amqp_backend_repo = https://github.com/jbrisbin/lager_amqp_backend
# makefile (from `erlang.mk', line 5547)
TEST_ERLC_OPTS = +debug_info +warn_export_vars +warn_shadow_vars +warn_obsolete_guard -DTEST=1
# makefile (from `erlang.mk', line 1960)
pkg_gen_paxos_fetch = git
# makefile (from `erlang.mk', line 4264)
pkg_zlists_fetch = git
# makefile (from `erlang.mk', line 2967)
pkg_of_protocol_homepage = https://github.com/FlowForwarding/of_protocol
# makefile (from `erlang.mk', line 1534)
pkg_erlpass_description = A library to handle password hashing and changing in a safe manner, independent from any kind of storage whatsoever.
# makefile (from `erlang.mk', line 3718)
pkg_sqerl_description = An Erlang-flavoured SQL DSL
# makefile (from `erlang.mk', line 2935)
pkg_oauth_homepage = https://github.com/tim/erlang-oauth
# makefile (from `erlang.mk', line 5053)
define dep_target
$(DEPS_DIR)/$(call dep_name,$1): | $(ERLANG_MK_TMP)
	$(eval DEP_NAME := $(call dep_name,$1))
	$(eval DEP_STR := $(if $(filter $1,$(DEP_NAME)),$1,"$1 ($(DEP_NAME))"))
	$(verbose) if test -d $(APPS_DIR)/$(DEP_NAME); then echo "Error: Dependency" $(DEP_STR) "conflicts with application found in $(APPS_DIR)/$(DEP_NAME)." >&2; exit 17; fi
	$(verbose) mkdir -p $(DEPS_DIR)
	$(dep_verbose) $(call dep_fetch_$(strip $(call dep_fetch,$(1))),$(1))
	$(verbose) if [ -f $(DEPS_DIR)/$(1)/configure.ac -o -f $(DEPS_DIR)/$(1)/configure.in ] && [ ! -f $(DEPS_DIR)/$(1)/configure ]; then echo " AUTO  " $(DEP_STR); cd $(DEPS_DIR)/$(1) && autoreconf -Wall -vif -I m4; fi
	- $(verbose) if [ -f $(DEPS_DIR)/$(DEP_NAME)/configure ]; then echo " CONF  " $(DEP_STR); cd $(DEPS_DIR)/$(DEP_NAME) && ./configure; fi
ifeq ($(filter $(1),$(NO_AUTOPATCH)),)
	$(verbose) $$(MAKE) --no-print-directory autopatch-$(DEP_NAME)
endif

.PHONY: autopatch-$(call dep_name,$1)

autopatch-$(call dep_name,$1)::
	$(verbose) if [ "$(1)" = "amqp_client" -a "$(RABBITMQ_CLIENT_PATCH)" ]; then if [ ! -d $(DEPS_DIR)/rabbitmq-codegen ]; then echo " PATCH  Downloading rabbitmq-codegen"; git clone https://github.com/rabbitmq/rabbitmq-codegen.git $(DEPS_DIR)/rabbitmq-codegen; fi; if [ ! -d $(DEPS_DIR)/rabbitmq-server ]; then echo " PATCH  Downloading rabbitmq-server"; git clone https://github.com/rabbitmq/rabbitmq-server.git $(DEPS_DIR)/rabbitmq-server; fi; ln -s $(DEPS_DIR)/amqp_client/deps/rabbit_common-0.0.0 $(DEPS_DIR)/rabbit_common; elif [ "$(1)" = "rabbit" -a "$(RABBITMQ_SERVER_PATCH)" ]; then if [ ! -d $(DEPS_DIR)/rabbitmq-codegen ]; then echo " PATCH  Downloading rabbitmq-codegen"; git clone https://github.com/rabbitmq/rabbitmq-codegen.git $(DEPS_DIR)/rabbitmq-codegen; fi elif [ "$1" = "elixir" -a "$(ELIXIR_PATCH)" ]; then ln -s lib/elixir/ebin $(DEPS_DIR)/elixir/; else $$(call dep_autopatch,$(call dep_name,$1)) fi
endef
# makefile (from `erlang.mk', line 3184)
pkg_proper_fetch = git
# makefile (from `erlang.mk', line 7014)
PACKAGES = aberth active actordb_core actordb_thrift aleppo alog amqp_client annotations antidote apns asciideck azdht backoff barrel_tcp basho_bench bcrypt beam beanstalk bear bertconf bifrost binpp bisect bitcask bitstore bootstrap boss boss_db brod bson bullet cache cake carotene cberl cecho cferl chaos_monkey check_node chronos chumak cl clique cloudi_core cloudi_service_api_requests cloudi_service_db cloudi_service_db_cassandra cloudi_service_db_cassandra_cql cloudi_service_db_couchdb cloudi_service_db_elasticsearch cloudi_service_db_memcached cloudi_service_db_mysql cloudi_service_db_pgsql cloudi_service_db_riak cloudi_service_db_tokyotyrant cloudi_service_filesystem cloudi_service_http_client cloudi_service_http_cowboy cloudi_service_http_elli cloudi_service_map_reduce cloudi_service_oauth1 cloudi_service_queue cloudi_service_quorum cloudi_service_router cloudi_service_tcp cloudi_service_timers cloudi_service_udp cloudi_service_validate cloudi_service_zeromq cluster_info color confetti couchbeam covertool cowboy cowdb cowlib cpg cqerl cr cuttlefish damocles debbie decimal detergent detest dh_date dirbusterl dispcount dlhttpc dns dnssd dynamic_compile e2 eamf eavro ecapnp econfig edate edgar edis edns edown eep eep_app efene egeoip ehsa ej ejabberd ejwt ekaf elarm eleveldb elixir elli elvis emagick emysql enm entop epcap eper epgsql episcina eplot epocxy epubnub eqm eredis eredis_pool erl_streams erlang_cep erlang_js erlang_localtime erlang_smtp erlang_term erlastic_search erlasticsearch erlbrake erlcloud erlcron erldb erldis erldns erldocker erlfsmon erlgit erlguten erlmc erlmongo erlog erlpass erlport erlsh erlsha2 erlsom erlubi erlvolt erlware_commons erlydtl errd erserve erwa escalus esh_mk espec estatsd etap etest etest_http etoml eunit eunit_formatters euthanasia evum exec exml exometer exs1024 exs64 exsplus116 exsplus128 ezmq ezmtp fast_disk_log feeder find_crate fix flower fn folsom folsom_cowboy folsomite fs fuse gcm gcprof geas geef gen_coap gen_cycle gen_icmp gen_leader gen_nb_server gen_paxos gen_rpc gen_smtp gen_tracker gen_unix geode getopt gettext giallo gin gitty gold_fever gpb gproc grapherl grpc grpc_client gun gut hackney hamcrest hanoidb hottub hpack hyper i18n ibrowse idna ierlang iota irc_lib ircd iris iso8601 jamdb_sybase jerg jesse jiffy jiffy_v jobs joxa json json_rec jsone jsonerl jsonpath jsonx jsx kafka kafka_protocol kai katja kdht key2value keys1value kinetic kjell kraken kucumberl kvc kvlists kvs lager lager_amqp_backend lager_syslog lambdapad lasp lasse ldap lethink lfe ling live lmq locker locks log4erl lol lucid luerl luwak lux machi mad marina mavg mc_erl mcd mcerlang meck mekao memo merge_index merl mimerl mimetypes mixer mochiweb mochiweb_xpath mockgyver modlib mongodb mongooseim moyo msgpack mu2 mustache myproto mysql n2o nat_upnp neo4j neotoma newrelic nifty nitrogen_core nkbase nkdocker nkpacket nksip nodefinder nprocreg oauth oauth2 observer_cli octopus of_protocol opencouch openflow openid openpoker otpbp pal parse_trans parsexml partisan pegjs percept2 pgo pgsql pkgx pkt plain_fsm plumtree pmod_transform pobox ponos poolboy pooler pqueue procket prometheus prop proper props protobuffs psycho purity push_service qdate qrcode quest quickrand rabbit rabbit_exchange_type_riak rack radierl rafter ranch rbeacon rebar rebus rec2json recon record_info redgrid redo reload_mk reltool_util relx resource_discovery restc rfc4627_jsonrpc riak_control riak_core riak_dt riak_ensemble riak_kv riak_pg riak_pipe riak_sysmon riak_test riakc riakhttpc riaknostic riakpool rivus_cep rlimit rust_mk safetyvalve seestar service setup sext sfmt sgte sheriff shotgun sidejob sieve sighandler simhash simple_bridge simple_oauth2 skel slack smother snappyer social spapi_router sqerl srly sshrpc stable statebox statebox_riak statman statsderl stdinout_pool stockdb stripe subproc supervisor3 surrogate swab swarm switchboard syn sync syntaxerl syslog taskforce tddreloader tempo ticktick tinymq tinymt tirerl toml traffic_tools trails trane transit trie triq tunctl twerl twitter_erlang ucol_nif unicorn unsplit uuid ux vert verx vmq_acl vmq_bridge vmq_graphite vmq_passwd vmq_server vmq_snmp vmq_systree vmstats walrus webmachine websocket_client worker_pool wrangler wsock xhttpc xref_runner yamerl yamler yaws zab_engine zabbix_sender zeta zippers zlists zraft_lib zucchini hex_core
# makefile (from `erlang.mk', line 2578)
pkg_lol_commit = master
# makefile (from `erlang.mk', line 3901)
pkg_tempo_name = tempo
# makefile (from `erlang.mk', line 2278)
pkg_joxa_description = A Modern Lisp for the Erlang VM
# makefile (from `erlang.mk', line 2174)
pkg_idna_description = Erlang IDNA lib
# makefile (from `erlang.mk', line 2061)
pkg_gproc_name = gproc
# makefile (from `erlang.mk', line 945)
pkg_cqerl_repo = https://github.com/matehat/cqerl
# makefile (from `erlang.mk', line 4111)
pkg_vmq_server_homepage = https://verne.mq/
# makefile (from `erlang.mk', line 4371)
query_repo_git-submodule = -
# makefile (from `erlang.mk', line 466)
pkg_bear_commit = master
# makefile (from `erlang.mk', line 1854)
 
pkg_folsom_cowboy_description = A Cowboy based Folsom HTTP Wrapper.
# makefile (from `erlang.mk', line 538)
pkg_boss_db_commit = master
# makefile (from `erlang.mk', line 1665)
pkg_etap_repo = https://github.com/ngerakines/etap
# makefile (from `erlang.mk', line 490)
pkg_binpp_commit = master
# makefile (from `erlang.mk', line 1801)
pkg_fast_disk_log_repo = https://github.com/lpgauth/fast_disk_log
# makefile (from `erlang.mk', line 1303)
pkg_epgsql_homepage = https://github.com/epgsql/epgsql
# makefile (from `erlang.mk', line 5130)
ERLANG_MK_RECURSIVE_DOC_DEPS_LIST = $(ERLANG_MK_TMP)/recursive-doc-deps-list.log
# makefile (from `erlang.mk', line 3550)
pkg_safetyvalve_description = A safety valve for your erlang node
# makefile (from `erlang.mk', line 829)
pkg_cloudi_service_tcp_name = cloudi_service_tcp
# makefile (from `erlang.mk', line 2817)
pkg_myproto_repo = https://github.com/altenwald/myproto
# makefile (from `erlang.mk', line 598)
pkg_cecho_description = An ncurses library for Erlang
# makefile (from `erlang.mk', line 2232)
pkg_jamdb_sybase_fetch = git
# makefile (from `erlang.mk', line 3201)
pkg_protobuffs_repo = https://github.com/basho/erlang_protobuffs
# makefile (from `erlang.mk', line 1806)
pkg_feeder_description = Stream parse RSS and Atom formatted XML feeds.
# makefile (from `erlang.mk', line 1912)
pkg_geef_fetch = git
# makefile (from `erlang.mk', line 1005)
pkg_dh_date_name = dh_date
# makefile (from `erlang.mk', line 4623)
dep_autopatch_rebar = 	if [ -f $(DEPS_DIR)/$(1)/Makefile ]; then mv $(DEPS_DIR)/$(1)/Makefile $(DEPS_DIR)/$(1)/Makefile.orig.mk; fi; $(call erlang,$(call dep_autopatch_rebar.erl,$(1))); rm -f $(DEPS_DIR)/$(1)/ebin/$(1).app
# makefile (from `erlang.mk', line 583)
pkg_carotene_homepage = https://github.com/carotene/carotene
# makefile (from `erlang.mk', line 1255)
pkg_emagick_homepage = https://github.com/kivra/emagick
# makefile (from `erlang.mk', line 3953)
pkg_traffic_tools_repo = https://github.com/systra/traffic_tools
# makefile (from `erlang.mk', line 2913)
pkg_nksip_repo = https://github.com/kalta/nksip
# makefile (from `erlang.mk', line 3349)
pkg_record_info_name = record_info
# makefile (from `erlang.mk', line 3721)
pkg_sqerl_repo = https://github.com/hairyhum/sqerl
# makefile (from `erlang.mk', line 470)
pkg_bertconf_description = Make ETS tables out of statc BERT files that are auto-reloaded
# makefile (from `erlang.mk', line 704)
pkg_cloudi_service_db_couchdb_fetch = git
# makefile (from `erlang.mk', line 3024)
pkg_parse_trans_fetch = git
# makefile (from `erlang.mk', line 4249)
pkg_zeta_repo = https://github.com/s1n4/zeta
# makefile (from `erlang.mk', line 990)
pkg_detergent_description = An emulsifying Erlang SOAP library
# makefile (from `erlang.mk', line 2336)
pkg_jsx_fetch = git
# makefile (from `erlang.mk', line 1544)
pkg_erlport_fetch = git
# makefile (from `erlang.mk', line 3872)
pkg_syntaxerl_fetch = git
# makefile (from `erlang.mk', line 3069)
pkg_pgsql_name = pgsql
# makefile (from `erlang.mk', line 1906)
pkg_geas_commit = master
# makefile (from `erlang.mk', line 6732)
DIALYZER_OPTS = -Werror_handling -Wunmatched_returns 
# makefile (from `erlang.mk', line 592)
pkg_cberl_fetch = git
# makefile (from `erlang.mk', line 6902)
ESCRIPT_NAME = $(PROJECT)
# makefile (from `erlang.mk', line 1015)
pkg_dirbusterl_homepage = https://github.com/silentsignal/DirBustErl
# makefile (from `erlang.mk', line 1126)
pkg_edns_description = Erlang/OTP DNS server
# makefile (from `erlang.mk', line 655)
pkg_clique_homepage = https://github.com/basho/clique
# makefile (from `erlang.mk', line 527)
pkg_boss_homepage = https://github.com/ChicagoBoss/ChicagoBoss
# makefile (from `erlang.mk', line 1448)
pkg_erlcron_fetch = git
# makefile (from `erlang.mk', line 2823)
pkg_mysql_homepage = https://github.com/mysql-otp/mysql-otp
# makefile (from `erlang.mk', line 3334)
pkg_rec2json_description = Compile erlang record definitions into modules to convert them to/from json easily.
# makefile (from `erlang.mk', line 4073)
pkg_verx_repo = https://github.com/msantos/verx
# makefile (from `erlang.mk', line 5847)
define bs_vm_args
-name $p@127.0.0.1
-setcookie $p
-heart
endef
# makefile (from `erlang.mk', line 393)
pkg_apns_repo = https://github.com/inaka/apns4erl
# makefile (from `erlang.mk', line 2841)
pkg_nat_upnp_repo = https://github.com/benoitc/nat_upnp
# makefile (from `erlang.mk', line 2105)
pkg_gut_repo = https://github.com/unbalancedparentheses/gut
# makefile (from `erlang.mk', line 1533)
pkg_erlpass_name = erlpass
# makefile (from `erlang.mk', line 2413)
pkg_kraken_name = kraken
# makefile (from `erlang.mk', line 2806)
pkg_mustache_description = Mustache template engine for Erlang.
# makefile (from `erlang.mk', line 4186)
pkg_wsock_commit = master
# makefile (from `erlang.mk', line 6270)
C_SRC_OUTPUT_SHARED_EXTENSION = .so
# makefile (from `erlang.mk', line 1895)
pkg_gcprof_homepage = https://github.com/knutin/gcprof
# makefile (from `erlang.mk', line 7100)
HEX_TARBALL_FILES = $(wildcard early-plugins.mk) $(wildcard ebin/$(PROJECT).app) $(wildcard ebin/$(PROJECT).appup) $(wildcard $(notdir $(ERLANG_MK_FILENAME))) $(sort $(call core_find,include/,*.hrl)) $(wildcard LICENSE*) $(wildcard Makefile) $(wildcard plugins.mk) $(sort $(call core_find,priv/,*)) $(wildcard README*) $(wildcard rebar.config) $(sort $(call core_find,src/,*))
# makefile (from `erlang.mk', line 2173)
pkg_idna_name = idna
# makefile (from `erlang.mk', line 3975)
pkg_transit_homepage = https://github.com/isaiah/transit-erlang
# makefile (from `erlang.mk', line 3264)
pkg_rabbit_fetch = git
# makefile (from `erlang.mk', line 4248)
pkg_zeta_fetch = git
# makefile (from `erlang.mk', line 3927)
pkg_tinymt_homepage = https://github.com/jj1bdx/tinymt-erlang
# makefile (from `erlang.mk', line 1998)
pkg_geode_description = geohash/proximity lookup in pure, uncut erlang.
# makefile (from `erlang.mk', line 173)
erlang = $(ERL) $2 -pz $(ERLANG_MK_TMP)/rebar/ebin -eval "$(subst $(newline),,$(call escape_dquotes,$1))" -- erlang.mk
# makefile (from `erlang.mk', line 1853)
pkg_folsom_cowboy_name = folsom_cowboy
# makefile (from `erlang.mk', line 6731)
DIALYZER_DIRS = --src -r $(wildcard src) $(ALL_APPS_DIRS)
# makefile (from `erlang.mk', line 1454)
pkg_erldb_description = ORM (Object-relational mapping) application implemented in Erlang
# makefile (from `erlang.mk', line 2608)
pkg_lux_fetch = git
# makefile (from `erlang.mk', line 236)
KERL_DIR = $(ERLANG_MK_TMP)/kerl
# makefile (from `erlang.mk', line 4022)
pkg_ucol_nif_description = ICU based collation Erlang module
# makefile (from `erlang.mk', line 2510)
pkg_lethink_description = erlang driver for rethinkdb
# makefile (from `erlang.mk', line 1191)
pkg_ejabberd_homepage = https://github.com/processone/ejabberd
# makefile (from `erlang.mk', line 245)
OTP_GIT = https://github.com/erlang/otp
# environment
MANPATH = /opt/homebrew/share/man::
# makefile (from `erlang.mk', line 597)
pkg_cecho_name = cecho
# makefile (from `erlang.mk', line 5133)
ERLANG_MK_RECURSIVE_SHELL_DEPS_LIST = $(ERLANG_MK_TMP)/recursive-shell-deps-list.log
# makefile (from `erlang.mk', line 1553)
pkg_erlsh_repo = https://github.com/proger/erlsh
# environment
HOME = /Users/alex
# makefile (from `erlang.mk', line 3176)
pkg_prop_fetch = git
# makefile (from `erlang.mk', line 1713)
pkg_euthanasia_repo = https://github.com/doubleyou/euthanasia
# makefile (from `erlang.mk', line 2889)
pkg_nkbase_repo = https://github.com/Nekso/nkbase
# makefile (from `erlang.mk', line 6287)
CC = cc
 
# makefile (from `erlang.mk', line 2494)
pkg_lasse_description = SSE handler for Cowboy
# makefile (from `erlang.mk', line 3544)
pkg_rust_mk_fetch = git
# makefile (from `erlang.mk', line 2246)
pkg_jesse_description = jesse (JSon Schema Erlang) is an implementation of a json schema validator for Erlang.
# makefile (from `erlang.mk', line 1721)
pkg_evum_repo = https://github.com/msantos/evum
# makefile (from `erlang.mk', line 469)
pkg_bertconf_name = bertconf
# makefile (from `erlang.mk', line 2671)
pkg_meck_homepage = https://github.com/eproxus/meck
# makefile (from `erlang.mk', line 3498)
pkg_riakc_commit = master
# makefile (from `erlang.mk', line 989)
pkg_detergent_name = detergent
# makefile (from `erlang.mk', line 3490)
pkg_riak_test_commit = master
# makefile (from `erlang.mk', line 3753)
pkg_statebox_repo = https://github.com/mochi/statebox
# makefile (from `erlang.mk', line 498)
pkg_bisect_commit = master
# makefile (from `erlang.mk', line 1608)
pkg_errd_fetch = git
# makefile (from `erlang.mk', line 3303)
pkg_ranch_homepage = http://ninenines.eu
# makefile (from `erlang.mk', line 1390)
pkg_erlang_localtime_description = Erlang library for conversion from one local time to another
# makefile (from `erlang.mk', line 3944)
pkg_toml_fetch = git
# makefile (from `erlang.mk', line 4144)
pkg_walrus_fetch = git
# makefile (from `erlang.mk', line 1125)
pkg_edns_name = edns
# makefile (from `erlang.mk', line 701)
pkg_cloudi_service_db_couchdb_name = cloudi_service_db_couchdb
# makefile (from `erlang.mk', line 2126)
pkg_hanoidb_description = Erlang LSM BTree Storage
# makefile (from `erlang.mk', line 7019)
pkg_hex_core_repo = $(HEX_CORE_GIT)
# makefile (from `erlang.mk', line 1761)
pkg_exs64_repo = https://github.com/jj1bdx/exs64
# makefile (from `erlang.mk', line 1744)
pkg_exometer_fetch = git
# makefile (from `erlang.mk', line 4238)
pkg_zabbix_sender_description = Zabbix trapper for sending data to Zabbix in pure Erlang
# makefile (from `erlang.mk', line 5029)
dep_fetch_ln = 	ln -s $(call dep_repo,$(1)) $(DEPS_DIR)/$(call dep_name,$(1));
# makefile (from `erlang.mk', line 4270)
pkg_zraft_lib_description = Erlang raft consensus protocol implementation
# makefile (from `erlang.mk', line 809)
pkg_cloudi_service_queue_repo = https://github.com/CloudI/cloudi_service_queue
# makefile (from `erlang.mk', line 2650)
pkg_mc_erl_commit = master
# makefile (from `erlang.mk', line 4257)
pkg_zippers_repo = https://github.com/ferd/zippers
# makefile (from `erlang.mk', line 1143)
pkg_eep_homepage = https://github.com/virtan/eep
# makefile (from `erlang.mk', line 1888)
pkg_gcm_fetch = git
# makefile (from `erlang.mk', line 1922)
pkg_gen_coap_commit = master
# makefile (from `erlang.mk', line 863)
pkg_cloudi_service_zeromq_homepage = http://cloudi.org/
# makefile (from `erlang.mk', line 1328)
pkg_epocxy_fetch = git
# makefile (from `erlang.mk', line 2089)
pkg_grpc_client_repo = https://github.com/Bluehouse-Technology/grpc_client
# makefile (from `erlang.mk', line 1438)
pkg_erlcloud_description = Cloud Computing library for erlang (Amazon EC2, S3, SQS, SimpleDB, Mechanical Turk, ELB)
# makefile (from `erlang.mk', line 1090)
pkg_ecapnp_commit = master
# makefile (from `erlang.mk', line 4088)
pkg_vmq_bridge_fetch = git
# makefile (from `erlang.mk', line 906)
pkg_covertool_commit = master
# makefile (from `erlang.mk', line 776)
pkg_cloudi_service_http_cowboy_fetch = git
# makefile (from `erlang.mk', line 1650)
pkg_espec_commit = master
# makefile (from `erlang.mk', line 3977)
pkg_transit_repo = https://github.com/isaiah/transit-erlang
# makefile (from `erlang.mk', line 3190)
pkg_props_description = Property structure library
# makefile (from `erlang.mk', line 3848)
pkg_switchboard_fetch = git
# makefile (from `erlang.mk', line 3210)
pkg_psycho_commit = master
# makefile (from `erlang.mk', line 3038)
pkg_partisan_description = High-performance, high-scalability distributed computing with Erlang and Elixir.
# makefile (from `erlang.mk', line 1374)
pkg_erlang_cep_description = A basic CEP package written in erlang
# makefile (from `erlang.mk', line 7820)
XREF_EXTRA_DIRS = 
# makefile (from `erlang.mk', line 1920)
pkg_gen_coap_fetch = git
# makefile (from `erlang.mk', line 2618)
pkg_machi_commit = master
# makefile (from `erlang.mk', line 2641)
pkg_mavg_repo = https://github.com/EchoTeam/mavg
# makefile (from `erlang.mk', line 4049)
pkg_uuid_repo = https://github.com/okeuday/uuid
# makefile (from `erlang.mk', line 929)
pkg_cowlib_repo = https://github.com/ninenines/cowlib
# makefile (from `erlang.mk', line 4128)
pkg_vmq_systree_fetch = git
# makefile (from `erlang.mk', line 2745)
pkg_mochiweb_xpath_repo = https://github.com/retnuh/mochiweb_xpath
# makefile (from `erlang.mk', line 2776)
pkg_mongooseim_fetch = git
# makefile (from `erlang.mk', line 4234)
pkg_zab_engine_commit = master
# makefile (from `erlang.mk', line 2997)
pkg_openpoker_name = openpoker
# makefile (from `erlang.mk', line 4133)
pkg_vmstats_name = vmstats
# makefile (from `erlang.mk', line 7413)
proto_verbose = $(proto_verbose_$(V))
# makefile (from `erlang.mk', line 2741)
pkg_mochiweb_xpath_name = mochiweb_xpath
# makefile (from `erlang.mk', line 1786)
pkg_ezmq_commit = master
# makefile (from `erlang.mk', line 1502)
pkg_erlguten_description = ErlGuten is a system for high-quality typesetting, written purely in Erlang.
# makefile (from `erlang.mk', line 1049)
pkg_dnssd_repo = https://github.com/benoitc/dnssd_erlang
# makefile (from `erlang.mk', line 2189)
pkg_iota_name = iota
# makefile (from `erlang.mk', line 3537)
pkg_rlimit_repo = https://github.com/jlouis/rlimit
# makefile (from `erlang.mk', line 1246)
pkg_elvis_description = Erlang Style Reviewer
# makefile (from `erlang.mk', line 3344)
pkg_recon_fetch = git
# makefile (from `erlang.mk', line 894)
pkg_couchbeam_description = Apache CouchDB client in Erlang
# makefile (from `erlang.mk', line 5502)
ALL_DOC_DEPS_DIRS = $(addprefix $(DEPS_DIR)/,$(DOC_DEPS))
# makefile (from `erlang.mk', line 902)
pkg_covertool_description = Tool to convert Erlang cover data files into Cobertura XML reports
# makefile (from `erlang.mk', line 2482)
pkg_lambdapad_commit = master
# makefile (from `erlang.mk', line 55)
gen_verbose_2 = set -x;
# makefile (from `erlang.mk', line 1423)
pkg_erlasticsearch_homepage = https://github.com/dieswaytoofast/erlasticsearch
# makefile (from `erlang.mk', line 890)
pkg_confetti_commit = master
# makefile (from `erlang.mk', line 4443)
dep_verbose_2 = set -x;
# makefile (from `erlang.mk', line 575)
pkg_cake_homepage = https://github.com/darach/cake-erl
# makefile (from `erlang.mk', line 2566)
pkg_log4erl_description = A logger for erlang in the spirit of Log4J.
# makefile (from `erlang.mk', line 1389)
pkg_erlang_localtime_name = erlang_localtime
# makefile (from `erlang.mk', line 3966)
pkg_trane_description = SAX style broken HTML parser in Erlang
# makefile (from `erlang.mk', line 7293)
HEX_DOCS_TARBALL_FILES = $(sort $(call core_find,$(HEX_DOCS_DOC_DIR),*))
# makefile (from `erlang.mk', line 3513)
pkg_riaknostic_repo = https://github.com/basho/riaknostic
# makefile (from `erlang.mk', line 3666)
pkg_simple_oauth2_commit = master
# makefile (from `erlang.mk', line 1570)
pkg_erlsom_commit = master
 
# makefile (from `erlang.mk', line 2125)
pkg_hanoidb_name = hanoidb
# makefile (from `erlang.mk', line 1127)
pkg_edns_homepage = https://github.com/hcvst/erlang-dns
# makefile (from `erlang.mk', line 3952)
pkg_traffic_tools_fetch = git
# makefile (from `erlang.mk', line 3729)
pkg_srly_repo = https://github.com/msantos/srly
# makefile (from `erlang.mk', line 2546)
pkg_lmq_commit = master
# makefile (from `erlang.mk', line 7660)
SPHINX_SOURCE = doc
# makefile (from `erlang.mk', line 1514)
pkg_erlmc_commit = master
# makefile (from `erlang.mk', line 2375)
pkg_kdht_homepage = https://github.com/kevinlynx/kdht
# makefile (from `erlang.mk', line 3258)
pkg_quickrand_commit = master
# makefile (from `erlang.mk', line 1738)
pkg_exml_commit = master
# makefile (from `erlang.mk', line 2663)
pkg_mcerlang_homepage = https://github.com/fredlund/McErlang
# makefile (from `erlang.mk', line 1728)
pkg_exec_fetch = git
# makefile (from `erlang.mk', line 2791)
pkg_msgpack_homepage = https://github.com/msgpack/msgpack-erlang
# makefile (from `erlang.mk', line 6461)
define bs_erl_nif
-module($n).

-export([hello/1]).

-on_load(on_load/0).
on_load() ->
	PrivDir = case code:priv_dir(?MODULE) of
		{error, _} ->
			AppPath = filename:dirname(filename:dirname(code:which(?MODULE))),
			filename:join(AppPath, "priv");
		Path ->
			Path
	end,
	erlang:load_nif(filename:join(PrivDir, atom_to_list(?MODULE)), 0).

hello(_) ->
	erlang:nif_error({not_loaded, ?MODULE}).
endef
# makefile (from `erlang.mk', line 2489)
pkg_lasp_repo = https://github.com/lasp-lang/lasp
# makefile (from `erlang.mk', line 518)
pkg_bootstrap_description = A simple, yet powerful Erlang cluster bootstrapping application.
# makefile (from `erlang.mk', line 2565)
pkg_log4erl_name = log4erl
# makefile (from `erlang.mk', line 4198)
pkg_xref_runner_description = Erlang Xref Runner (inspired in rebar xref)
# makefile (from `erlang.mk', line 3360)
pkg_redgrid_fetch = git
# makefile (from `erlang.mk', line 1290)
pkg_epcap_commit = master
# makefile (from `erlang.mk', line 3151)
pkg_pqueue_homepage = https://github.com/okeuday/pqueue
# makefile (from `erlang.mk', line 2602)
pkg_luwak_commit = master
# makefile (from `erlang.mk', line 695)
pkg_cloudi_service_db_cassandra_cql_homepage = http://cloudi.org/
# makefile (from `erlang.mk', line 2893)
pkg_nkdocker_name = nkdocker
# makefile (from `erlang.mk', line 486)
pkg_binpp_description = Erlang Binary Pretty Printer
# makefile (from `erlang.mk', line 680)
pkg_cloudi_service_db_fetch = git
# makefile (from `erlang.mk', line 4241)
pkg_zabbix_sender_repo = https://github.com/stalkermn/zabbix_sender.git
# makefile (from `erlang.mk', line 2074)
pkg_grapherl_commit = master
# makefile (from `erlang.mk', line 3037)
pkg_partisan_name = partisan
# makefile (from `erlang.mk', line 664)
pkg_cloudi_core_fetch = git
# makefile
.DEFAULT_GOAL := all
# makefile (from `erlang.mk', line 3202)
pkg_protobuffs_commit = master
# makefile (from `erlang.mk', line 5159)
COMPILE_MIB_FIRST_PATHS = $(addprefix mibs/,$(addsuffix .mib,$(COMPILE_MIB_FIRST)))
# makefile (from `erlang.mk', line 2974)
pkg_opencouch_description = A embeddable document oriented database compatible with Apache CouchDB
# makefile (from `erlang.mk', line 2704)
pkg_merl_fetch = git
# makefile (from `erlang.mk', line 2538)
pkg_live_commit = master
# makefile (from `erlang.mk', line 370)
pkg_amqp_client_commit = master
# makefile (from `erlang.mk', line 4242)
pkg_zabbix_sender_commit = master
# makefile (from `erlang.mk', line 3368)
pkg_redo_fetch = git
# makefile (from `erlang.mk', line 2816)
pkg_myproto_fetch = git
# makefile (from `erlang.mk', line 4224)
pkg_yaws_fetch = git
# makefile (from `erlang.mk', line 2430)
pkg_kvc_description = KVC - Key Value Coding for Erlang data structures
# makefile (from `erlang.mk', line 1521)
pkg_erlmongo_repo = https://github.com/SergejJurecko/erlmongo
# makefile (from `erlang.mk', line 1501)
pkg_erlguten_name = erlguten
# makefile (from `erlang.mk', line 746)
pkg_cloudi_service_db_riak_commit = master
# makefile (from `erlang.mk', line 1280)
pkg_entop_fetch = git
# makefile (from `erlang.mk', line 3912)
pkg_ticktick_fetch = git
# makefile (from `erlang.mk', line 1245)
pkg_elvis_name = elvis
# makefile (from `erlang.mk', line 1039)
pkg_dns_homepage = https://github.com/aetrion/dns_erlang
# makefile (from `erlang.mk', line 893)
pkg_couchbeam_name = couchbeam
# makefile (from `erlang.mk', line 4199)
pkg_xref_runner_homepage = https://github.com/inaka/xref_runner
# makefile (from `erlang.mk', line 901)
pkg_covertool_name = covertool
# makefile (from `erlang.mk', line 2207)
pkg_ircd_homepage = https://github.com/tonyg/erlang-ircd
# makefile (from `erlang.mk', line 1592)
pkg_erlware_commons_fetch = git
# makefile (from `erlang.mk', line 3298)
pkg_rafter_commit = master
# makefile (from `erlang.mk', line 4194)
pkg_xhttpc_commit = master
# makefile (from `erlang.mk', line 2886)
pkg_nkbase_description = NkBASE distributed database
# makefile (from `erlang.mk', line 3234)
pkg_qdate_commit = master
# makefile (from `erlang.mk', line 953)
pkg_cr_repo = https://github.com/spawnproc/cr
# makefile (from `erlang.mk', line 1254)
pkg_emagick_description = Wrapper for Graphics/ImageMagick command line tool.
# makefile (from `erlang.mk', line 3122)
pkg_pobox_commit = master
# makefile (from `erlang.mk', line 2898)
pkg_nkdocker_commit = master
# makefile (from `erlang.mk', line 3986)
pkg_trie_commit = master
# makefile (from `erlang.mk', line 1878)
pkg_fuse_description = A Circuit Breaker for Erlang
# makefile (from `erlang.mk', line 2185)
pkg_ierlang_repo = https://github.com/robbielynch/ierlang
# makefile (from `erlang.mk', line 2543)
pkg_lmq_homepage = https://github.com/iij/lmq
# makefile (from `erlang.mk', line 1633)
pkg_escalus_repo = https://github.com/esl/escalus
# makefile (from `erlang.mk', line 1946)
pkg_gen_leader_commit = master
# makefile (from `erlang.mk', line 4162)
pkg_websocket_client_commit = master
# makefile (from `erlang.mk', line 345)
pkg_actordb_thrift_repo = https://github.com/biokoda/actordb_thrift
# makefile (from `erlang.mk', line 1847)
pkg_folsom_homepage = https://github.com/boundary/folsom
# makefile (from `erlang.mk', line 4240)
pkg_zabbix_sender_fetch = git
# makefile (from `erlang.mk', line 4384)
query_version_git = $(call query_version_default,$(1))
# makefile (from `erlang.mk', line 4153)
pkg_webmachine_repo = https://github.com/basho/webmachine
# makefile (from `erlang.mk', line 864)
pkg_cloudi_service_zeromq_fetch = git
# makefile (from `erlang.mk', line 2040)
pkg_gitty_fetch = git
# makefile (from `erlang.mk', line 3887)
pkg_taskforce_homepage = https://github.com/g-andrade/taskforce
# makefile (from `erlang.mk', line 4328)
DEPS_DIR = $(CURDIR)/deps
# makefile (from `erlang.mk', line 1385)
pkg_erlang_js_repo = https://github.com/basho/erlang_js
# makefile (from `erlang.mk', line 2977)
pkg_opencouch_repo = https://github.com/benoitc/opencouch
# makefile (from `erlang.mk', line 3312)
 
pkg_rbeacon_fetch = git
# makefile (from `erlang.mk', line 1974)
pkg_gen_smtp_description = A generic Erlang SMTP server and client that can be extended via callback modules
# default
MAKE_COMMAND := /Library/Developer/CommandLineTools/usr/bin/make
# makefile (from `erlang.mk', line 3656)
pkg_simple_bridge_fetch = git
# makefile (from `erlang.mk', line 517)
pkg_bootstrap_name = bootstrap
# makefile (from `erlang.mk', line 1926)
pkg_gen_cycle_description = Simple, generic OTP behaviour for recurring tasks
# makefile (from `erlang.mk', line 3330)
pkg_rebus_commit = master
# makefile (from `erlang.mk', line 2464)
pkg_lager_amqp_backend_fetch = git
# makefile (from `erlang.mk', line 2296)
pkg_json_rec_fetch = git
# makefile (from `erlang.mk', line 5016)
dep_fetch_hg = 	hg clone -q -U $(call dep_repo,$(1)) $(DEPS_DIR)/$(call dep_name,$(1)); cd $(DEPS_DIR)/$(call dep_name,$(1)) && hg update -q $(call dep_commit,$(1));
# makefile (from `erlang.mk', line 1701)
pkg_eunit_formatters_name = eunit_formatters
# makefile (from `erlang.mk', line 2410)
pkg_kjell_commit = master
# makefile (from `erlang.mk', line 1605)
pkg_errd_name = errd
# makefile (from `erlang.mk', line 1248)
pkg_elvis_fetch = git
# makefile (from `erlang.mk', line 974)
pkg_debbie_description = .DEB Built In Erlang
# makefile (from `erlang.mk', line 233)
KERL := /Users/alex/Desktop/erlang/.erlang.mk/kerl/kerl
# makefile (from `erlang.mk', line 1751)
pkg_exs1024_homepage = https://github.com/jj1bdx/exs1024
# makefile (from `erlang.mk', line 2655)
pkg_mcd_homepage = https://github.com/EchoTeam/mcd
# makefile (from `erlang.mk', line 3162)
pkg_procket_commit = master
# makefile (from `erlang.mk', line 881)
pkg_color_repo = https://github.com/julianduque/erlang-color
# makefile (from `erlang.mk', line 1535)
pkg_erlpass_homepage = https://github.com/ferd/erlpass
# automatic
*F = $(notdir $*)
# makefile (from `erlang.mk', line 4054)
pkg_ux_description = Unicode eXtention for Erlang (Strings, Collation)
# makefile (from `erlang.mk', line 2973)
pkg_opencouch_name = couch
# makefile (from `erlang.mk', line 944)
pkg_cqerl_fetch = git
# makefile (from `erlang.mk', line 3711)
pkg_spapi_router_homepage = https://github.com/spilgames/spapi-router
# environment
VSCODE_IPC_HOOK = /Users/alex/Library/Application Support/Code/1.67.1-main.sock
# makefile (from `erlang.mk', line 3279)
pkg_rack_homepage = https://github.com/erlyvideo/rack
# makefile (from `erlang.mk', line 7659)
SPHINX_BUILD = sphinx-build
# makefile (from `erlang.mk', line 1542)
pkg_erlport_description = ErlPort - connect Erlang to other languages
# makefile (from `erlang.mk', line 920)
pkg_cowdb_fetch = git
# makefile (from `erlang.mk', line 1664)
pkg_etap_fetch = git
# makefile (from `erlang.mk', line 2098)
pkg_gun_commit = master
# makefile (from `erlang.mk', line 1800)
pkg_fast_disk_log_fetch = git
# makefile (from `erlang.mk', line 1078)
pkg_eavro_description = Apache Avro encoder/decoder
# makefile (from `erlang.mk', line 856)
pkg_cloudi_service_validate_fetch = git
# makefile (from `erlang.mk', line 2677)
pkg_mekao_name = mekao
# makefile (from `erlang.mk', line 566)
pkg_cache_description = Erlang in-memory cache
# makefile (from `erlang.mk', line 1135)
pkg_edown_homepage = https://github.com/uwiger/edown
# makefile (from `erlang.mk', line 3106)
pkg_plumtree_commit = master
# makefile (from `erlang.mk', line 5158)
COMPILE_MIB_FIRST = 
# makefile (from `erlang.mk', line 1258)
pkg_emagick_commit = master
# makefile (from `erlang.mk', line 4000)
pkg_tunctl_fetch = git
# makefile (from `erlang.mk', line 7230)
define hex_release_delete.erl
	{ok, _} = application:ensure_all_started(ssl),
	{ok, _} = application:ensure_all_started(inets),
	Config = $(hex_config.erl),
	ConfigF = Config#{api_key => <<"$(strip $1)">>},
	case hex_api_release:delete(ConfigF, <<"$(strip $(PROJECT))">>, <<"$(strip $(PROJECT_VERSION))">>) of
		{ok, {204, _, _}} ->
			io:format("Release $(strip $(PROJECT_VERSION)) deleted~n"),
			halt(0);
		{ok, {Status, _, Errors}} ->
			io:format("Error ~b: ~0p~n", [Status, Errors]),
			halt(85)
	end
endef
# makefile (from `erlang.mk', line 3472)
pkg_riak_pipe_fetch = git
# makefile (from `erlang.mk', line 1109)
pkg_edgar_name = edgar
# makefile (from `erlang.mk', line 3602)
pkg_sgte_commit = master
# makefile (from `erlang.mk', line 577)
pkg_cake_repo = https://github.com/darach/cake-erl
# makefile (from `erlang.mk', line 730)
pkg_cloudi_service_db_mysql_commit = master
# makefile (from `erlang.mk', line 4322)
IGNORE_DEPS = 
# makefile (from `erlang.mk', line 1877)
pkg_fuse_name = fuse
# makefile (from `erlang.mk', line 3143)
pkg_pooler_homepage = https://github.com/seth/pooler
# makefile (from `erlang.mk', line 510)
pkg_bitstore_description = A document based ontology development environment
# makefile (from `erlang.mk', line 2728)
pkg_mixer_fetch = git
# makefile (from `erlang.mk', line 3905)
pkg_tempo_repo = https://github.com/selectel/tempo
# makefile (from `erlang.mk', line 60)
gen_verbose_esc = $(gen_verbose_esc_$(V))
# makefile (from `erlang.mk', line 3957)
pkg_trails_name = trails
# makefile (from `erlang.mk', line 3320)
pkg_rebar_fetch = git
# makefile (from `erlang.mk', line 406)
pkg_azdht_description = Azureus Distributed Hash Table (DHT) in Erlang
# environment
HOMEBREW_PREFIX = /opt/homebrew
# makefile (from `erlang.mk', line 873)
pkg_cluster_info_repo = https://github.com/basho/cluster_info
# makefile (from `erlang.mk', line 2614)
pkg_machi_description = Machi file store
# makefile (from `erlang.mk', line 3968)
pkg_trane_fetch = git
# makefile (from `erlang.mk', line 3583)
pkg_sext_homepage = https://github.com/uwiger/sext
# makefile (from `erlang.mk', line 4386)
query_version_git-submodule = -
# makefile (from `erlang.mk', line 7676)
sphinx_build_1 = $(SPHINX_BUILD) -N
# makefile (from `erlang.mk', line 1032)
pkg_dlhttpc_fetch = git
# makefile (from `erlang.mk', line 1973)
pkg_gen_smtp_name = gen_smtp
# makefile (from `erlang.mk', line 3573)
pkg_setup_name = setup
# makefile (from `erlang.mk', line 2214)
pkg_iris_description = Iris Erlang binding
# makefile (from `erlang.mk', line 2017)
pkg_gettext_repo = https://github.com/etnt/gettext
# makefile (from `erlang.mk', line 1925)
pkg_gen_cycle_name = gen_cycle
# makefile (from `erlang.mk', line 958)
pkg_cuttlefish_description = cuttlefish configuration abstraction
# makefile (from `erlang.mk', line 1529)
pkg_erlog_repo = https://github.com/rvirding/erlog
# automatic
+F = $(notdir $+)
# makefile (from `erlang.mk', line 2840)
pkg_nat_upnp_fetch = git
# makefile (from `erlang.mk', line 562)
pkg_bullet_commit = master
# makefile (from `erlang.mk', line 3738)
pkg_sshrpc_commit = master
# makefile (from `erlang.mk', line 2701)
pkg_merl_name = merl
# makefile (from `erlang.mk', line 3559)
 
pkg_seestar_homepage = https://github.com/iamaleksey/seestar
# makefile (from `erlang.mk', line 626)
pkg_check_node_commit = master
# makefile (from `erlang.mk', line 973)
pkg_debbie_name = debbie
# makefile (from `erlang.mk', line 3461)
pkg_riak_pg_name = riak_pg
# makefile (from `erlang.mk', line 1775)
pkg_exsplus128_homepage = https://github.com/jj1bdx/exsplus128
# makefile (from `erlang.mk', line 3253)
pkg_quickrand_name = quickrand
# makefile (from `erlang.mk', line 4207)
pkg_yamerl_homepage = https://github.com/yakaz/yamerl
# makefile (from `erlang.mk', line 968)
pkg_damocles_fetch = git
# makefile (from `erlang.mk', line 1002)
pkg_detest_commit = master
# makefile (from `erlang.mk', line 1023)
pkg_dispcount_homepage = https://github.com/ferd/dispcount
# makefile (from `erlang.mk', line 1177)
pkg_ehsa_repo = https://bitbucket.org/a12n/ehsa
# makefile (from `erlang.mk', line 2801)
pkg_mu2_repo = https://github.com/ramsay-t/mu2
# makefile (from `erlang.mk', line 1377)
pkg_erlang_cep_repo = https://github.com/danmacklin/erlang_cep
# makefile (from `erlang.mk', line 1768)
pkg_exsplus116_fetch = git
# makefile (from `erlang.mk', line 618)
pkg_chaos_monkey_commit = master
# makefile (from `erlang.mk', line 1541)
pkg_erlport_name = erlport
# makefile (from `erlang.mk', line 543)
pkg_brod_homepage = https://github.com/klarna/brod
# makefile (from `erlang.mk', line 6749)
define filter_opts.erl
	Opts = init:get_plain_arguments(),
	{Filtered, _} = lists:foldl(fun
		(O,                         {Os, true}) -> {[O|Os], false};
		(O = "-D",                  {Os, _})    -> {[O|Os], true};
		(O = [\\$$-, \\$$D, _ | _], {Os, _})    -> {[O|Os], false};
		(O = "-I",                  {Os, _})    -> {[O|Os], true};
		(O = [\\$$-, \\$$I, _ | _], {Os, _})    -> {[O|Os], false};
		(O = "-pa",                 {Os, _})    -> {[O|Os], true};
		(_,                         Acc)        -> Acc
	end, {[], false}, Opts),
	io:format("~s~n", [string:join(lists:reverse(Filtered), " ")]),
	halt().
endef
# makefile (from `erlang.mk', line 3423)
pkg_riak_control_homepage = https://github.com/basho/riak_control
# makefile (from `erlang.mk', line 1841)
pkg_fn_repo = https://github.com/reiddraper/fn
# environment
INFOPATH = /opt/homebrew/share/info:
# makefile (from `erlang.mk', line 2058)
pkg_gpb_commit = master
# makefile (from `erlang.mk', line 3138)
pkg_poolboy_commit = master
# makefile (from `erlang.mk', line 565)
pkg_cache_name = cache
# makefile (from `erlang.mk', line 3386)
pkg_reltool_util_commit = master
# makefile (from `erlang.mk', line 3965)
pkg_trane_name = trane
# makefile (from `erlang.mk', line 1311)
pkg_episcina_homepage = https://github.com/erlware/episcina
# makefile (from `erlang.mk', line 2240)
pkg_jerg_fetch = git
# makefile (from `erlang.mk', line 4071)
pkg_verx_homepage = https://github.com/msantos/verx
# makefile (from `erlang.mk', line 3775)
pkg_statsderl_homepage = https://github.com/lpgauth/statsderl
# makefile (from `erlang.mk', line 2065)
pkg_gproc_repo = https://github.com/uwiger/gproc
# makefile (from `erlang.mk', line 2888)
pkg_nkbase_fetch = git
# makefile (from `erlang.mk', line 1673)
pkg_etest_repo = https://github.com/wooga/etest
# makefile (from `erlang.mk', line 1639)
pkg_esh_mk_homepage = https://github.com/crownedgrouse/esh.mk
# makefile (from `erlang.mk', line 2834)
pkg_n2o_commit = master
# default
MAKEFILES := 
# makefile (from `erlang.mk', line 607)
pkg_cferl_homepage = https://github.com/ddossot/cferl
# makefile (from `erlang.mk', line 1790)
pkg_ezmtp_description = ZMTP protocol in pure Erlang.
# makefile (from `erlang.mk', line 1720)
pkg_evum_fetch = git
# makefile (from `erlang.mk', line 509)
pkg_bitstore_name = bitstore
# makefile (from `erlang.mk', line 3551)
pkg_safetyvalve_homepage = https://github.com/jlouis/safetyvalve
# makefile (from `erlang.mk', line 3669)
pkg_skel_name = skel
# makefile (from `erlang.mk', line 2789)
pkg_msgpack_name = msgpack
# makefile (from `erlang.mk', line 833)
pkg_cloudi_service_tcp_repo = https://github.com/CloudI/cloudi_service_tcp
# makefile (from `erlang.mk', line 815)
pkg_cloudi_service_quorum_homepage = http://cloudi.org/
# makefile (from `erlang.mk', line 2613)
pkg_machi_name = machi
# makefile (from `erlang.mk', line 3824)
pkg_surrogate_fetch = git
# makefile (from `erlang.mk', line 4261)
pkg_zlists_name = zlists
# makefile (from `erlang.mk', line 1009)
pkg_dh_date_repo = https://github.com/daleharvey/dh_date
# makefile (from `erlang.mk', line 2007)
pkg_getopt_homepage = https://github.com/jcomellas/getopt
# makefile (from `erlang.mk', line 1970)
pkg_gen_rpc_commit = master
# makefile (from `erlang.mk', line 2621)
pkg_mad_name = mad
# makefile (from `erlang.mk', line 5164)
app_verbose_2 = set -x;
# makefile (from `erlang.mk', line 2630)
pkg_marina_description = Non-blocking Erlang Cassandra CQL3 client
# makefile (from `erlang.mk', line 3174)
pkg_prop_description = An Erlang code scaffolding and generator system.
# makefile (from `erlang.mk', line 3921)
pkg_tinymq_repo = https://github.com/ChicagoBoss/tinymq
# makefile (from `erlang.mk', line 3353)
pkg_record_info_repo = https://github.com/bipthelin/erlang-record_info
# makefile (from `erlang.mk', line 957)
pkg_cuttlefish_name = cuttlefish
# makefile (from `erlang.mk', line 808)
pkg_cloudi_service_queue_fetch = git
# makefile (from `erlang.mk', line 1201)
pkg_ejwt_repo = https://github.com/artefactop/ejwt
# makefile (from `erlang.mk', line 4381)
_qv = $(if $(query_version_$(2)),$(call query_version_$(2),$(1)),$(call dep_commit,$(1)))
# makefile (from `erlang.mk', line 247)
define kerl_otp_target
$(KERL_INSTALL_DIR)/$(1): $(KERL)
	$(verbose) if [ ! -d $$@ ]; then MAKEFLAGS="$(KERL_MAKEFLAGS)" $(KERL) build git $(OTP_GIT) $(1) $(1); $(KERL) install $(1) $(KERL_INSTALL_DIR)/$(1); fi
endef
# makefile (from `erlang.mk', line 4151)
pkg_webmachine_homepage = https://github.com/basho/webmachine
# makefile (from `erlang.mk', line 1863)
pkg_folsomite_homepage = https://github.com/campanja/folsomite
# makefile (from `erlang.mk', line 3114)
pkg_pmod_transform_commit = master
# makefile (from `erlang.mk', line 4024)
pkg_ucol_nif_fetch = git
# makefile (from `erlang.mk', line 3530)
pkg_rivus_cep_commit = master
# makefile (from `erlang.mk', line 2088)
pkg_grpc_client_fetch = git
# makefile (from `erlang.mk', line 5034)
dep_fetch_hex = 	mkdir -p $(ERLANG_MK_TMP)/hex $(DEPS_DIR)/$1; $(call core_http_get,$(ERLANG_MK_TMP)/hex/$1.tar, https://repo.hex.pm/tarballs/$(if $(word 3,$(dep_$1)),$(word 3,$(dep_$1)),$1)-$(strip $(word 2,$(dep_$1))).tar); tar -xOf $(ERLANG_MK_TMP)/hex/$1.tar contents.tar.gz | tar -C $(DEPS_DIR)/$1 -xzf -;
# makefile (from `erlang.mk', line 5047)
dep_fetch_legacy = 	$(warning WARNING: '$(1)' dependency configuration uses deprecated format.) git clone -q -n -- $(word 1,$(dep_$(1))) $(DEPS_DIR)/$(1); cd $(DEPS_DIR)/$(1) && git checkout -q $(if $(word 2,$(dep_$(1))),$(word 2,$(dep_$(1))),master);
# makefile (from `erlang.mk', line 3945)
pkg_toml_repo = https://github.com/dozzie/toml
# makefile (from `erlang.mk', line 6146)
WS = $(tab)
# makefile (from `erlang.mk', line 2472)
pkg_lager_syslog_fetch = git
# makefile (from `erlang.mk', line 2962)
pkg_octopus_commit = master
# makefile (from `erlang.mk', line 2406)
pkg_kjell_description = Erlang Shell
# makefile (from `erlang.mk', line 686)
pkg_cloudi_service_db_cassandra_description = Cassandra CloudI Service
# makefile (from `erlang.mk', line 2346)
 
pkg_kafka_commit = master
# makefile (from `erlang.mk', line 334)
pkg_actordb_core_description = ActorDB main source
# makefile (from `erlang.mk', line 3166)
pkg_prometheus_description = Prometheus.io client in Erlang
# makefile (from `erlang.mk', line 3693)
pkg_snappyer_name = snappyer
# makefile (from `erlang.mk', line 5188)
mib_verbose_0 = @echo " MIB   " $(filter %.bin %.mib,$(?F));
# makefile (from `erlang.mk', line 2905)
pkg_nkpacket_repo = https://github.com/Nekso/nkpacket
# makefile (from `erlang.mk', line 2266)
pkg_jiffy_v_commit = master
# makefile (from `erlang.mk', line 1537)
pkg_erlpass_repo = https://github.com/ferd/erlpass
# makefile (from `erlang.mk', line 3703)
pkg_social_homepage = https://github.com/dvv/social
# makefile (from `erlang.mk', line 2640)
pkg_mavg_fetch = git
# makefile (from `erlang.mk', line 1464)
pkg_erldis_fetch = git
# makefile (from `erlang.mk', line 928)
pkg_cowlib_fetch = git
# makefile (from `erlang.mk', line 1622)
pkg_erwa_description = A WAMP router and client written in Erlang.
# makefile (from `erlang.mk', line 3770)
pkg_statman_commit = master
# makefile (from `erlang.mk', line 826)
pkg_cloudi_service_router_commit = master
# makefile (from `erlang.mk', line 766)
pkg_cloudi_service_http_client_description = HTTP client CloudI Service
# makefile (from `erlang.mk', line 195)
core_relpath = $(shell perl -e 'use File::Spec; print File::Spec->abs2rel(@ARGV) . "\n"' $1 $2)
# makefile (from `erlang.mk', line 2129)
pkg_hanoidb_repo = https://github.com/krestenkrab/hanoidb
# makefile (from `erlang.mk', line 911)
pkg_cowboy_homepage = http://ninenines.eu
# makefile (from `erlang.mk', line 3398)
pkg_resource_discovery_description = An application used to dynamically discover resources present in an Erlang node cluster.
# makefile (from `erlang.mk', line 1048)
pkg_dnssd_fetch = git
# makefile (from `erlang.mk', line 4014)
pkg_twitter_erlang_description = An Erlang twitter client
# makefile (from `erlang.mk', line 5273)
YRL_ERL_FILES = $(addprefix src/,$(patsubst %.yrl,%.erl,$(notdir $(YRL_FILES))))
# makefile (from `erlang.mk', line 3890)
pkg_taskforce_commit = master
# makefile (from `erlang.mk', line 1857)
pkg_folsom_cowboy_repo = https://github.com/boundary/folsom_cowboy
# makefile (from `erlang.mk', line 1789)
pkg_ezmtp_name = ezmtp
# makefile (from `erlang.mk', line 7618)
SHELL_ERL = erl
# makefile (from `erlang.mk', line 1114)
pkg_edgar_commit = master
# makefile (from `erlang.mk', line 3294)
pkg_rafter_description = An Erlang library application which implements the Raft consensus protocol
# makefile (from `erlang.mk', line 3991)
pkg_triq_homepage = https://triq.gitlab.io
# makefile (from `erlang.mk', line 601)
pkg_cecho_repo = https://github.com/mazenharake/cecho
# makefile (from `erlang.mk', line 7478)
RELX_REL_EXT = 
# makefile (from `erlang.mk', line 1698)
pkg_eunit_commit = master
# makefile (from `erlang.mk', line 2262)
pkg_jiffy_v_description = JSON validation utility
# makefile (from `erlang.mk', line 1809)
pkg_feeder_repo = https://github.com/michaelnisi/feeder
# makefile (from `erlang.mk', line 2551)
pkg_locker_homepage = https://github.com/wooga/locker
# environment
rvm_prefix = /Users/alex
# makefile (from `erlang.mk', line 3880)
pkg_syslog_fetch = git
# makefile (from `erlang.mk', line 4388)
query_version_svn = -
# makefile (from `erlang.mk', line 2857)
pkg_neotoma_repo = https://github.com/seancribbs/neotoma
# makefile (from `erlang.mk', line 1102)
pkg_edate_description = date manipulation library for erlang
# makefile (from `erlang.mk', line 3542)
pkg_rust_mk_description = Build Rust crates in an Erlang application
# makefile (from `erlang.mk', line 1151)
pkg_eep_app_homepage = https://github.com/darach/eep-erl
# makefile (from `erlang.mk', line 473)
pkg_bertconf_repo = https://github.com/ferd/bertconf
# makefile (from `erlang.mk', line 2743)
pkg_mochiweb_xpath_homepage = https://github.com/retnuh/mochiweb_xpath
# makefile (from `erlang.mk', line 993)
pkg_detergent_repo = https://github.com/devinus/detergent
# makefile (from `erlang.mk', line 7842)
define xref.erl
	{ok, Xref} = xref:start([]),
	Scope = [$(call comma_list,$(XREF_SCOPE))],
	AppDirs0 = [$(call comma_list,$(foreach d,$(XREF_EXTRA_APP_DIRS),"$d"))],
	AppDirs1 = case lists:member(otp, Scope) of
		false -> AppDirs0;
		true ->
			RootDir = code:root_dir(),
			AppDirs0 ++ [filename:dirname(P) || P <- code:get_path(), lists:prefix(RootDir, P)]
	end,
	AppDirs2 = case lists:member(deps, Scope) of
		false -> AppDirs1;
		true -> [$(call comma_list,$(foreach d,$(ALL_DEPS_DIRS),"$d"))] ++ AppDirs1
	end,
	AppDirs3 = case lists:member(apps, Scope) of
		false -> AppDirs2;
		true -> [$(call comma_list,$(foreach d,$(ALL_APPS_DIRS),"$d"))] ++ AppDirs2
	end,
	AppDirs = case lists:member(app, Scope) of
		false -> AppDirs3;
		true -> ["../$(notdir $(CURDIR))"|AppDirs3]
	end,
	[{ok, _} = xref:add_application(Xref, AppDir, [{builtins, true}]) || AppDir <- AppDirs],
	ExtraDirs = [$(call comma_list,$(foreach d,$(XREF_EXTRA_DIRS),"$d"))],
	[{ok, _} = xref:add_directory(Xref, ExtraDir, [{builtins, true}]) || ExtraDir <- ExtraDirs],
	ok = xref:set_library_path(Xref, code:get_path() -- (["ebin", "."] ++ AppDirs ++ ExtraDirs)),
	Checks = case {$1, is_list($2)} of
		{check, true} -> $2;
		{check, false} -> [$2];
		{query, _} -> [$2]
	end,
	FinalRes = [begin
		IsInformational = case $1 of
			query -> true;
			check ->
				is_tuple(Check) andalso
					lists:member(element(1, Check),
						[call, use, module_call, module_use, application_call, application_use])
		end,
		{ok, Res0} = case $1 of
			check -> xref:analyze(Xref, Check);
			query -> xref:q(Xref, Check)
		end,
		Res = case IsInformational of
			true -> Res0;
			false ->
				lists:filter(fun(R) ->
					{Mod, InMFA, MFA} = case R of
						{InMFA0 = {M, _, _}, MFA0} -> {M, InMFA0, MFA0};
						{M, _, _} -> {M, R, R}
					end,
					Attrs = try
						Mod:module_info(attributes)
					catch error:undef ->
						[]
					end,
					InlineIgnores = lists:flatten([
						[case V of
							M when is_atom(M) -> {M, '_', '_'};
							{F, A} -> {Mod, F, A};
							_ -> V
						end || V <- Values]
					|| {ignore_xref, Values} <- Attrs]),
					BuiltinIgnores = [
						{eunit_test, wrapper_test_exported_, 0}
					],
					DoCallbackIgnores = case {Check, "$(strip $(XREF_IGNORE_CALLBACKS))"} of
						{exports_not_used, ""} -> true;
						{_, "0"} -> false;
						_ -> true
 
					end,
					CallbackIgnores = case DoCallbackIgnores of
						false -> [];
						true ->
							Behaviors = lists:flatten([
								[BL || {behavior, BL} <- Attrs],
								[BL || {behaviour, BL} <- Attrs]
							]),
							[{Mod, CF, CA} || B <- Behaviors, {CF, CA} <- B:behaviour_info(callbacks)]
					end,
					WideIgnores = if
						is_list($(XREF_IGNORE)) ->
							[if is_atom(I) -> {I, '_', '_'}; true -> I end
								|| I <- $(XREF_IGNORE)];
						true -> [$(XREF_IGNORE)]
					end,
					Ignores = InlineIgnores ++ BuiltinIgnores ++ CallbackIgnores ++ WideIgnores,
					not (lists:member(InMFA, Ignores)
					orelse lists:member(MFA, Ignores)
					orelse lists:member({Mod, '_', '_'}, Ignores))
				end, Res0)
		end,
		case Res of
			[] -> ok;
			_ when IsInformational ->
				case Check of
					{call, {CM, CF, CA}} ->
						io:format("Functions that ~s:~s/~b calls:~n", [CM, CF, CA]);
					{use, {CM, CF, CA}} ->
						io:format("Function ~s:~s/~b is called by:~n", [CM, CF, CA]);
					{module_call, CMod} ->
						io:format("Modules that ~s calls:~n", [CMod]);
					{module_use, CMod} ->
						io:format("Module ~s is used by:~n", [CMod]);
					{application_call, CApp} ->
						io:format("Applications that ~s calls:~n", [CApp]);
					{application_use, CApp} ->
						io:format("Application ~s is used by:~n", [CApp]);
					_ when $1 =:= query ->
						io:format("Query ~s returned:~n", [Check])
				end,
				[case R of
					{{InM, InF, InA}, {M, F, A}} ->
						io:format("- ~s:~s/~b called by ~s:~s/~b~n",
							[M, F, A, InM, InF, InA]);
					{M, F, A} ->
						io:format("- ~s:~s/~b~n", [M, F, A]);
					ModOrApp ->
						io:format("- ~s~n", [ModOrApp])
				end || R <- Res],
				ok;
			_ ->
				[case {Check, R} of
					{undefined_function_calls, {{InM, InF, InA}, {M, F, A}}} ->
						io:format("Undefined function ~s:~s/~b called by ~s:~s/~b~n",
							[M, F, A, InM, InF, InA]);
					{undefined_functions, {M, F, A}} ->
						io:format("Undefined function ~s:~s/~b~n", [M, F, A]);
					{locals_not_used, {M, F, A}} ->
						io:format("Unused local function ~s:~s/~b~n", [M, F, A]);
					{exports_not_used, {M, F, A}} ->
						io:format("Unused exported function ~s:~s/~b~n", [M, F, A]);
					{deprecated_function_calls, {{InM, InF, InA}, {M, F, A}}} ->
						io:format("Deprecated function ~s:~s/~b called by ~s:~s/~b~n",
							[M, F, A, InM, InF, InA]);
					{deprecated_functions, {M, F, A}} ->
						io:format("Deprecated function ~s:~s/~b~n", [M, F, A]);
					_ ->
						io:format("~p: ~p~n", [Check, R])
				end || R <- Res],
				error
		end
	end || Check <- Checks],
	stopped = xref:stop(Xref),
	case lists:usort(FinalRes) of
		[ok] -> halt(0);
		_ -> halt(1)
	end
endef
# makefile (from `erlang.mk', line 3310)
pkg_rbeacon_description = LAN discovery and presence in Erlang.
# makefile (from `erlang.mk', line 3439)
pkg_riak_dt_homepage = https://github.com/basho/riak_dt
# makefile (from `erlang.mk', line 7164)
hex_tar_verbose_0 = @echo " TAR    $(notdir $(ERLANG_MK_TMP))/$(@F)";
# makefile (from `erlang.mk', line 8342)
define query_target
$(1): $(2) clean-tmp-query.log
ifeq ($(IS_APP)$(IS_DEP),)
	$(verbose) rm -f $(4)
endif
	$(verbose) $(foreach dep,$(3), echo $(PROJECT): $(foreach q,$(QUERY),$(call query_$(q),$(dep))) >> $(4) ;)
	$(if $(filter-out query-deps,$(1)),, $(verbose) set -e; for dep in $(3) ; do if grep -qs ^$$$$dep$$$$ $(ERLANG_MK_TMP)/query.log; then :; else echo $$$$dep >> $(ERLANG_MK_TMP)/query.log; $(MAKE) -C $(DEPS_DIR)/$$$$dep $$@ QUERY="$(QUERY)" IS_DEP=1 || true; fi done)
ifeq ($(IS_APP)$(IS_DEP),)
	$(verbose) touch $(4)
	$(verbose) cat $(4)
endif
endef
# makefile (from `erlang.mk', line 2488)
pkg_lasp_fetch = git
# makefile (from `erlang.mk', line 2048)
pkg_gold_fever_fetch = git
# makefile (from `erlang.mk', line 5793)
define bs_Makefile
PROJECT = $p
PROJECT_DESCRIPTION = New project
PROJECT_VERSION = 0.1.0
$(if $(SP),
# Whitespace to be used when creating files from templates.
SP = $(SP)
)
endef
# makefile (from `erlang.mk', line 3929)
pkg_tinymt_repo = https://github.com/jj1bdx/tinymt-erlang
# makefile (from `erlang.mk', line 1741)
pkg_exometer_name = exometer
# makefile (from `erlang.mk', line 3216)
pkg_purity_fetch = git
# makefile (from `erlang.mk', line 800)
pkg_cloudi_service_oauth1_fetch = git
# makefile (from `erlang.mk', line 4271)
pkg_zraft_lib_homepage = https://github.com/dreyk/zraft_lib
# makefile (from `erlang.mk', line 685)
pkg_cloudi_service_db_cassandra_name = cloudi_service_db_cassandra
# makefile (from `erlang.mk', line 5148)
ERLC_OPTS = -Werror +debug_info +warn_export_vars +warn_shadow_vars +warn_obsolete_guard 
# makefile (from `erlang.mk', line 1470)
pkg_erldns_description = DNS server, in erlang.
# makefile (from `erlang.mk', line 2234)
pkg_jamdb_sybase_commit = master
# makefile (from `erlang.mk', line 2425)
pkg_kucumberl_repo = https://github.com/openshine/kucumberl
# makefile (from `erlang.mk', line 3589)
pkg_sfmt_name = sfmt
# makefile (from `erlang.mk', line 416)
pkg_backoff_fetch = git
# makefile (from `erlang.mk', line 1914)
pkg_geef_commit = master
# makefile (from `erlang.mk', line 3469)
pkg_riak_pipe_name = riak_pipe
# makefile (from `erlang.mk', line 3914)
pkg_ticktick_commit = master
# makefile (from `erlang.mk', line 1621)
pkg_erwa_name = erwa
# makefile (from `erlang.mk', line 6078)
define tpl_cowboy_ws
-module($(n)).
-behaviour(cowboy_websocket_handler).

-export([init/3]).
-export([websocket_init/3]).
-export([websocket_handle/3]).
-export([websocket_info/3]).
-export([websocket_terminate/3]).

-record(state, {
}).

init(_, _, _) ->
	{upgrade, protocol, cowboy_websocket}.

websocket_init(_, Req, _Opts) ->
	Req2 = cowboy_req:compact(Req),
	{ok, Req2, #state{}}.

websocket_handle({text, Data}, Req, State) ->
	{reply, {text, Data}, Req, State};
websocket_handle({binary, Data}, Req, State) ->
	{reply, {binary, Data}, Req, State};
websocket_handle(_Frame, Req, State) ->
	{ok, Req, State}.

websocket_info(_Info, Req, State) ->
	{ok, Req, State}.

websocket_terminate(_Reason, _Req, _State) ->
	ok.
endef
# makefile (from `erlang.mk', line 2241)
pkg_jerg_repo = https://github.com/ddossot/jerg
# makefile (from `erlang.mk', line 3161)
pkg_procket_repo = https://github.com/msantos/procket
 
# makefile (from `erlang.mk', line 1346)
pkg_eqm_commit = master
# makefile (from `erlang.mk', line 706)
pkg_cloudi_service_db_couchdb_commit = master
# makefile (from `erlang.mk', line 765)
pkg_cloudi_service_http_client_name = cloudi_service_http_client
# makefile (from `erlang.mk', line 1105)
pkg_edate_repo = https://github.com/dweldon/edate
# makefile (from `erlang.mk', line 1520)
pkg_erlmongo_fetch = git
# makefile (from `erlang.mk', line 3397)
pkg_resource_discovery_name = resource_discovery
# makefile (from `erlang.mk', line 5268)
XRL_FILES := 
# makefile (from `erlang.mk', line 3874)
pkg_syntaxerl_commit = master
# makefile (from `erlang.mk', line 4197)
pkg_xref_runner_name = xref_runner
# makefile (from `erlang.mk', line 5167)
appsrc_verbose_0 = @echo " APP   " $(PROJECT).app.src;
# makefile (from `erlang.mk', line 1838)
pkg_fn_description = Function utilities for Erlang
# makefile (from `erlang.mk', line 594)
pkg_cberl_commit = master
# makefile (from `erlang.mk', line 3575)
pkg_setup_homepage = https://github.com/uwiger/setup
# makefile (from `erlang.mk', line 1110)
pkg_edgar_description = Erlang Does GNU AR
# makefile (from `erlang.mk', line 2319)
pkg_jsonpath_homepage = https://github.com/GeneStevens/jsonpath
# makefile (from `erlang.mk', line 2015)
pkg_gettext_homepage = https://github.com/etnt/gettext
# makefile (from `erlang.mk', line 952)
pkg_cr_fetch = git
# makefile (from `erlang.mk', line 5235)
CORE_FILES := 
# makefile (from `erlang.mk', line 4157)
pkg_websocket_client_name = websocket_client
# makefile (from `erlang.mk', line 4596)
dep_autopatch_gen = 	printf "%s\n" "ERLC_OPTS = +debug_info" "include ../../erlang.mk" > $(DEPS_DIR)/$(1)/Makefile
# makefile (from `erlang.mk', line 2261)
pkg_jiffy_v_name = jiffy_v
# makefile (from `erlang.mk', line 3888)
pkg_taskforce_fetch = git
# makefile (from `erlang.mk', line 854)
pkg_cloudi_service_validate_description = CloudI Validate Service
# makefile (from `erlang.mk', line 2184)
pkg_ierlang_fetch = git
# makefile (from `erlang.mk', line 3413)
pkg_rfc4627_jsonrpc_name = rfc4627_jsonrpc
# makefile (from `erlang.mk', line 1632)
pkg_escalus_fetch = git
# makefile (from `erlang.mk', line 392)
pkg_apns_fetch = git
# makefile (from `erlang.mk', line 2193)
pkg_iota_repo = https://github.com/jpgneves/iota
# makefile (from `erlang.mk', line 1101)
pkg_edate_name = edate
# makefile (from `erlang.mk', line 344)
pkg_actordb_thrift_fetch = git
# makefile (from `erlang.mk', line 2050)
pkg_gold_fever_commit = master
# makefile (from `erlang.mk', line 3789)
pkg_stockdb_name = stockdb
# makefile (from `erlang.mk', line 2167)
pkg_ibrowse_homepage = https://github.com/cmullaparthi/ibrowse
# makefile (from `erlang.mk', line 4398)
query_extra_git = -
# makefile (from `erlang.mk', line 1816)
pkg_find_crate_fetch = git
# makefile (from `erlang.mk', line 3818)
pkg_supervisor3_commit = master
# makefile (from `erlang.mk', line 2717)
pkg_mimetypes_name = mimetypes
# makefile (from `erlang.mk', line 3263)
pkg_rabbit_homepage = https://www.rabbitmq.com/
# makefile (from `erlang.mk', line 1384)
pkg_erlang_js_fetch = git
# makefile (from `erlang.mk', line 2711)
pkg_mimerl_homepage = https://github.com/benoitc/mimerl
# makefile (from `erlang.mk', line 6274)
C_SRC_OUTPUT_FILE = $(C_SRC_OUTPUT)$(C_SRC_OUTPUT_SHARED_EXTENSION)
# makefile (from `erlang.mk', line 2872)
pkg_nifty_fetch = git
# makefile (from `erlang.mk', line 1898)
pkg_gcprof_commit = master
# makefile (from `erlang.mk', line 669)
pkg_cloudi_service_api_requests_name = cloudi_service_api_requests
# makefile (from `erlang.mk', line 1472)
pkg_erldns_fetch = git
# makefile (from `erlang.mk', line 2502)
pkg_ldap_description = LDAP server written in Erlang
# makefile (from `erlang.mk', line 1070)
pkg_eamf_description = eAMF provides Action Message Format (AMF) support for Erlang
# makefile (from `erlang.mk', line 5634)
compat_convert_erlc_opts = $(if $(filter-out -Werror,$1), $(if $(findstring +,$1), $(shell echo $1 | cut -b 2-)))
# makefile (from `erlang.mk', line 2359)
pkg_kai_homepage = https://github.com/synrc/kai
# makefile (from `erlang.mk', line 6306)
CFLAGS = -O3 -std=c99 -arch x86_64 -Wall -Wmissing-prototypes -fPIC -I"$(ERTS_INCLUDE_DIR)" -I"$(ERL_INTERFACE_INCLUDE_DIR)"
# makefile (from `erlang.mk', line 967)
pkg_damocles_homepage = https://github.com/lostcolony/damocles
# makefile (from `erlang.mk', line 2906)
pkg_nkpacket_commit = master
# makefile (from `erlang.mk', line 418)
pkg_backoff_commit = master
# makefile (from `erlang.mk', line 1469)
pkg_erldns_name = erldns
# environment
RUBY_VERSION = ruby-3.0.0
# makefile (from `erlang.mk', line 3394)
pkg_relx_commit = main
# makefile (from `erlang.mk', line 2848)
pkg_neo4j_fetch = git
# makefile (from `erlang.mk', line 3178)
pkg_prop_commit = master
# makefile (from `erlang.mk', line 3714)
pkg_spapi_router_commit = master
# makefile (from `erlang.mk', line 880)
pkg_color_fetch = git
# makefile (from `erlang.mk', line 3350)
pkg_record_info_description = Convert between record and proplist
# makefile (from `erlang.mk', line 2733)
pkg_mochiweb_name = mochiweb
# makefile (from `erlang.mk', line 8289)
ERLANG_MK_RECURSIVE_TMP_LIST := /Users/alex/Desktop/erlang/.erlang.mk/recursive-tmp-deps-62842.log
# makefile (from `erlang.mk', line 3546)
pkg_rust_mk_commit = master
# makefile (from `erlang.mk', line 7012)
HEX_CORE_COMMIT = v0.7.0
# makefile (from `erlang.mk', line 1654)
pkg_estatsd_description = Erlang stats aggregation app that periodically flushes data to graphite
# makefile (from `erlang.mk', line 1441)
pkg_erlcloud_repo = https://github.com/gleber/erlcloud
# makefile (from `erlang.mk', line 4113)
pkg_vmq_server_repo = https://github.com/erlio/vmq_server
# makefile (from `erlang.mk', line 4077)
pkg_vmq_acl_name = vmq_acl
# makefile (from `erlang.mk', line 1494)
pkg_erlgit_description = Erlang convenience wrapper around git executable
# makefile (from `erlang.mk', line 1760)
pkg_exs64_fetch = git
# makefile (from `erlang.mk', line 2445)
pkg_kvs_name = kvs
# makefile (from `erlang.mk', line 1871)
pkg_fs_homepage = https://github.com/synrc/fs
# makefile (from `erlang.mk', line 3597)
pkg_sgte_name = sgte
# makefile (from `erlang.mk', line 3369)
pkg_redo_repo = https://github.com/jkvor/redo
# makefile (from `erlang.mk', line 3193)
 
pkg_props_repo = https://github.com/greyarea/props
# makefile (from `erlang.mk', line 3134)
pkg_poolboy_description = A hunky Erlang worker pool factory
# makefile (from `erlang.mk', line 327)
pkg_active_homepage = https://github.com/proger/active
# makefile (from `erlang.mk', line 2517)
pkg_lfe_name = lfe
# makefile (from `erlang.mk', line 2957)
pkg_octopus_name = octopus
# makefile (from `erlang.mk', line 1688)
pkg_etoml_fetch = git
# makefile (from `erlang.mk', line 2685)
pkg_memo_name = memo
# makefile (from `erlang.mk', line 4282)
pkg_zucchini_commit = master
# makefile (from `erlang.mk', line 4370)
query_repo_git-subfolder = $(call query_repo_git,$(1))
# makefile (from `erlang.mk', line 3878)
pkg_syslog_description = Erlang port driver for interacting with syslog via syslog(3)
# makefile (from `erlang.mk', line 2567)
pkg_log4erl_homepage = https://github.com/ahmednawras/log4erl
# environment
VSCODE_LOG_NATIVE = false
# makefile (from `erlang.mk', line 3001)
pkg_openpoker_repo = https://github.com/hpyhacking/openpoker
# makefile (from `erlang.mk', line 4230)
pkg_zab_engine_description = zab propotocol implement by erlang
# makefile (from `erlang.mk', line 4017)
pkg_twitter_erlang_repo = https://github.com/ngerakines/erlang_twitter
# makefile (from `erlang.mk', line 4269)
pkg_zraft_lib_name = zraft_lib
# makefile (from `erlang.mk', line 2509)
pkg_lethink_name = lethink
# makefile (from `erlang.mk', line 1095)
pkg_econfig_homepage = https://github.com/benoitc/econfig
# makefile (from `erlang.mk', line 713)
pkg_cloudi_service_db_elasticsearch_repo = https://github.com/CloudI/cloudi_service_db_elasticsearch
# makefile (from `erlang.mk', line 1505)
pkg_erlguten_repo = https://github.com/richcarl/erlguten
# makefile (from `erlang.mk', line 1749)
pkg_exs1024_name = exs1024
# makefile (from `erlang.mk', line 3238)
pkg_qrcode_description = QR Code encoder in Erlang
# makefile (from `erlang.mk', line 3245)
pkg_quest_name = quest
# makefile (from `erlang.mk', line 1249)
pkg_elvis_repo = https://github.com/inaka/elvis
# makefile (from `erlang.mk', line 1330)
pkg_epocxy_commit = master
# makefile (from `erlang.mk', line 897)
pkg_couchbeam_repo = https://github.com/benoitc/couchbeam
# makefile (from `erlang.mk', line 872)
pkg_cluster_info_fetch = git
# makefile (from `erlang.mk', line 3567)
pkg_service_homepage = http://cloudi.org/
# makefile (from `erlang.mk', line 3218)
pkg_purity_commit = master
# makefile (from `erlang.mk', line 778)
pkg_cloudi_service_http_cowboy_commit = master
# makefile (from `erlang.mk', line 3978)
pkg_transit_commit = master
# makefile (from `erlang.mk', line 2863)
pkg_newrelic_homepage = https://github.com/wooga/newrelic-erlang
# makefile (from `erlang.mk', line 3985)
pkg_trie_repo = https://github.com/okeuday/trie
# makefile (from `erlang.mk', line 3850)
pkg_switchboard_commit = master
# default
MAKE_VERSION := 3.81
# makefile (from `erlang.mk', line 2424)
pkg_kucumberl_fetch = git
# makefile (from `erlang.mk', line 3777)
pkg_statsderl_repo = https://github.com/lpgauth/statsderl
# makefile (from `erlang.mk', line 2501)
pkg_ldap_name = ldap
# makefile (from `erlang.mk', line 1069)
pkg_eamf_name = eamf
# makefile
SHELL = /bin/sh
# makefile (from `erlang.mk', line 2560)
pkg_locks_fetch = git
# makefile (from `erlang.mk', line 1678)
pkg_etest_http_description = etest Assertions around HTTP (client-side)
# makefile (from `erlang.mk', line 241)
KERL_COMMIT = master
# makefile (from `erlang.mk', line 358)
pkg_alog_description = Simply the best logging framework for Erlang
# makefile (from `erlang.mk', line 6850)
DTL_FILES := 
# makefile (from `erlang.mk', line 2925)
pkg_nprocreg_name = nprocreg
# makefile (from `erlang.mk', line 2778)
pkg_mongooseim_commit = master
# makefile (from `erlang.mk', line 3894)
pkg_tddreloader_description = Shell utility for recompiling, reloading, and testing code as it changes
# environment
VSCODE_NLS_CONFIG = {"locale":"en-us","availableLanguages":{},"_languagePackSupport":true}
# makefile (from `erlang.mk', line 2966)
pkg_of_protocol_description = OpenFlow Protocol Library for Erlang
# makefile (from `erlang.mk', line 3994)
pkg_triq_commit = master
# makefile (from `erlang.mk', line 3447)
pkg_riak_ensemble_homepage = https://github.com/basho/riak_ensemble
# makefile (from `erlang.mk', line 4045)
pkg_uuid_name = uuid
# makefile (from `erlang.mk', line 1176)
pkg_ehsa_fetch = hg
# makefile (from `erlang.mk', line 4280)
pkg_zucchini_fetch = git
# makefile (from `erlang.mk', line 319)
pkg_aberth_homepage = https://github.com/a13x/aberth
# makefile (from `erlang.mk', line 1653)
pkg_estatsd_name = estatsd
# makefile (from `erlang.mk', line 423)
pkg_barrel_tcp_homepage = https://github.com/benoitc-attic/barrel_tcp
# makefile (from `erlang.mk', line 1128)
pkg_edns_fetch = git
# makefile (from `erlang.mk', line 1493)
pkg_erlgit_name = erlgit
# makefile (from `erlang.mk', line 629)
pkg_chronos_name = chronos
# makefile (from `erlang.mk', line 4174)
pkg_wrangler_description = Import of the Wrangler svn repository.
# makefile (from `erlang.mk', line 489)
pkg_binpp_repo = https://github.com/jtendo/binpp
# makefile (from `erlang.mk', line 2432)
 
pkg_kvc_fetch = git
# makefile (from `erlang.mk', line 1609)
pkg_errd_repo = https://github.com/archaelus/errd
# makefile (from `erlang.mk', line 4074)
pkg_verx_commit = master
# makefile (from `erlang.mk', line 3194)
pkg_props_commit = master
# makefile (from `erlang.mk', line 8222)
DEP_PLUGINS = 
# makefile (from `erlang.mk', line 3062)
pkg_pgo_description = Erlang Postgres client and connection pool
# makefile (from `erlang.mk', line 4161)
pkg_websocket_client_repo = https://github.com/jeremyong/websocket_client
# makefile (from `erlang.mk', line 650)
pkg_cl_commit = master
# makefile (from `erlang.mk', line 5190)
mib_verbose = $(mib_verbose_$(V))
# makefile (from `erlang.mk', line 1302)
pkg_epgsql_description = Erlang PostgreSQL client library.
# makefile (from `erlang.mk', line 2064)
pkg_gproc_fetch = git
# makefile (from `erlang.mk', line 3954)
pkg_traffic_tools_commit = master
# makefile (from `erlang.mk', line 1407)
pkg_erlang_term_homepage = https://github.com/okeuday/erlang_term
# makefile (from `erlang.mk', line 4281)
pkg_zucchini_repo = https://github.com/devinus/zucchini
# makefile (from `erlang.mk', line 3671)
pkg_skel_homepage = https://github.com/ParaPhrase/skel
# makefile (from `erlang.mk', line 2449)
pkg_kvs_repo = https://github.com/synrc/kvs
# makefile (from `erlang.mk', line 3757)
pkg_statebox_riak_name = statebox_riak
# makefile (from `erlang.mk', line 4222)
pkg_yaws_description = Yaws webserver
# makefile (from `erlang.mk', line 1730)
pkg_exec_commit = master
# makefile (from `erlang.mk', line 582)
pkg_carotene_description = Real-time server
# makefile (from `erlang.mk', line 2681)
pkg_mekao_repo = https://github.com/ddosia/mekao
# makefile (from `erlang.mk', line 832)
pkg_cloudi_service_tcp_fetch = git
# makefile (from `erlang.mk', line 3845)
pkg_switchboard_name = switchboard
# makefile (from `erlang.mk', line 3706)
pkg_social_commit = master
# makefile (from `erlang.mk', line 3650)
pkg_simhash_commit = master
# makefile (from `erlang.mk', line 40)
PROJECT_ENV = []
# makefile (from `erlang.mk', line 3838)
pkg_swarm_description = Fast and simple acceptor pool for Erlang
# makefile (from `erlang.mk', line 1008)
pkg_dh_date_fetch = git
# makefile (from `erlang.mk', line 1257)
pkg_emagick_repo = https://github.com/kivra/emagick
# makefile (from `erlang.mk', line 6989)
EUNIT_EBIN_MODS = $(notdir $(basename $(ERL_FILES) $(BEAM_FILES)))
# makefile (from `erlang.mk', line 2735)
pkg_mochiweb_homepage = https://github.com/mochi/mochiweb
# makefile (from `erlang.mk', line 1881)
pkg_fuse_repo = https://github.com/jlouis/fuse
# makefile (from `erlang.mk', line 1585)
pkg_erlvolt_repo = https://github.com/VoltDB/voltdb-client-erlang
# makefile (from `erlang.mk', line 2702)
pkg_merl_description = Metaprogramming in Erlang
# makefile (from `erlang.mk', line 1014)
pkg_dirbusterl_description = DirBuster successor in Erlang
# makefile (from `erlang.mk', line 5761)
define bs_appsrc
{application, $p, [
	{description, ""},
	{vsn, "0.1.0"},
	{id, "git"},
	{modules, []},
	{registered, []},
	{applications, [
		kernel,
		stdlib
	]},
	{mod, {$p_app, []}},
	{env, []}
]}.
endef
# makefile (from `erlang.mk', line 654)
pkg_clique_description = CLI Framework for Erlang
# makefile (from `erlang.mk', line 2695)
pkg_merge_index_homepage = https://github.com/basho/merge_index
# makefile (from `erlang.mk', line 526)
pkg_boss_description = Erlang web MVC, now featuring Comet
# makefile (from `erlang.mk', line 3254)
pkg_quickrand_description = Quick Erlang Random Number Generation
# makefile (from `erlang.mk', line 1478)
pkg_erldocker_description = Docker Remote API client for Erlang
# makefile (from `erlang.mk', line 1671)
pkg_etest_homepage = https://github.com/wooga/etest
# makefile (from `erlang.mk', line 503)
pkg_bitcask_homepage = https://github.com/basho/bitcask
# makefile (from `erlang.mk', line 2818)
pkg_myproto_commit = master
# makefile (from `erlang.mk', line 4226)
pkg_yaws_commit = master
# makefile (from `erlang.mk', line 3834)
pkg_swab_commit = master
# makefile (from `erlang.mk', line 2965)
pkg_of_protocol_name = of_protocol
# makefile (from `erlang.mk', line 2042)
pkg_gitty_commit = master
# makefile (from `erlang.mk', line 3418)
pkg_rfc4627_jsonrpc_commit = master
# makefile (from `erlang.mk', line 1282)
pkg_entop_commit = master
# makefile (from `erlang.mk', line 1977)
pkg_gen_smtp_repo = https://github.com/Vagabond/gen_smtp
# makefile (from `erlang.mk', line 3577)
pkg_setup_repo = https://github.com/uwiger/setup
# makefile (from `erlang.mk', line 1590)
pkg_erlware_commons_description = Erlware Commons is an Erlware project focused on all aspects of reusable Erlang components.
# makefile (from `erlang.mk', line 2933)
pkg_oauth_name = oauth
# makefile (from `erlang.mk', line 1929)
pkg_gen_cycle_repo = https://github.com/aerosol/gen_cycle
# makefile (from `erlang.mk', line 1322)
pkg_eplot_commit = master
# makefile (from `erlang.mk', line 7586)
 
RELX_REL_CMD := console
# makefile (from `erlang.mk', line 4173)
pkg_wrangler_name = wrangler
# makefile (from `erlang.mk', line 461)
pkg_bear_name = bear
# makefile (from `erlang.mk', line 3974)
pkg_transit_description = transit format for erlang
# makefile (from `erlang.mk', line 1536)
pkg_erlpass_fetch = git
# makefile (from `erlang.mk', line 3489)
pkg_riak_test_repo = https://github.com/basho/riak_test
# makefile (from `erlang.mk', line 1138)
pkg_edown_commit = master
# makefile (from `erlang.mk', line 4109)
pkg_vmq_server_name = vmq_server
# makefile (from `erlang.mk', line 977)
pkg_debbie_repo = https://github.com/crownedgrouse/debbie
# makefile (from `erlang.mk', line 3465)
pkg_riak_pg_repo = https://github.com/cmeiklejohn/riak_pg
# makefile (from `erlang.mk', line 3248)
pkg_quest_fetch = git
# makefile (from `erlang.mk', line 1602)
pkg_erlydtl_commit = master
# makefile (from `erlang.mk', line 5442)
compile_erl = 	$(erlc_verbose) erlc -v $(if $(IS_DEP),$(filter-out -Werror,$(ERLC_OPTS)),$(ERLC_OPTS)) -o ebin/ -pa ebin/ -I include/ $(filter-out $(ERLC_EXCLUDE_PATHS),$(COMPILE_FIRST_PATHS) $(1))
# makefile (from `erlang.mk', line 4289)
define pkg_print
	$(verbose) printf "%s\n" $(if $(call core_eq,$(1),$(pkg_$(1)_name)),,"Pkg name:    $(1)") "App name:    $(pkg_$(1)_name)" "Description: $(pkg_$(1)_description)" "Home page:   $(pkg_$(1)_homepage)" "Fetch with:  $(pkg_$(1)_fetch)" "Repository:  $(pkg_$(1)_repo)" "Commit:      $(pkg_$(1)_commit)" ""

endef
# makefile (from `erlang.mk', line 2176)
pkg_idna_fetch = git
# makefile (from `erlang.mk', line 409)
pkg_azdht_repo = https://github.com/arcusfelis/azdht
# makefile (from `erlang.mk', line 58)
gen_verbose_esc_0 = @echo " GEN   " $$@;
# makefile (from `erlang.mk', line 1074)
pkg_eamf_commit = master
# makefile (from `erlang.mk', line 383)
pkg_antidote_homepage = https://syncfree.lip6.fr/
# makefile (from `erlang.mk', line 4583)
dep_autopatch_erlang_mk = 	for f in Makefile makefile GNUmakefile; do if [ -f $(DEPS_DIR)/$1/$$f ]; then sed -i.bak s/'include *erlang.mk'/'include $$(if $$(ERLANG_MK_FILENAME),$$(ERLANG_MK_FILENAME),erlang.mk)'/ $(DEPS_DIR)/$1/$$f; fi done
# makefile (from `erlang.mk', line 3366)
pkg_redo_description = pipelined erlang redis client
# makefile (from `erlang.mk', line 1545)
pkg_erlport_repo = https://github.com/hdima/erlport
# makefile (from `erlang.mk', line 3553)
pkg_safetyvalve_repo = https://github.com/jlouis/safetyvalve
# makefile (from `erlang.mk', line 1487)
pkg_erlfsmon_homepage = https://github.com/proger/erlfsmon
# makefile (from `erlang.mk', line 6806)
define edoc.erl
	SrcPaths = lists:foldl(fun(P, Acc) ->
		filelib:wildcard(atom_to_list(P) ++ "/{src,c_src}") ++ Acc
	end, [], [$(call comma_list,$(patsubst %,'%',$(call core_native_path,$(EDOC_SRC_DIRS))))]),
	DefaultOpts = [{dir, "$(EDOC_OUTPUT)"}, {source_path, SrcPaths}, {subpackages, false}],
	edoc:application($(1), ".", [$(2)] ++ DefaultOpts),
	halt(0).
endef
# makefile (from `erlang.mk', line 4056)
pkg_ux_fetch = git
# makefile (from `erlang.mk', line 1081)
pkg_eavro_repo = https://github.com/SIfoxDevTeam/eavro
# makefile (from `erlang.mk', line 581)
pkg_carotene_name = carotene
# makefile (from `erlang.mk', line 3658)
pkg_simple_bridge_commit = master
# makefile (from `erlang.mk', line 569)
pkg_cache_repo = https://github.com/fogfish/cache
# makefile (from `erlang.mk', line 1335)
pkg_epubnub_homepage = https://github.com/tsloughter/epubnub
# makefile (from `erlang.mk', line 240)
KERL_GIT = https://github.com/kerl/kerl
# makefile (from `erlang.mk', line 2466)
pkg_lager_amqp_backend_commit = master
# makefile (from `erlang.mk', line 2670)
pkg_meck_description = A mocking library for Erlang
# makefile (from `erlang.mk', line 1808)
pkg_feeder_fetch = git
# environment
VSCODE_IPC_HOOK_EXTHOST = /var/folders/d_/_4bwgw9s7m36zl9fgb99_glw0000gn/T/vscode-ipc-8baf5c34-50d7-45e1-beb2-46153c7ffdbc.sock
# makefile (from `erlang.mk', line 1144)
pkg_eep_fetch = git
# makefile (from `erlang.mk', line 4031)
pkg_unicorn_homepage = https://github.com/shizzard/unicorn
# makefile (from `erlang.mk', line 3519)
pkg_riakpool_homepage = https://github.com/dweldon/riakpool
# makefile (from `erlang.mk', line 59)
gen_verbose_esc_2 = set -x;
# makefile (from `erlang.mk', line 3302)
pkg_ranch_description = Socket acceptor pool for TCP protocols.
# environment
VSCODE_CWD = /
# makefile (from `erlang.mk', line 3391)
pkg_relx_homepage = https://github.com/erlware/relx
# makefile (from `erlang.mk', line 7479)
RELX_TAR = 1
# makefile (from `erlang.mk', line 513)
pkg_bitstore_repo = https://github.com/bdionne/bitstore
# makefile (from `erlang.mk', line 1013)
pkg_dirbusterl_name = dirbusterl
# makefile (from `erlang.mk', line 5165)
app_verbose = $(app_verbose_$(V))
# makefile (from `erlang.mk', line 2438)
pkg_kvlists_description = Lists of key-value pairs (decoded JSON) in Erlang
# makefile (from `erlang.mk', line 992)
pkg_detergent_fetch = git
# makefile (from `erlang.mk', line 525)
pkg_boss_name = boss
# makefile (from `erlang.mk', line 946)
pkg_cqerl_commit = master
# makefile (from `erlang.mk', line 8095)
COVERDATA = $(filter-out $(COVER_DATA_DIR)/all.coverdata,$(wildcard $(COVER_DATA_DIR)/*.coverdata))
# makefile (from `erlang.mk', line 2127)
pkg_hanoidb_homepage = https://github.com/krestenkrab/hanoidb
# makefile (from `erlang.mk', line 2617)
pkg_machi_repo = https://github.com/basho/machi
# makefile (from `erlang.mk', line 3982)
pkg_trie_description = Erlang Trie Implementation
# makefile (from `erlang.mk', line 922)
pkg_cowdb_commit = master
# makefile (from `erlang.mk', line 1666)
pkg_etap_commit = master
# makefile (from `erlang.mk', line 3826)
pkg_surrogate_commit = master
# makefile (from `erlang.mk', line 1802)
pkg_fast_disk_log_commit = master
# makefile (from `erlang.mk', line 3793)
pkg_stockdb_repo = https://github.com/maxlapshin/stockdb
# makefile (from `erlang.mk', line 2625)
pkg_mad_repo = https://github.com/synrc/mad
# makefile (from `erlang.mk', line 3041)
pkg_partisan_repo = https://github.com/lasp-lang/partisan
# makefile (from `erlang.mk', line 2217)
pkg_iris_repo = https://github.com/project-iris/iris-erl
# makefile (from `erlang.mk', line 862)
pkg_cloudi_service_zeromq_description = ZeroMQ CloudI Service
# makefile (from `erlang.mk', line 7795)
XREF_CHECKS = [undefined_function_calls]
# makefile (from `erlang.mk', line 961)
 
pkg_cuttlefish_repo = https://github.com/Kyorai/cuttlefish
# makefile (from `erlang.mk', line 4232)
pkg_zab_engine_fetch = git
# makefile (from `erlang.mk', line 1295)
pkg_eper_homepage = https://github.com/massemanet/eper
# makefile (from `erlang.mk', line 1712)
pkg_euthanasia_fetch = git
# makefile (from `erlang.mk', line 3214)
pkg_purity_description = A side-effect analyzer for Erlang
# makefile (from `erlang.mk', line 5870)
define tpl_gen_server
-module($(n)).
-behaviour(gen_server).

%% API.
-export([start_link/0]).

%% gen_server.
-export([init/1]).
-export([handle_call/3]).
-export([handle_cast/2]).
-export([handle_info/2]).
-export([terminate/2]).
-export([code_change/3]).

-record(state, {
}).

%% API.

-spec start_link() -> {ok, pid()}.
start_link() ->
	gen_server:start_link(?MODULE, [], []).

%% gen_server.

init([]) ->
	{ok, #state{}}.

handle_call(_Request, _From, State) ->
	{reply, ignored, State}.

handle_cast(_Msg, State) ->
	{noreply, State}.

handle_info(_Info, State) ->
	{noreply, State}.

terminate(_Reason, _State) ->
	ok.

code_change(_OldVsn, State, _Extra) ->
	{ok, State}.
endef
# makefile (from `erlang.mk', line 1576)
pkg_erlubi_fetch = git
# makefile (from `erlang.mk', line 1367)
pkg_erl_streams_homepage = https://github.com/epappas/erl_streams
# makefile (from `erlang.mk', line 871)
pkg_cluster_info_homepage = https://github.com/basho/cluster_info
# makefile (from `erlang.mk', line 1510)
pkg_erlmc_description = Erlang memcached binary protocol client
# makefile (from `erlang.mk', line 2865)
pkg_newrelic_repo = https://github.com/wooga/newrelic-erlang
# makefile (from `erlang.mk', line 4396)
_qe = $(if $(query_extra_$(2)),$(call query_extra_$(2),$(1)),-)
# makefile (from `erlang.mk', line 857)
pkg_cloudi_service_validate_repo = https://github.com/CloudI/cloudi_service_validate
# makefile (from `erlang.mk', line 3722)
pkg_sqerl_commit = master
# makefile (from `erlang.mk', line 2383)
pkg_key2value_homepage = https://github.com/okeuday/key2value
# makefile (from `erlang.mk', line 3614)
pkg_shotgun_description = better than just a gun
# makefile (from `erlang.mk', line 7200)
define hex_release_publish.erl
	{ok, _} = application:ensure_all_started(ssl),
	{ok, _} = application:ensure_all_started(inets),
	Config = $(hex_config.erl),
	ConfigF = Config#{api_key => <<"$(strip $1)">>},
	{ok, Tarball} = file:read_file("$(strip $(HEX_TARBALL_OUTPUT_FILE))"),
	case hex_api_release:publish(ConfigF, Tarball, [{replace, $2}]) of
		{ok, {200, _, #{}}} ->
			io:format("Release replaced~n"),
			halt(0);
		{ok, {201, _, #{}}} ->
			io:format("Release published~n"),
			halt(0);
		{ok, {Status, _, Errors}} ->
			io:format("Error ~b: ~0p~n", [Status, Errors]),
			halt(84)
	end
endef
# makefile (from `erlang.mk', line 3273)
pkg_rabbit_exchange_type_riak_repo = https://github.com/jbrisbin/riak-exchange
# makefile (from `erlang.mk', line 3322)
pkg_rebar_commit = master
# makefile (from `erlang.mk', line 1189)
pkg_ejabberd_name = ejabberd
# makefile (from `erlang.mk', line 784)
pkg_cloudi_service_http_elli_fetch = git
# makefile (from `erlang.mk', line 185)
core_eq = $(and $(findstring $(1),$(2)),$(findstring $(2),$(1)))
# makefile (from `erlang.mk', line 2917)
pkg_nodefinder_name = nodefinder
# makefile (from `erlang.mk', line 2633)
pkg_marina_repo = https://github.com/lpgauth/marina
# makefile (from `erlang.mk', line 2279)
pkg_joxa_homepage = https://github.com/joxa/joxa
# makefile (from `erlang.mk', line 5522)
ALL_REL_DEPS_DIRS = $(addprefix $(DEPS_DIR)/,$(REL_DEPS))
# makefile (from `erlang.mk', line 1456)
pkg_erldb_fetch = git
# makefile (from `erlang.mk', line 20)
ERLANG_MK_VERSION = bf7a194
# makefile (from `erlang.mk', line 3089)
pkg_pkt_repo = https://github.com/msantos/pkt
# makefile (from `erlang.mk', line 1034)
pkg_dlhttpc_commit = master
# makefile (from `erlang.mk', line 6320)
link_verbose = $(link_verbose_$(V))
# makefile (from `erlang.mk', line 2518)
pkg_lfe_description = Lisp Flavoured Erlang (LFE)
# makefile (from `erlang.mk', line 3625)
pkg_sidejob_repo = https://github.com/basho/sidejob
# makefile (from `erlang.mk', line 479)
pkg_bifrost_homepage = https://github.com/thorstadt/bifrost
# makefile (from `erlang.mk', line 3805)
pkg_subproc_name = subproc
# makefile (from `erlang.mk', line 4159)
pkg_websocket_client_homepage = https://github.com/jeremyong/websocket_client
# makefile (from `erlang.mk', line 2669)
pkg_meck_name = meck
# makefile (from `erlang.mk', line 1121)
pkg_edis_repo = https://github.com/inaka/edis
# makefile (from `erlang.mk', line 2842)
pkg_nat_upnp_commit = master
# makefile (from `erlang.mk', line 36)
PROJECT := erlang
# makefile (from `erlang.mk', line 3823)
pkg_surrogate_homepage = https://github.com/skruger/Surrogate
# makefile (from `erlang.mk', line 2192)
pkg_iota_fetch = git
# makefile (from `erlang.mk', line 574)
pkg_cake_description = Really simple terminal colorization
# makefile (from `erlang.mk', line 966)
pkg_damocles_description = Erlang library for generating adversarial network conditions for QAing distributed applications/systems on a single Linux box.
# makefile (from `erlang.mk', line 1136)
pkg_edown_fetch = git
# makefile (from `erlang.mk', line 1793)
pkg_ezmtp_repo = https://github.com/a13x/ezmtp
# makefile (from `erlang.mk', line 203)
ERLANG_MK_REPO = https://github.com/ninenines/erlang.mk
# makefile (from `erlang.mk', line 4146)
pkg_walrus_commit = master
# makefile (from `erlang.mk', line 2239)
 
pkg_jerg_homepage = https://github.com/ddossot/jerg
# makefile (from `erlang.mk', line 3521)
pkg_riakpool_repo = https://github.com/dweldon/riakpool
# makefile (from `erlang.mk', line 2437)
pkg_kvlists_name = kvlists
# makefile (from `erlang.mk', line 3528)
pkg_rivus_cep_fetch = git
# makefile (from `erlang.mk', line 3474)
pkg_riak_pipe_commit = master
# makefile (from `erlang.mk', line 4021)
pkg_ucol_nif_name = ucol_nif
# makefile (from `erlang.mk', line 1770)
pkg_exsplus116_commit = master
# makefile (from `erlang.mk', line 1742)
pkg_exometer_description = Basic measurement objects and probe behavior
# makefile (from `erlang.mk', line 3981)
pkg_trie_name = trie
# makefile (from `erlang.mk', line 1392)
pkg_erlang_localtime_fetch = git
# makefile (from `erlang.mk', line 2374)
pkg_kdht_description = kdht is an erlang DHT implementation
# makefile (from `erlang.mk', line 1167)
pkg_egeoip_homepage = https://github.com/mochi/egeoip
# makefile (from `erlang.mk', line 1141)
pkg_eep_name = eep
# makefile (from `erlang.mk', line 2662)
pkg_mcerlang_description = The McErlang model checker for Erlang
# makefile (from `erlang.mk', line 2128)
pkg_hanoidb_fetch = git
# makefile (from `erlang.mk', line 1241)
pkg_elli_repo = https://github.com/elli-lib/elli
# makefile (from `erlang.mk', line 936)
pkg_cpg_fetch = git
# makefile (from `erlang.mk', line 861)
pkg_cloudi_service_zeromq_name = cloudi_service_zeromq
# makefile (from `erlang.mk', line 3050)
pkg_pegjs_commit = master
# makefile (from `erlang.mk', line 3839)
pkg_swarm_homepage = https://github.com/jeremey/swarm
# makefile (from `erlang.mk', line 6645)
CT_LOGS_DIR = $(CURDIR)/logs
# makefile (from `erlang.mk', line 2242)
pkg_jerg_commit = master
# makefile (from `erlang.mk', line 2541)
pkg_lmq_name = lmq
# makefile (from `erlang.mk', line 3150)
pkg_pqueue_description = Erlang Priority Queues
# makefile (from `erlang.mk', line 3130)
pkg_ponos_commit = master
# makefile (from `erlang.mk', line 2890)
pkg_nkbase_commit = develop
# makefile (from `erlang.mk', line 4380)
query_version = $(call _qv,$(1),$(call query_fetch_method,$(1)))
# makefile (from `erlang.mk', line 3853)
pkg_syn_name = syn
# makefile (from `erlang.mk', line 3946)
pkg_toml_commit = v0.2.0
# environment
VSCODE_LOG_STACK = false
# makefile (from `erlang.mk', line 1722)
pkg_evum_commit = master
# makefile (from `erlang.mk', line 1697)
pkg_eunit_repo = https://github.com/richcarl/eunit
# makefile (from `erlang.mk', line 4166)
pkg_worker_pool_description = a simple erlang worker pool
# environment
ELECTRON_RUN_AS_NODE = 1
# makefile (from `erlang.mk', line 3558)
pkg_seestar_description = The Erlang client for Cassandra 1.2+ binary protocol
# makefile (from `erlang.mk', line 2584)
pkg_lucid_fetch = git
# makefile (from `erlang.mk', line 1882)
pkg_fuse_commit = master
# makefile (from `erlang.mk', line 689)
pkg_cloudi_service_db_cassandra_repo = https://github.com/CloudI/cloudi_service_db_cassandra
# makefile (from `erlang.mk', line 3641)
pkg_sighandler_repo = https://github.com/jkingsbery/sighandler
# makefile (from `erlang.mk', line 337)
pkg_actordb_core_repo = https://github.com/biokoda/actordb_core
# makefile (from `erlang.mk', line 3169)
pkg_prometheus_repo = https://github.com/deadtrickster/prometheus.erl
# makefile (from `erlang.mk', line 7830)
XREF_IGNORE_CALLBACKS = 
# makefile (from `erlang.mk', line 3040)
pkg_partisan_fetch = git
# makefile (from `erlang.mk', line 3002)
pkg_openpoker_commit = master
# makefile (from `erlang.mk', line 879)
pkg_color_homepage = https://github.com/julianduque/erlang-color
# makefile (from `erlang.mk', line 4377)
query_repo_fail = -
# makefile (from `erlang.mk', line 2999)
pkg_openpoker_homepage = https://github.com/hpyhacking/openpoker
# makefile (from `erlang.mk', line 7020)
pkg_hex_core_commit = $(HEX_CORE_COMMIT)
# makefile (from `erlang.mk', line 5842)
define bs_sys_config
[
].
endef
# makefile (from `erlang.mk', line 1625)
pkg_erwa_repo = https://github.com/bwegh/erwa
# makefile (from `erlang.mk', line 1038)
pkg_dns_description = Erlang DNS library
# makefile (from `erlang.mk', line 4168)
pkg_worker_pool_fetch = git
# makefile (from `erlang.mk', line 1185)
pkg_ej_repo = https://github.com/seth/ej
# makefile (from `erlang.mk', line 810)
pkg_cloudi_service_queue_commit = master
# makefile (from `erlang.mk', line 2206)
pkg_ircd_description = A pluggable IRC daemon application/library for Erlang.
# makefile (from `erlang.mk', line 769)
pkg_cloudi_service_http_client_repo = https://github.com/CloudI/cloudi_service_http_client
# makefile (from `erlang.mk', line 3053)
pkg_percept2_name = percept2
# makefile (from `erlang.mk', line 1199)
pkg_ejwt_homepage = https://github.com/artefactop/ejwt
# makefile (from `erlang.mk', line 625)
pkg_check_node_repo = https://github.com/basho-labs/riak_nagios
# makefile (from `erlang.mk', line 1504)
pkg_erlguten_fetch = git
# makefile (from `erlang.mk', line 3325)
pkg_rebus_name = rebus
# makefile (from `erlang.mk', line 7675)
sphinx_build_0 = @echo " SPHINX" $1; $(SPHINX_BUILD) -N -q
# makefile (from `erlang.mk', line 573)
pkg_cake_name = cake
# makefile (from `erlang.mk', line 1560)
pkg_erlsha2_fetch = git
# makefile (from `erlang.mk', line 1398)
pkg_erlang_smtp_description = Erlang SMTP and POP3 server code.
 
# makefile (from `erlang.mk', line 2114)
pkg_hackney_commit = master
# makefile (from `erlang.mk', line 904)
pkg_covertool_fetch = git
# makefile (from `erlang.mk', line 6967)
define eunit.erl
	$(call cover.erl)
	CoverSetup(),
	case eunit:test($1, [$(EUNIT_OPTS)]) of
		ok -> ok;
		error -> halt(2)
	end,
	CoverExport("$(call core_native_path,$(COVER_DATA_DIR))/eunit.coverdata"),
	halt()
endef
# makefile (from `erlang.mk', line 1557)
pkg_erlsha2_name = erlsha2
# makefile (from `erlang.mk', line 74)
UNAME_S := Darwin
# makefile (from `erlang.mk', line 2474)
pkg_lager_syslog_commit = master
# makefile (from `erlang.mk', line 6907)
ESCRIPT_EMU_ARGS = -escript main $(ESCRIPT_NAME)
# makefile (from `erlang.mk', line 2095)
pkg_gun_homepage = http//ninenines.eu
# environment
rvm_version = 1.29.12 (latest)
# makefile (from `erlang.mk', line 7016)
pkg_hex_core_description = Reference implementation of Hex specifications
# makefile (from `erlang.mk', line 3837)
pkg_swarm_name = swarm
# makefile (from `erlang.mk', line 4438)
NO_AUTOPATCH := 
# makefile (from `erlang.mk', line 2265)
pkg_jiffy_v_repo = https://github.com/shizzard/jiffy-v
# makefile (from `erlang.mk', line 2373)
pkg_kdht_name = kdht
# makefile (from `erlang.mk', line 1457)
pkg_erldb_repo = https://github.com/erldb/erldb
# makefile (from `erlang.mk', line 1223)
pkg_eleveldb_homepage = https://github.com/basho/eleveldb
# makefile (from `erlang.mk', line 3626)
pkg_sidejob_commit = master
# makefile (from `erlang.mk', line 2661)
pkg_mcerlang_name = mcerlang
# makefile (from `erlang.mk', line 2642)
pkg_mavg_commit = master
# makefile (from `erlang.mk', line 6849)
DTL_PATH := /Users/alex/Desktop/erlang/templates
# makefile (from `erlang.mk', line 930)
pkg_cowlib_commit = 1.0.2
# makefile (from `erlang.mk', line 3006)
pkg_otpbp_description = Parse transformer for use new OTP functions in old Erlang/OTP releases (R15, R16, 17, 18, 19)
# makefile (from `erlang.mk', line 3570)
pkg_service_commit = master
# makefile (from `erlang.mk', line 1528)
pkg_erlog_fetch = git
# makefile (from `erlang.mk', line 983)
pkg_decimal_homepage = https://github.com/tim/erlang-decimal
# makefile (from `erlang.mk', line 431)
pkg_basho_bench_homepage = https://github.com/basho/basho_bench
# makefile (from `erlang.mk', line 1247)
pkg_elvis_homepage = https://github.com/inaka/elvis
# makefile (from `erlang.mk', line 3149)
pkg_pqueue_name = pqueue
# makefile (from `erlang.mk', line 2721)
pkg_mimetypes_repo = https://github.com/spawngrid/mimetypes
# makefile (from `erlang.mk', line 3104)
pkg_plumtree_fetch = git
# makefile (from `erlang.mk', line 1050)
pkg_dnssd_commit = master
# makefile (from `erlang.mk', line 3687)
pkg_smother_homepage = https://ramsay-t.github.io/Smother/
# environment
VSCODE_PIPE_LOGGING = true
# makefile (from `erlang.mk', line 520)
pkg_bootstrap_fetch = git
# makefile (from `erlang.mk', line 1750)
pkg_exs1024_description = Xorshift1024star pseudo random number generator for Erlang.
# makefile (from `erlang.mk', line 2654)
pkg_mcd_description = Fast memcached protocol client in pure Erlang
# makefile (from `erlang.mk', line 1941)
pkg_gen_leader_name = gen_leader
# makefile (from `erlang.mk', line 3032)
pkg_parsexml_fetch = git
# makefile (from `erlang.mk', line 6802)
EDOC_OPTS = 
# makefile (from `erlang.mk', line 6839)
DTL_SUFFIX = _dtl
# makefile (from `erlang.mk', line 2144)
pkg_hpack_fetch = git
# makefile (from `erlang.mk', line 488)
pkg_binpp_fetch = git
# environment
rvm_bin_path = /Users/alex/.rvm/bin
# makefile (from `erlang.mk', line 1473)
pkg_erldns_repo = https://github.com/aetrion/erl-dns
# makefile (from `erlang.mk', line 3841)
pkg_swarm_repo = https://github.com/jeremey/swarm
# makefile (from `erlang.mk', line 2951)
pkg_observer_cli_homepage = http://zhongwencool.github.io/observer_cli
# makefile (from `erlang.mk', line 3983)
pkg_trie_homepage = https://github.com/okeuday/trie
# makefile (from `erlang.mk', line 4046)
pkg_uuid_description = Erlang UUID Implementation
# makefile (from `erlang.mk', line 3271)
pkg_rabbit_exchange_type_riak_homepage = https://github.com/jbrisbin/riak-exchange
# makefile (from `erlang.mk', line 2993)
pkg_openid_repo = https://github.com/brendonh/erl_openid
# makefile (from `erlang.mk', line 1166)
pkg_egeoip_description = Erlang IP Geolocation module, currently supporting the MaxMind GeoLite City Database.
# makefile (from `erlang.mk', line 3736)
pkg_sshrpc_fetch = git
# makefile (from `erlang.mk', line 2473)
pkg_lager_syslog_repo = https://github.com/erlang-lager/lager_syslog
# makefile (from `erlang.mk', line 3813)
pkg_supervisor3_name = supervisor3
# makefile (from `erlang.mk', line 1037)
pkg_dns_name = dns
# makefile (from `erlang.mk', line 1133)
pkg_edown_name = edown
# makefile (from `erlang.mk', line 1134)
pkg_edown_description = EDoc extension for generating Github-flavored Markdown
# makefile (from `erlang.mk', line 2205)
pkg_ircd_name = ircd
# makefile (from `erlang.mk', line 3030)
pkg_parsexml_description = Simple DOM XML parser with convenient and very simple API
# makefile (from `erlang.mk', line 3055)
pkg_percept2_homepage = https://github.com/huiqing/percept2
# makefile (from `erlang.mk', line 2448)
pkg_kvs_fetch = git
# makefile (from `erlang.mk', line 4130)
pkg_vmq_systree_commit = master
# makefile (from `erlang.mk', line 3670)
pkg_skel_description = A Streaming Process-based Skeleton Library for Erlang
# default
.VARIABLES := 
# makefile (from `erlang.mk', line 3791)
pkg_stockdb_homepage = https://github.com/maxlapshin/stockdb
 
# makefile (from `erlang.mk', line 768)
pkg_cloudi_service_http_client_fetch = git
# makefile (from `erlang.mk', line 2680)
pkg_mekao_fetch = git
# makefile (from `erlang.mk', line 2490)
pkg_lasp_commit = master
# makefile (from `erlang.mk', line 2521)
pkg_lfe_repo = https://github.com/rvirding/lfe
# makefile (from `erlang.mk', line 1343)
pkg_eqm_homepage = https://github.com/loucash/eqm
# makefile (from `erlang.mk', line 802)
pkg_cloudi_service_oauth1_commit = master
# makefile (from `erlang.mk', line 2879)
pkg_nitrogen_core_homepage = http://nitrogenproject.com/
# makefile (from `erlang.mk', line 3425)
pkg_riak_control_repo = https://github.com/basho/riak_control
# makefile (from `erlang.mk', line 1112)
pkg_edgar_fetch = git
# makefile (from `erlang.mk', line 3926)
pkg_tinymt_description = TinyMT pseudo random number generator for Erlang.
# makefile (from `erlang.mk', line 3463)
pkg_riak_pg_homepage = https://github.com/cmeiklejohn/riak_pg
# makefile (from `erlang.mk', line 5180)
xyrl_verbose_0 = @echo " XYRL  " $(filter %.xrl %.yrl,$(?F));
# makefile (from `erlang.mk', line 362)
pkg_alog_commit = master
# makefile (from `erlang.mk', line 1880)
pkg_fuse_fetch = git
# makefile (from `erlang.mk', line 3109)
pkg_pmod_transform_name = pmod_transform
# makefile (from `erlang.mk', line 3237)
pkg_qrcode_name = qrcode
# makefile (from `erlang.mk', line 4402)
query_extra_svn = -
# makefile (from `erlang.mk', line 3249)
pkg_quest_repo = https://github.com/eriksoe/ErlangQuest
# makefile (from `erlang.mk', line 3005)
pkg_otpbp_name = otpbp
# makefile (from `erlang.mk', line 3424)
pkg_riak_control_fetch = git
# makefile (from `erlang.mk', line 1823)
pkg_fix_homepage = https://github.com/maxlapshin/fix
# makefile (from `erlang.mk', line 726)
pkg_cloudi_service_db_mysql_description = MySQL CloudI Service
# makefile (from `erlang.mk', line 7066)
define hex_key_add.erl
	{ok, _} = application:ensure_all_started(ssl),
	{ok, _} = application:ensure_all_started(inets),
	Config = $(hex_config.erl),
	ConfigF = Config#{api_key => iolist_to_binary([<<"Basic ">>, base64:encode(<<"$(strip $1):$(strip $2)">>)])},
	Permissions = [
		case string:split(P, <<":">>) of
			[D] -> #{domain => D};
			[D, R] -> #{domain => D, resource => R}
		end
	|| P <- string:split(<<"$(strip $4)">>, <<",">>, all)],
	case hex_api_key:add(ConfigF, <<"$(strip $3)">>, Permissions) of
		{ok, {201, _, #{<<"secret">> := Secret}}} ->
			io:format("Key ~s created for user ~s~nSecret: ~s~n"
				"Please store the secret in a secure location, such as a password store.~n"
				"The secret will be requested for most Hex-related operations.~n",
				[<<"$(strip $3)">>, <<"$(strip $1)">>, Secret]),
			halt(0);
		{ok, {Status, _, Errors}} ->
			io:format("Error ~b: ~0p~n", [Status, Errors]),
			halt(81)
	end
endef
# makefile (from `erlang.mk', line 3960)
pkg_trails_fetch = git
# makefile (from `erlang.mk', line 2725)
pkg_mixer_name = mixer
# makefile (from `erlang.mk', line 6316)
cpp_verbose_0 = @echo " CPP   " $(filter-out $(notdir $(MAKEFILE_LIST) $(C_SRC_ENV)),$(^F));
# makefile (from `erlang.mk', line 1522)
pkg_erlmongo_commit = master
# makefile (from `erlang.mk', line 1318)
pkg_eplot_description = A plot engine written in erlang.
# makefile (from `erlang.mk', line 5632)
compat_prepare_erlc_opts = $(shell echo "$1" | sed 's/, */,/g')
# makefile (from `erlang.mk', line 1976)
pkg_gen_smtp_fetch = git
# environment
HOMEBREW_CELLAR = /opt/homebrew/Cellar
# makefile (from `erlang.mk', line 630)
pkg_chronos_description = Timer module for Erlang that makes it easy to abstact time out of the tests.
# makefile (from `erlang.mk', line 7035)
define hex_config.erl
	begin
		Config0 = hex_core:default_config(),
		Config0$(HEX_CONFIG)
	end
endef
# makefile (from `erlang.mk', line 1928)
pkg_gen_cycle_fetch = git
# makefile (from `erlang.mk', line 2653)
pkg_mcd_name = mcd
# makefile (from `erlang.mk', line 1073)
pkg_eamf_repo = https://github.com/mrinalwadhwa/eamf
# environment
VSCODE_CODE_CACHE_PATH = /Users/alex/Library/Application Support/Code/CachedData/da15b6fd3ef856477bf6f4fb29ba1b7af717770d
# makefile (from `erlang.mk', line 1022)
pkg_dispcount_description = Erlang task dispatcher based on ETS counters.
# makefile (from `erlang.mk', line 7499)
define relx_release.erl
	{ok, Config} = file:consult("$(call core_native_path,$(RELX_CONFIG))"),
	{release, {Name, Vsn0}, _} = lists:keyfind(release, 1, Config),
	Vsn = case Vsn0 of
		{cmd, Cmd} -> os:cmd(Cmd);
		semver -> "";
		{semver, _} -> "";
		VsnStr -> Vsn0
	end,
	{ok, _} = relx:build_release(#{name => Name, vsn => Vsn}, Config),
	halt(0).
endef
# makefile (from `erlang.mk', line 954)
pkg_cr_commit = master
# makefile (from `erlang.mk', line 2942)
pkg_oauth2_description = Erlang Oauth2 implementation
# makefile (from `erlang.mk', line 2199)
pkg_irc_lib_homepage = https://github.com/OtpChatBot/irc_lib
# makefile (from `erlang.mk', line 1616)
pkg_erserve_fetch = git
# makefile (from `erlang.mk', line 976)
pkg_debbie_fetch = git
# makefile (from `erlang.mk', line 3018)
pkg_pal_commit = master
# makefile (from `erlang.mk', line 6903)
ESCRIPT_FILE = $(ESCRIPT_NAME)
# makefile (from `erlang.mk', line 542)
pkg_brod_description = Kafka client in Erlang
# makefile (from `erlang.mk', line 2186)
pkg_ierlang_commit = master
# makefile (from `erlang.mk', line 3079)
pkg_pkgx_homepage = https://github.com/arjan/pkgx
# makefile (from `erlang.mk', line 1165)
pkg_egeoip_name = egeoip
# makefile (from `erlang.mk', line 394)
pkg_apns_commit = master
# makefile (from `erlang.mk', line 1554)
pkg_erlsh_commit = master
# makefile (from `erlang.mk', line 346)
 
pkg_actordb_thrift_commit = master
# makefile (from `erlang.mk', line 5269)
XRL_ERL_FILES = $(addprefix src/,$(patsubst %.xrl,%.erl,$(notdir $(XRL_FILES))))
# makefile (from `erlang.mk', line 1657)
pkg_estatsd_repo = https://github.com/RJ/estatsd
# makefile (from `erlang.mk', line 1221)
pkg_eleveldb_name = eleveldb
# makefile (from `erlang.mk', line 4154)
pkg_webmachine_commit = master
# makefile (from `erlang.mk', line 3941)
pkg_toml_name = toml
# makefile (from `erlang.mk', line 1497)
pkg_erlgit_repo = https://github.com/gleber/erlgit
# makefile (from `erlang.mk', line 4141)
pkg_walrus_name = walrus
# makefile (from `erlang.mk', line 3774)
pkg_statsderl_description = StatsD client (erlang)
# makefile (from `erlang.mk', line 1386)
pkg_erlang_js_commit = master
# makefile (from `erlang.mk', line 1080)
pkg_eavro_fetch = git
# makefile (from `erlang.mk', line 1638)
pkg_esh_mk_description = esh template engine plugin for erlang.mk
# makefile (from `erlang.mk', line 2874)
pkg_nifty_commit = master
# environment
__CF_USER_TEXT_ENCODING = 0x1F5:0x0:0x0
# makefile (from `erlang.mk', line 568)
pkg_cache_fetch = git
# makefile (from `erlang.mk', line 606)
pkg_cferl_description = Rackspace / Open Stack Cloud Files Erlang Client
# makefile (from `erlang.mk', line 551)
pkg_bson_homepage = https://github.com/comtihon/bson-erlang
# makefile (from `erlang.mk', line 454)
pkg_beanstalk_description = An Erlang client for beanstalkd
# makefile (from `erlang.mk', line 2909)
pkg_nksip_name = nksip
# makefile (from `erlang.mk', line 1055)
pkg_dynamic_compile_homepage = https://github.com/jkvor/dynamic_compile
# makefile (from `erlang.mk', line 6665)
CT_RUN = ct_run -no_auto_compile -noinput -pa $(CURDIR)/ebin $(TEST_DIR) -dir $(TEST_DIR) -logdir $(CT_LOGS_DIR)
# makefile (from `erlang.mk', line 375)
pkg_annotations_homepage = https://github.com/hyperthunk/annotations
# makefile (from `erlang.mk', line 814)
pkg_cloudi_service_quorum_description = CloudI Quorum Service
# makefile (from `erlang.mk', line 2525)
pkg_ling_name = ling
# makefile (from `erlang.mk', line 3487)
pkg_riak_test_homepage = https://github.com/basho/riak_test
# makefile (from `erlang.mk', line 2850)
pkg_neo4j_commit = master
# makefile (from `erlang.mk', line 3269)
pkg_rabbit_exchange_type_riak_name = rabbit_exchange_type_riak
# makefile (from `erlang.mk', line 2290)
pkg_json_commit = master
# makefile (from `erlang.mk', line 512)
pkg_bitstore_fetch = git
# makefile (from `erlang.mk', line 4277)
pkg_zucchini_name = zucchini
# makefile (from `erlang.mk', line 2006)
pkg_getopt_description = Module to parse command line arguments using the GNU getopt syntax
# makefile (from `erlang.mk', line 4414)
dep_repo = $(call query_repo_git,$(1))
# makefile (from `erlang.mk', line 1778)
pkg_exsplus128_commit = master
# makefile (from `erlang.mk', line 736)
pkg_cloudi_service_db_pgsql_fetch = git
# makefile (from `erlang.mk', line 408)
pkg_azdht_fetch = git
# makefile (from `erlang.mk', line 2730)
pkg_mixer_commit = master
# makefile (from `erlang.mk', line 3181)
pkg_proper_name = proper
# makefile (from `erlang.mk', line 2233)
pkg_jamdb_sybase_repo = https://github.com/erlangbureau/jamdb_sybase
# makefile (from `erlang.mk', line 2616)
pkg_machi_fetch = git
# environment
XPC_FLAGS = 0x0
# makefile (from `erlang.mk', line 1762)
pkg_exs64_commit = master
# makefile (from `erlang.mk', line 3029)
pkg_parsexml_name = parsexml
# makefile (from `erlang.mk', line 5163)
app_verbose_0 = @echo " APP   " $(PROJECT);
# makefile (from `erlang.mk', line 2994)
pkg_openid_commit = master
# makefile (from `erlang.mk', line 285)
ERLANG_OTP = 
# makefile (from `erlang.mk', line 4002)
pkg_tunctl_commit = master
# makefile (from `erlang.mk', line 2624)
pkg_mad_fetch = git
# makefile (from `erlang.mk', line 1862)
pkg_folsomite_description = blow up your graphite / riemann server with folsom metrics
# makefile (from `erlang.mk', line 2216)
pkg_iris_fetch = git
# environment
PATH = /Users/alex/.rvm/gems/ruby-3.0.0/bin:/Users/alex/.rvm/gems/ruby-3.0.0@global/bin:/Users/alex/.rvm/rubies/ruby-3.0.0/bin:/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/go/bin:/usr/local/share/dotnet:~/.dotnet/tools:/Library/Apple/usr/bin:/Library/Frameworks/Mono.framework/Versions/Current/Commands:/Users/alex/.cargo/bin:/Users/alex/.rvm/bin
# makefile (from `erlang.mk', line 1773)
pkg_exsplus128_name = exsplus128
# makefile (from `erlang.mk', line 4393)
query_version_legacy = -
# makefile (from `erlang.mk', line 1432)
pkg_erlbrake_fetch = git
# makefile (from `erlang.mk', line 874)
pkg_cluster_info_commit = master
# makefile (from `erlang.mk', line 6637)
CT_OPTS = 
# makefile (from `erlang.mk', line 1021)
pkg_dispcount_name = dispcount
# makefile (from `erlang.mk', line 361)
pkg_alog_repo = https://github.com/siberian-fast-food/alogger
# makefile (from `erlang.mk', line 2941)
pkg_oauth2_name = oauth2
# makefile (from `erlang.mk', line 3231)
pkg_qdate_homepage = https://github.com/choptastic/qdate
# makefile (from `erlang.mk', line 1433)
pkg_erlbrake_repo = https://github.com/kenpratt/erlbrake
# makefile (from `erlang.mk', line 7525)
 
define relx_relup.erl
	{ok, Config} = file:consult("$(call core_native_path,$(RELX_CONFIG))"),
	{release, {Name, Vsn0}, _} = lists:keyfind(release, 1, Config),
	Vsn = case Vsn0 of
		{cmd, Cmd} -> os:cmd(Cmd);
		semver -> "";
		{semver, _} -> "";
		VsnStr -> Vsn0
	end,
	{ok, _} = relx:build_relup(Name, Vsn, undefined, Config ++ [{output_dir, "$(RELX_OUTPUT_DIR)"}]),
	halt(0).
endef
# makefile (from `erlang.mk', line 4383)
query_version_default = $(if $(dep_$(1)_commit),$(dep_$(1)_commit),$(if $(dep_$(1)),$(word 3,$(dep_$(1))),$(pkg_$(1)_commit)))
# makefile (from `erlang.mk', line 541)
pkg_brod_name = brod
# makefile (from `erlang.mk', line 4406)
query_extra_fail = -
# makefile (from `erlang.mk', line 2969)
pkg_of_protocol_repo = https://github.com/FlowForwarding/of_protocol
# makefile (from `erlang.mk', line 7584)
RELX_REL_NAME := erlang_release
# makefile (from `erlang.mk', line 3906)
pkg_tempo_commit = master
# makefile (from `erlang.mk', line 1098)
pkg_econfig_commit = master
# makefile (from `erlang.mk', line 3272)
pkg_rabbit_exchange_type_riak_fetch = git
# makefile (from `erlang.mk', line 4213)
pkg_yamler_name = yamler
# makefile (from `erlang.mk', line 4389)
query_version_cp = -
# makefile (from `erlang.mk', line 2937)
pkg_oauth_repo = https://github.com/tim/erlang-oauth
# makefile (from `erlang.mk', line 7825)
XREF_IGNORE = []
# makefile (from `erlang.mk', line 1746)
pkg_exometer_commit = master
# makefile (from `erlang.mk', line 7097)
HEX_TARBALL_EXTRA_METADATA = 
# makefile (from `erlang.mk', line 1309)
pkg_episcina_name = episcina
# makefile (from `erlang.mk', line 2938)
pkg_oauth_commit = master
# makefile (from `erlang.mk', line 4177)
pkg_wrangler_repo = https://github.com/RefactoringTools/wrangler
# makefile (from `erlang.mk', line 3773)
pkg_statsderl_name = statsderl
# makefile (from `erlang.mk', line 6978)
EUNIT_ERL_OPTS =  -pa $(TEST_DIR) $(CURDIR)/ebin
# makefile (from `erlang.mk', line 910)
pkg_cowboy_description = Small, fast and modular HTTP server.
# makefile (from `erlang.mk', line 3673)
pkg_skel_repo = https://github.com/ParaPhrase/skel
# makefile (from `erlang.mk', line 1637)
pkg_esh_mk_name = esh_mk
# makefile (from `erlang.mk', line 1991)
pkg_gen_unix_homepage = https://github.com/msantos/gen_unix
# makefile (from `erlang.mk', line 2426)
pkg_kucumberl_commit = master
# makefile (from `erlang.mk', line 2018)
pkg_gettext_commit = master
# makefile (from `erlang.mk', line 605)
pkg_cferl_name = cferl
# environment
USER = alex
# makefile (from `erlang.mk', line 453)
pkg_beanstalk_name = beanstalk
# makefile (from `erlang.mk', line 1530)
pkg_erlog_commit = master
# makefile (from `erlang.mk', line 2911)
pkg_nksip_homepage = https://github.com/kalta/nksip
# makefile (from `erlang.mk', line 472)
pkg_bertconf_fetch = git
# makefile (from `erlang.mk', line 7680)
define sphinx.build
$(call sphinx_build,$1) -b $1 -d $(SPHINX_DOCTREES) $(if $(SPHINX_CONFDIR),-c $(SPHINX_CONFDIR)) $(SPHINX_OPTS) $(sphinx_$1_opts) -- $(SPHINX_SOURCE) $(call sphinx.output,$1)

endef
# makefile (from `erlang.mk', line 3741)
pkg_stable_name = stable
# makefile (from `erlang.mk', line 1351)
pkg_eredis_homepage = https://github.com/wooga/eredis
# makefile (from `erlang.mk', line 373)
pkg_annotations_name = annotations
# makefile (from `erlang.mk', line 3599)
pkg_sgte_homepage = https://github.com/filippo/sgte
# makefile (from `erlang.mk', line 6260)
C_SRC_OUTPUT = $(CURDIR)/priv/$(PROJECT)
# makefile (from `erlang.mk', line 2327)
pkg_jsonx_homepage = https://github.com/iskra/jsonx
# makefile (from `erlang.mk', line 2150)
pkg_hyper_description = Erlang implementation of HyperLogLog
# makefile (from `erlang.mk', line 1792)
pkg_ezmtp_fetch = git
# makefile (from `erlang.mk', line 1202)
pkg_ejwt_commit = master
# makefile (from `erlang.mk', line 4278)
pkg_zucchini_description = An Erlang INI parser
# makefile (from `erlang.mk', line 2550)
pkg_locker_description = Atomic distributed 'check and set' for short-lived keys
# makefile (from `erlang.mk', line 2005)
pkg_getopt_name = getopt
# makefile (from `erlang.mk', line 1178)
pkg_ehsa_commit = default
# makefile (from `erlang.mk', line 3129)
pkg_ponos_repo = https://github.com/klarna/ponos
# makefile (from `erlang.mk', line 2391)
pkg_keys1value_homepage = https://github.com/okeuday/keys1value
# makefile (from `erlang.mk', line 1378)
pkg_erlang_cep_commit = master
# makefile (from `erlang.mk', line 2119)
pkg_hamcrest_homepage = https://github.com/hyperthunk/hamcrest-erlang
# makefile (from `erlang.mk', line 1150)
pkg_eep_app_description = Embedded Event Processing
# makefile (from `erlang.mk', line 7813)
XREF_SCOPE = app 
# makefile (from `erlang.mk', line 2082)
pkg_grpc_commit = master
# makefile (from `erlang.mk', line 4400)
query_extra_git-submodule = -
# makefile (from `erlang.mk', line 789)
pkg_cloudi_service_map_reduce_name = cloudi_service_map_reduce
# makefile (from `erlang.mk', line 1861)
pkg_folsomite_name = folsomite
# makefile (from `erlang.mk', line 2632)
pkg_marina_fetch = git
# makefile (from `erlang.mk', line 4090)
pkg_vmq_bridge_commit = master
# makefile (from `erlang.mk', line 1033)
pkg_dlhttpc_repo = https://github.com/ferd/dlhttpc
# makefile (from `erlang.mk', line 3168)
pkg_prometheus_fetch = git
# makefile (from `erlang.mk', line 3865)
pkg_sync_repo = https://github.com/rustyio/sync
# makefile (from `erlang.mk', line 1017)
pkg_dirbusterl_repo = https://github.com/silentsignal/DirBustErl
# makefile (from `erlang.mk', line 2742)
pkg_mochiweb_xpath_description = XPath support for mochiweb's html parser
# makefile (from `erlang.mk', line 657)
pkg_clique_repo = https://github.com/basho/clique
# makefile (from `erlang.mk', line 2066)
pkg_gproc_commit = master
# makefile (from `erlang.mk', line 529)
pkg_boss_repo = https://github.com/ChicagoBoss/ChicagoBoss
# makefile (from `erlang.mk', line 3535)
pkg_rlimit_homepage = https://github.com/jlouis/rlimit
# makefile (from `erlang.mk', line 960)
pkg_cuttlefish_fetch = git
# makefile (from `erlang.mk', line 1262)
pkg_emysql_description = Stable, pure Erlang MySQL driver.
# makefile (from `erlang.mk', line 1119)
pkg_edis_homepage = http://inaka.github.com/edis/
# makefile (from `erlang.mk', line 3321)
pkg_rebar_repo = https://github.com/rebar/rebar3
# makefile (from `erlang.mk', line 3402)
pkg_resource_discovery_commit = master
# makefile (from `erlang.mk', line 6906)
ESCRIPT_COMMENT = This is an -*- erlang -*- file
# makefile (from `erlang.mk', line 7677)
sphinx_build_2 = set -x; $(SPHINX_BUILD)
# makefile (from `erlang.mk', line 2759)
pkg_modlib_homepage = https://github.com/gar1t/modlib
# makefile (from `erlang.mk', line 3855)
pkg_syn_homepage = https://github.com/ostinelli/syn
# makefile (from `erlang.mk', line 2031)
pkg_gin_homepage = https://github.com/mad-cocktail/gin
# makefile (from `erlang.mk', line 882)
pkg_color_commit = master
# makefile (from `erlang.mk', line 688)
pkg_cloudi_service_db_cassandra_fetch = git
# makefile (from `erlang.mk', line 4391)
query_version_hex = $(if $(dep_$(1)_commit),$(dep_$(1)_commit),$(if $(dep_$(1)),$(word 2,$(dep_$(1))),$(pkg_$(1)_commit)))
# makefile (from `erlang.mk', line 2135)
pkg_hottub_homepage = https://github.com/bfrog/hottub
# makefile (from `erlang.mk', line 1096)
pkg_econfig_fetch = git
# makefile (from `erlang.mk', line 1705)
pkg_eunit_formatters_repo = https://github.com/seancribbs/eunit_formatters
# makefile (from `erlang.mk', line 3088)
pkg_pkt_fetch = git
# makefile (from `erlang.mk', line 4135)
pkg_vmstats_homepage = https://github.com/ferd/vmstats
# makefile (from `erlang.mk', line 1010)
pkg_dh_date_commit = master
# makefile (from `erlang.mk', line 909)
pkg_cowboy_name = cowboy
# makefile (from `erlang.mk', line 2751)
pkg_mockgyver_homepage = https://github.com/klajo/mockgyver
# makefile (from `erlang.mk', line 4034)
pkg_unicorn_commit = master
# makefile (from `erlang.mk', line 4335)
REBAR_COMMIT = 576e12171ab8d69b048b827b92aa65d067deea01
# makefile (from `erlang.mk', line 4093)
pkg_vmq_graphite_name = vmq_graphite
# makefile (from `erlang.mk', line 1624)
pkg_erwa_fetch = git
# makefile (from `erlang.mk', line 1239)
pkg_elli_homepage = https://github.com/elli-lib/elli
 
# makefile (from `erlang.mk', line 3354)
pkg_record_info_commit = master
# makefile (from `erlang.mk', line 4392)
query_version_fail = -
# makefile (from `erlang.mk', line 8102)
define cover_export.erl
	$(foreach f,$(COVERDATA),cover:import("$(f)") == ok orelse halt(1),)
	cover:export("$(COVER_DATA_DIR)/$@"), halt(0).
endef
# makefile (from `erlang.mk', line 399)
pkg_asciideck_homepage = https://ninenines.eu
# makefile (from `erlang.mk', line 2318)
pkg_jsonpath_description = Fast Erlang JSON data retrieval and updates via javascript-like notation
# environment
TMPDIR = /var/folders/d_/_4bwgw9s7m36zl9fgb99_glw0000gn/T/
# makefile (from `erlang.mk', line 1193)
pkg_ejabberd_repo = https://github.com/processone/ejabberd
# makefile (from `erlang.mk', line 4082)
pkg_vmq_acl_commit = master
# makefile (from `erlang.mk', line 4114)
pkg_vmq_server_commit = master
# makefile (from `erlang.mk', line 3630)
pkg_sieve_description = sieve is a simple TCP routing proxy (layer 7) in erlang
# makefile (from `erlang.mk', line 1930)
pkg_gen_cycle_commit = develop
# makefile (from `erlang.mk', line 2687)
pkg_memo_homepage = https://github.com/tuncer/memo
# makefile (from `erlang.mk', line 2549)
pkg_locker_name = locker
# makefile (from `erlang.mk', line 2919)
pkg_nodefinder_homepage = https://github.com/erlanger/nodefinder
# makefile (from `erlang.mk', line 1695)
pkg_eunit_homepage = https://github.com/richcarl/eunit
# makefile (from `erlang.mk', line 6705)
CT_EXTRA = 
# makefile (from `erlang.mk', line 3064)
pkg_pgo_fetch = git
# makefile (from `erlang.mk', line 1149)
pkg_eep_app_name = eep_app
# makefile (from `erlang.mk', line 1442)
pkg_erlcloud_commit = master
# makefile (from `erlang.mk', line 2166)
pkg_ibrowse_description = Erlang HTTP client
# makefile (from `erlang.mk', line 2673)
pkg_meck_repo = https://github.com/eproxus/meck
# makefile (from `erlang.mk', line 3639)
pkg_sighandler_homepage = https://github.com/jkingsbery/sighandler
# makefile (from `erlang.mk', line 1538)
pkg_erlpass_commit = master
# makefile (from `erlang.mk', line 3918)
pkg_tinymq_description = TinyMQ - a diminutive, in-memory message queue
# makefile (from `erlang.mk', line 2591)
pkg_luerl_homepage = https://github.com/rvirding/luerl
# makefile (from `erlang.mk', line 3437)
pkg_riak_dt_name = riak_dt
# makefile (from `erlang.mk', line 1104)
pkg_edate_fetch = git
# makefile (from `erlang.mk', line 1601)
pkg_erlydtl_repo = https://github.com/erlydtl/erlydtl
# makefile (from `erlang.mk', line 2583)
pkg_lucid_homepage = https://github.com/tatsuhiro-t/lucid
# makefile (from `erlang.mk', line 2382)
pkg_key2value_description = Erlang 2-way map
# makefile (from `erlang.mk', line 7018)
pkg_hex_core_fetch = git
# makefile (from `erlang.mk', line 714)
pkg_cloudi_service_db_elasticsearch_commit = master
# makefile (from `erlang.mk', line 3301)
pkg_ranch_name = ranch
# makefile (from `erlang.mk', line 2392)
pkg_keys1value_fetch = git
# makefile (from `erlang.mk', line 2441)
pkg_kvlists_repo = https://github.com/jcomellas/kvlists
# makefile (from `erlang.mk', line 2358)
pkg_kai_description = DHT storage by Takeshi Inoue
# makefile (from `erlang.mk', line 1983)
pkg_gen_tracker_homepage = https://github.com/erlyvideo/gen_tracker
# makefile (from `erlang.mk', line 7662)
SPHINX_FORMATS = html
# makefile (from `erlang.mk', line 4089)
pkg_vmq_bridge_repo = https://github.com/erlio/vmq_bridge
# makefile (from `erlang.mk', line 1261)
pkg_emysql_name = emysql
# makefile (from `erlang.mk', line 1858)
pkg_folsom_cowboy_commit = master
# makefile (from `erlang.mk', line 672)
pkg_cloudi_service_api_requests_fetch = git
# makefile (from `erlang.mk', line 5136)
ERLANG_MK_QUERY_DOC_DEPS_FILE = $(ERLANG_MK_TMP)/query-doc-deps.log
# makefile (from `erlang.mk', line 4444)
dep_verbose = $(dep_verbose_$(V))
# makefile (from `erlang.mk', line 1145)
pkg_eep_repo = https://github.com/virtan/eep
# makefile (from `erlang.mk', line 1681)
pkg_etest_http_repo = https://github.com/wooga/etest_http
# makefile (from `erlang.mk', line 3730)
pkg_srly_commit = master
# makefile (from `erlang.mk', line 865)
pkg_cloudi_service_zeromq_repo = https://github.com/CloudI/cloudi_service_zeromq
# makefile (from `erlang.mk', line 3778)
pkg_statsderl_commit = master
# makefile (from `erlang.mk', line 602)
pkg_cecho_commit = master
# makefile (from `erlang.mk', line 1142)
pkg_eep_description = Erlang Easy Profiling (eep) application provides a way to analyze application performance and call hierarchy
# makefile (from `erlang.mk', line 4055)
pkg_ux_homepage = https://github.com/erlang-unicode/ux
# makefile (from `erlang.mk', line 7622)
ALL_SHELL_DEPS_DIRS = $(addprefix $(DEPS_DIR)/,$(SHELL_DEPS))
# makefile (from `erlang.mk', line 1810)
pkg_feeder_commit = master
# makefile (from `erlang.mk', line 1951)
pkg_gen_nb_server_homepage = https://github.com/kevsmith/gen_nb_server
# makefile (from `erlang.mk', line 1870)
pkg_fs_description = Erlang FileSystem Listener
# makefile (from `erlang.mk', line 7165)
hex_tar_verbose_2 = set -x;
# makefile (from `erlang.mk', line 4997)
dep_fetch_git = 	git clone -q -n -- $(call dep_repo,$(1)) $(DEPS_DIR)/$(call dep_name,$(1)); cd $(DEPS_DIR)/$(call dep_name,$(1)) && git checkout -q $(call dep_commit,$(1));
# makefile (from `erlang.mk', line 2858)
pkg_neotoma_commit = master
# makefile (from `erlang.mk', line 3857)
pkg_syn_repo = https://github.com/ostinelli/syn
# makefile (from `erlang.mk', line 2225)
pkg_iso8601_repo = https://github.com/seansawyer/erlang_iso8601
# makefile (from `erlang.mk', line 3648)
pkg_simhash_fetch = git
# makefile (from `erlang.mk', line 474)
pkg_bertconf_commit = master
# makefile (from `erlang.mk', line 4149)
pkg_webmachine_name = webmachine
# makefile (from `erlang.mk', line 4184)
pkg_wsock_fetch = git
# makefile (from `erlang.mk', line 2317)
pkg_jsonpath_name = jsonpath
# makefile (from `erlang.mk', line 994)
pkg_detergent_commit = master
# makefile (from `erlang.mk', line 3433)
pkg_riak_core_repo = https://github.com/basho/riak_core
# makefile (from `erlang.mk', line 4273)
pkg_zraft_lib_repo = https://github.com/dreyk/zraft_lib
# makefile (from `erlang.mk', line 1093)
pkg_econfig_name = econfig
# makefile (from `erlang.mk', line 3502)
pkg_riakhttpc_description = Riak Erlang client using the HTTP interface
# makefile (from `erlang.mk', line 1558)
pkg_erlsha2_description = SHA-224, SHA-256, SHA-384, SHA-512 implemented in Erlang NIFs.
# makefile (from `erlang.mk', line 2882)
pkg_nitrogen_core_commit = master
# makefile (from `erlang.mk', line 2520)
pkg_lfe_fetch = git
# makefile (from `erlang.mk', line 1670)
pkg_etest_description = A lightweight, convention over configuration test framework for Erlang
# makefile (from `erlang.mk', line 1130)
pkg_edns_commit = master
# makefile (from `erlang.mk', line 3557)
pkg_seestar_name = seestar
# makefile (from `erlang.mk', line 3808)
pkg_subproc_fetch = git
# makefile (from `erlang.mk', line 3478)
pkg_riak_sysmon_description = Simple OTP app for managing Erlang VM system_monitor event messages
# makefile (from `erlang.mk', line 1694)
pkg_eunit_description = The EUnit lightweight unit testing framework for Erlang - this is the canonical development repository.
# makefile (from `erlang.mk', line 3698)
pkg_snappyer_commit = master
# makefile (from `erlang.mk', line 694)
pkg_cloudi_service_db_cassandra_cql_description = Cassandra CQL CloudI Service
# makefile (from `erlang.mk', line 1574)
pkg_erlubi_description = Ubigraph Erlang Client (and Process Visualizer)
# makefile (from `erlang.mk', line 3566)
pkg_service_description = A minimal Erlang behavior for creating CloudI internal services
# makefile (from `erlang.mk', line 2512)
pkg_lethink_fetch = git
# makefile (from `erlang.mk', line 5169)
appsrc_verbose = $(appsrc_verbose_$(V))
# makefile (from `erlang.mk', line 2783)
pkg_moyo_homepage = https://github.com/dwango/moyo
# makefile (from `erlang.mk', line 2450)
pkg_kvs_commit = master
 
# makefile (from `erlang.mk', line 1415)
pkg_erlastic_search_homepage = https://github.com/tsloughter/erlastic_search
# makefile (from `erlang.mk', line 4375)
query_repo_ln = $(call query_repo_default,$(1))
# makefile (from `erlang.mk', line 497)
pkg_bisect_repo = https://github.com/knutin/bisect
# makefile (from `erlang.mk', line 725)
pkg_cloudi_service_db_mysql_name = cloudi_service_db_mysql
# makefile (from `erlang.mk', line 4215)
pkg_yamler_homepage = https://github.com/goertzenator/yamler
# makefile (from `erlang.mk', line 2182)
pkg_ierlang_description = An Erlang language kernel for IPython.
# makefile (from `erlang.mk', line 1846)
pkg_folsom_description = Expose Erlang Events and Metrics
# makefile (from `erlang.mk', line 3815)
pkg_supervisor3_homepage = https://github.com/klarna/supervisor3
# makefile (from `erlang.mk', line 2357)
pkg_kai_name = kai
# makefile (from `erlang.mk', line 965)
pkg_damocles_name = damocles
# makefile (from `erlang.mk', line 3342)
pkg_recon_description = Collection of functions and scripts to debug Erlang in production.
# makefile (from `erlang.mk', line 2077)
pkg_grpc_name = grpc
# makefile (from `erlang.mk', line 1935)
pkg_gen_icmp_homepage = https://github.com/msantos/gen_icmp
# makefile (from `erlang.mk', line 2377)
pkg_kdht_repo = https://github.com/kevinlynx/kdht
# makefile (from `erlang.mk', line 2504)
pkg_ldap_fetch = git
# makefile (from `erlang.mk', line 1072)
pkg_eamf_fetch = git
# makefile (from `erlang.mk', line 4080)
pkg_vmq_acl_fetch = git
# makefile (from `erlang.mk', line 2665)
pkg_mcerlang_repo = https://github.com/fredlund/McErlang
# makefile (from `erlang.mk', line 2929)
pkg_nprocreg_repo = https://github.com/nitrogen/nprocreg
# automatic
<F = $(notdir $<)
# makefile (from `erlang.mk', line 2793)
pkg_msgpack_repo = https://github.com/msgpack/msgpack-erlang
# makefile (from `erlang.mk', line 6836)
DTL_FULL_PATH = 
# makefile (from `erlang.mk', line 318)
pkg_aberth_description = Generic BERT-RPC server in Erlang
# makefile (from `erlang.mk', line 2928)
pkg_nprocreg_fetch = git
# makefile (from `erlang.mk', line 2648)
pkg_mc_erl_fetch = git
# makefile (from `erlang.mk', line 402)
pkg_asciideck_commit = master
# makefile (from `erlang.mk', line 405)
pkg_azdht_name = azdht
# makefile (from `erlang.mk', line 1934)
pkg_gen_icmp_description = Erlang interface to ICMP sockets
# makefile (from `erlang.mk', line 3153)
pkg_pqueue_repo = https://github.com/okeuday/pqueue
# makefile (from `erlang.mk', line 2746)
pkg_mochiweb_xpath_commit = master
# makefile (from `erlang.mk', line 1869)
pkg_fs_name = fs
# makefile (from `erlang.mk', line 2194)
pkg_iota_commit = master
# makefile (from `erlang.mk', line 3229)
pkg_qdate_name = qdate
# makefile (from `erlang.mk', line 325)
pkg_active_name = active
# makefile (from `erlang.mk', line 1656)
pkg_estatsd_fetch = git
# makefile (from `erlang.mk', line 485)
pkg_binpp_name = binpp
# makefile (from `erlang.mk', line 5185)
asn1_verbose_2 = set -x;
# makefile (from `erlang.mk', line 1496)
pkg_erlgit_fetch = git
# makefile (from `erlang.mk', line 3681)
pkg_slack_repo = https://github.com/DonBranson/slack.git
# makefile (from `erlang.mk', line 7173)
define hex_release_publish_summary.erl
	{ok, Tarball} = erl_tar:open("$(strip $(HEX_TARBALL_OUTPUT_FILE))", [read]),
	ok = erl_tar:extract(Tarball, [{cwd, "$(ERLANG_MK_TMP)"}, {files, ["metadata.config"]}]),
	{ok, Metadata} = file:consult("$(ERLANG_MK_TMP)/metadata.config"),
	#{
		<<"name">> := Name,
		<<"version">> := Version,
		<<"files">> := Files,
		<<"requirements">> := Deps
	} = maps:from_list(Metadata),
	io:format("Publishing ~s ~s~n  Dependencies:~n", [Name, Version]),
	case Deps of
		[] ->
			io:format("    (none)~n");
		_ ->
			[begin
				#{<<"app">> := DA, <<"requirement">> := DR} = maps:from_list(D),
				io:format("    ~s ~s~n", [DA, DR])
			end || {_, D} <- Deps]
	end,
	io:format("  Included files:~n"),
	[io:format("    ~s~n", [F]) || F <- Files],
	io:format("You may also review the contents of the tarball file.~n"
		"Please enter your secret key to proceed.~n"),
	halt(0)
endef
# makefile (from `erlang.mk', line 3061)
pkg_pgo_name = pgo
# makefile (from `erlang.mk', line 6261)
C_SRC_TYPE = shared
# makefile (from `erlang.mk', line 2142)
pkg_hpack_description = HPACK Implementation for Erlang
# makefile (from `erlang.mk', line 934)
pkg_cpg_description = CloudI Process Groups
# makefile (from `erlang.mk', line 4050)
pkg_uuid_commit = master
# makefile (from `erlang.mk', line 1215)
pkg_elarm_homepage = https://github.com/esl/elarm
# makefile (from `erlang.mk', line 378)
pkg_annotations_commit = master
# makefile (from `erlang.mk', line 4374)
query_repo_cp = $(call query_repo_default,$(1))
# makefile (from `erlang.mk', line 1669)
pkg_etest_name = etest
# makefile (from `erlang.mk', line 2032)
pkg_gin_fetch = git
# makefile (from `erlang.mk', line 2281)
pkg_joxa_repo = https://github.com/joxa/joxa
# makefile (from `erlang.mk', line 2130)
pkg_hanoidb_commit = master
# makefile (from `erlang.mk', line 5012)
dep_fetch_git-submodule = 	git submodule update --init -- $(DEPS_DIR)/$1;
# makefile (from `erlang.mk', line 2057)
pkg_gpb_repo = https://github.com/tomas-abrahamsson/gpb
# makefile (from `erlang.mk', line 3477)
pkg_riak_sysmon_name = riak_sysmon
# makefile (from `erlang.mk', line 1345)
pkg_eqm_repo = https://github.com/loucash/eqm
# makefile (from `erlang.mk', line 1693)
pkg_eunit_name = eunit
# makefile (from `erlang.mk', line 3058)
pkg_percept2_commit = master
# makefile (from `erlang.mk', line 693)
pkg_cloudi_service_db_cassandra_cql_name = cloudi_service_db_cassandra_cql
# makefile (from `erlang.mk', line 2209)
pkg_ircd_repo = https://github.com/tonyg/erlang-ircd
# makefile (from `erlang.mk', line 3565)
pkg_service_name = service
# makefile (from `erlang.mk', line 2085)
pkg_grpc_client_name = grpc_client
# makefile (from `erlang.mk', line 4160)
pkg_websocket_client_fetch = git
# makefile (from `erlang.mk', line 4536)
dep_autopatch = 	if [ -f $(DEPS_DIR)/$(1)/erlang.mk ]; then rm -rf $(DEPS_DIR)/$1/ebin/; $(call erlang,$(call dep_autopatch_appsrc.erl,$(1))); $(call dep_autopatch_erlang_mk,$(1)); elif [ -f $(DEPS_DIR)/$(1)/Makefile ]; then if [ -f $(DEPS_DIR)/$1/rebar.lock ]; then $(call dep_autopatch2,$1); elif [ 0 != `grep -c "include ../\w*\.mk" $(DEPS_DIR)/$(1)/Makefile` ]; then $(call dep_autopatch2,$(1)); elif [ 0 != `grep -ci "^[^#].*rebar" $(DEPS_DIR)/$(1)/Makefile` ]; then $(call dep_autopatch2,$(1)); elif [ -n "`find $(DEPS_DIR)/$(1)/ -type f -name \*.mk -not -name erlang.mk -exec grep -i "^[^#].*rebar" '{}' \;`" ]; then $(call dep_autopatch2,$(1)); fi else if [ ! -d $(DEPS_DIR)/$(1)/src/ ]; then $(call dep_autopatch_noop,$(1)); else $(call dep_autopatch2,$(1)); fi fi
# makefile (from `erlang.mk', line 3440)
pkg_riak_dt_fetch = git
# makefile (from `erlang.mk', line 2023)
pkg_giallo_homepage = https://github.com/kivra/giallo
# makefile (from `erlang.mk', line 4039)
pkg_unsplit_homepage = https://github.com/uwiger/unsplit
# makefile (from `erlang.mk', line 3725)
pkg_srly_name = srly
 
# makefile (from `erlang.mk', line 2734)
pkg_mochiweb_description = MochiWeb is an Erlang library for building lightweight HTTP servers.
# makefile (from `erlang.mk', line 2570)
pkg_log4erl_commit = master
# makefile (from `erlang.mk', line 1845)
pkg_folsom_name = folsom
# makefile (from `erlang.mk', line 7661)
SPHINX_CONFDIR = 
# makefile (from `erlang.mk', line 3127)
pkg_ponos_homepage = https://github.com/klarna/ponos
# makefile (from `erlang.mk', line 2694)
pkg_merge_index_description = MergeIndex is an Erlang library for storing ordered sets on disk. It is very similar to an SSTable (in Google's Bigtable) or an HFile (in Hadoop).
# makefile (from `erlang.mk', line 3370)
pkg_redo_commit = master
# makefile (from `erlang.mk', line 1727)
pkg_exec_homepage = http://saleyn.github.com/erlexec
# makefile (from `erlang.mk', line 2247)
pkg_jesse_homepage = https://github.com/for-GET/jesse
# makefile (from `erlang.mk', line 3799)
pkg_stripe_homepage = https://github.com/mattsta/stripe-erlang
# makefile (from `erlang.mk', line 502)
pkg_bitcask_description = because you need another a key/value storage engine
# makefile (from `erlang.mk', line 6505)
CI_HIPE = 
# makefile (from `erlang.mk', line 3485)
pkg_riak_test_name = riak_test
# makefile (from `erlang.mk', line 2647)
pkg_mc_erl_homepage = https://github.com/clonejo/mc-erl
# makefile (from `erlang.mk', line 3125)
pkg_ponos_name = ponos
# makefile (from `erlang.mk', line 3241)
pkg_qrcode_repo = https://github.com/komone/qrcode
# makefile (from `erlang.mk', line 3445)
pkg_riak_ensemble_name = riak_ensemble
# makefile (from `erlang.mk', line 1680)
pkg_etest_http_fetch = git
# makefile (from `erlang.mk', line 5213)
define app_file
{application, '$(PROJECT)', [
	{description, "$(PROJECT_DESCRIPTION)"},
	{vsn, "$(PROJECT_VERSION)"},$(if $(IS_DEP),
	{id$(comma)$(space)"$(1)"}$(comma))
	{modules, [$(call comma_list,$(2))]},
	{registered, [$(call comma_list,$(PROJECT)_sup $(PROJECT_REGISTERED))]},
	{applications, [$(call comma_list,kernel stdlib $(OTP_DEPS) $(LOCAL_DEPS) $(foreach dep,$(DEPS),$(call dep_name,$(dep))))]},
	{mod, {$(PROJECT_MOD), []}},
	{env, $(subst \,\\,$(PROJECT_ENV))}$(if $(findstring {,$(PROJECT_APP_EXTRA_KEYS)),$(comma)$(newline)$(tab)$(subst \,\\,$(PROJECT_APP_EXTRA_KEYS)),)
]}.
endef
# makefile (from `erlang.mk', line 360)
pkg_alog_fetch = git
# makefile (from `erlang.mk', line 317)
pkg_aberth_name = aberth
# makefile (from `erlang.mk', line 4223)
pkg_yaws_homepage = http://yaws.hyber.org
# makefile (from `erlang.mk', line 7477)
RELX_OUTPUT_DIR = _rel
# makefile (from `erlang.mk', line 3896)
pkg_tddreloader_fetch = git
# makefile (from `erlang.mk', line 1310)
pkg_episcina_description = A simple non intrusive resource pool for connections
# makefile (from `erlang.mk', line 2351)
pkg_kafka_protocol_homepage = https://github.com/klarna/kafka_protocol
# makefile (from `erlang.mk', line 2968)
pkg_of_protocol_fetch = git
# makefile (from `erlang.mk', line 1506)
pkg_erlguten_commit = master
# makefile (from `erlang.mk', line 3638)
pkg_sighandler_description = Handle UNIX signals in Er    lang
# makefile (from `erlang.mk', line 3754)
pkg_statebox_commit = master
# makefile (from `erlang.mk', line 729)
pkg_cloudi_service_db_mysql_repo = https://github.com/CloudI/cloudi_service_db_mysql
# makefile (from `erlang.mk', line 1250)
pkg_elvis_commit = master
# makefile (from `erlang.mk', line 898)
pkg_couchbeam_commit = master
# makefile (from `erlang.mk', line 1753)
pkg_exs1024_repo = https://github.com/jj1bdx/exs1024
# makefile (from `erlang.mk', line 2657)
pkg_mcd_repo = https://github.com/EchoTeam/mcd
# makefile (from `erlang.mk', line 3337)
pkg_rec2json_repo = https://github.com/lordnull/rec2json
# makefile (from `erlang.mk', line 2562)
pkg_locks_commit = master
# makefile (from `erlang.mk', line 3514)
pkg_riaknostic_commit = master
# makefile (from `erlang.mk', line 3759)
pkg_statebox_riak_homepage = https://github.com/mochi/statebox_riak
# makefile (from `erlang.mk', line 4334)
REBAR_GIT = https://github.com/rebar/rebar
# makefile (from `erlang.mk', line 1231)
pkg_elixir_homepage = https://elixir-lang.org/
# makefile (from `erlang.mk', line 447)
pkg_beam_homepage = https://github.com/tonyrog/beam
# makefile (from `erlang.mk', line 382)
pkg_antidote_description = Large-scale computation without synchronisation
# makefile (from `erlang.mk', line 4112)
pkg_vmq_server_fetch = git
# makefile (from `erlang.mk', line 2809)
pkg_mustache_repo = https://github.com/mojombo/mustache.erl
# makefile (from `erlang.mk', line 7663)
SPHINX_DOCTREES = $(ERLANG_MK_TMP)/sphinx.doctrees
# makefile (from `erlang.mk', line 4101)
pkg_vmq_passwd_name = vmq_passwd
# makefile (from `erlang.mk', line 2959)
pkg_octopus_homepage = https://github.com/erlangbureau/octopus
# makefile (from `erlang.mk', line 1486)
pkg_erlfsmon_description = Erlang filesystem event watcher for Linux and OSX
# makefile (from `erlang.mk', line 2894)
pkg_nkdocker_description = Erlang Docker client
# makefile (from `erlang.mk', line 1169)
pkg_egeoip_repo = https://github.com/mochi/egeoip
# makefile (from `erlang.mk', line 2526)
pkg_ling_description = Erlang on Xen
# makefile (from `erlang.mk', line 1304)
pkg_epgsql_fetch = git
# makefile (from `erlang.mk', line 933)
pkg_cpg_name = cpg
# makefile (from `erlang.mk', line 3950)
pkg_traffic_tools_description = Simple traffic limiting library
# makefile (from `erlang.mk', line 858)
pkg_cloudi_service_validate_commit = master
# makefile (from `erlang.mk', line 1137)
pkg_edown_repo = https://github.com/uwiger/edown
# makefile (from `erlang.mk', line 2910)
pkg_nksip_description = Erlang SIP application server
# makefile (from `erlang.mk', line 3033)
pkg_parsexml_repo = https://github.com/maxlapshin/parsexml
# makefile (from `erlang.mk', line 3213)
pkg_purity_name = purity
# makefile (from `erlang.mk', line 2878)
pkg_nitrogen_core_description = The core Nitrogen library.
# makefile (from `erlang.mk', line 3797)
pkg_stripe_name = stripe
# makefile (from `erlang.mk', line 1479)
pkg_erldocker_homepage = https://github.com/proger/erldocker
# makefile (from `erlang.mk', line 5855)
define tpl_supervisor
-module($(n)).
-behaviour(supervisor).

-export([start_link/0]).
-export([init/1]).

start_link() ->
	supervisor:start_link({local, ?MODULE}, ?MODULE, []).

init([]) ->
	Procs = [],
	{ok, {{one_for_one, 1, 5}, Procs}}.
 
endef
# makefile (from `erlang.mk', line 522)
pkg_bootstrap_commit = master
# makefile (from `erlang.mk', line 2311)
pkg_jsonerl_homepage = https://github.com/lambder/jsonerl
# makefile (from `erlang.mk', line 3390)
pkg_relx_description = Sane, simple release creation for Erlang
# makefile (from `erlang.mk', line 817)
pkg_cloudi_service_quorum_repo = https://github.com/CloudI/cloudi_service_quorum
# makefile (from `erlang.mk', line 2958)
pkg_octopus_description = Small and flexible pool manager written in Erlang
# makefile (from `erlang.mk', line 4192)
pkg_xhttpc_fetch = git
# makefile (from `erlang.mk', line 3375)
pkg_reload_mk_homepage = https://github.com/bullno1/reload.mk
# makefile (from `erlang.mk', line 2693)
pkg_merge_index_name = merge_index
# makefile (from `erlang.mk', line 1706)
pkg_eunit_formatters_commit = master
# makefile (from `erlang.mk', line 2397)
pkg_kinetic_name = kinetic
# makefile (from `erlang.mk', line 1610)
pkg_errd_commit = master
# makefile (from `erlang.mk', line 2645)
pkg_mc_erl_name = mc_erl
# makefile (from `erlang.mk', line 501)
pkg_bitcask_name = bitcask
# makefile (from `erlang.mk', line 3480)
pkg_riak_sysmon_fetch = git
# makefile (from `erlang.mk', line 3538)
pkg_rlimit_commit = master
# makefile (from `erlang.mk', line 2954)
pkg_observer_cli_commit = master
# makefile (from `erlang.mk', line 3232)
pkg_qdate_fetch = git
# makefile (from `erlang.mk', line 1016)
pkg_dirbusterl_fetch = git
# makefile (from `erlang.mk', line 3384)
pkg_reltool_util_fetch = git
# makefile (from `erlang.mk', line 656)
pkg_clique_fetch = git
# makefile (from `erlang.mk', line 2978)
pkg_opencouch_commit = master
# makefile (from `erlang.mk', line 528)
pkg_boss_fetch = git
# makefile (from `erlang.mk', line 638)
pkg_chumak_description = Pure Erlang implementation of ZeroMQ Message Transport Protocol.
# makefile (from `erlang.mk', line 154)
empty := 
# makefile (from `erlang.mk', line 6727)
DIALYZER_PLT = $(CURDIR)/.$(PROJECT).plt
# makefile (from `erlang.mk', line 3726)
pkg_srly_description = Native Erlang Unix serial interface
# makefile (from `erlang.mk', line 3858)
pkg_syn_commit = master
# makefile (from `erlang.mk', line 3816)
pkg_supervisor3_fetch = git
# makefile (from `erlang.mk', line 2434)
pkg_kvc_commit = master
# makefile (from `erlang.mk', line 984)
pkg_decimal_fetch = git
# makefile (from `erlang.mk', line 3102)
pkg_plumtree_description = Epidemic Broadcast Trees
# makefile (from `erlang.mk', line 7412)
proto_verbose_0 = @echo " PROTO " $(filter %.proto,$(?F));
# makefile (from `erlang.mk', line 3393)
pkg_relx_repo = https://github.com/erlware/relx
# makefile (from `erlang.mk', line 1366)
pkg_erl_streams_description = Streams in Erlang
# makefile (from `erlang.mk', line 2682)
pkg_mekao_commit = master
# makefile (from `erlang.mk', line 1270)
pkg_enm_description = Erlang driver for nanomsg
# makefile (from `erlang.mk', line 6307)
CXXFLAGS = -O3 -arch x86_64 -Wall -fPIC -I"$(ERTS_INCLUDE_DIR)" -I"$(ERL_INTERFACE_INCLUDE_DIR)"
# makefile (from `erlang.mk', line 1777)
pkg_exsplus128_repo = https://github.com/jj1bdx/exsplus128
# makefile (from `erlang.mk', line 3885)
pkg_taskforce_name = taskforce
# makefile (from `erlang.mk', line 1943)
pkg_gen_leader_homepage = https://github.com/garret-smith/gen_leader_revival
# makefile (from `erlang.mk', line 3937)
pkg_tirerl_repo = https://github.com/inaka/tirerl
# makefile (from `erlang.mk', line 2559)
pkg_locks_homepage = https://github.com/uwiger/locks
# makefile (from `erlang.mk', line 1242)
pkg_elli_commit = master
# makefile (from `erlang.mk', line 3976)
pkg_transit_fetch = git
# makefile (from `erlang.mk', line 3786)
pkg_stdinout_pool_commit = master
# environment
COMMAND_MODE = unix2003
# makefile (from `erlang.mk', line 381)
pkg_antidote_name = antidote
# variable set hash-table stats:
# Load=3411/4096=83%, Rehash=2, Collisions=13684/8524=161%

# Pattern-specific Variable Values

# No pattern-specific variable values.

# Directories

# ebin: could not be stat'd.
# /Users/alex/Desktop/erlang/apps: could not be stat'd.
# /Users/alex/Desktop/erlang/c_src: could not be stat'd.
# /Users/alex/Desktop/erlang/test: could not be stat'd.
# . (device 16777230, inode 13633382): 11 files, no impossibilities.
# /Users/alex/Desktop/erlang (device 16777230, inode 13633382): 11 files, no impossibilities.
# config (device 16777230, inode 13639977): No files, no impossibilities so far.
# cover: could not be stat'd.
# src (device 16777230, inode 13639973): 4 files, no impossibilities.
# doc: could not be stat'd.

# 26 files, no impossibilities in 10 directories.

# Implicit Rules

# No implicit rules.

# Files

clean-crashdump:
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.

distclean-deps:
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
 
#  commands to execute (from `erlang.mk', line 5123):
	$(gen_verbose) rm -rf $(DEPS_DIR)
	

distclean-tmp:
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.
#  commands to execute (from `erlang.mk', line 126):
	$(gen_verbose) rm -rf $(ERLANG_MK_TMP)
	

clean-tmp-query.log:
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.
#  commands to execute (from `erlang.mk', line 8366):
	$(verbose) rm -f $(ERLANG_MK_TMP)/query.log
	

/Users/alex/Desktop/erlang/.erlang.mk/erlang.tar: hex-core app
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.
#  commands to execute (from `erlang.mk', line 7169):
	$(hex_tar_verbose) $(call erlang,$(call hex_tarball_create.erl))
	

escript:: escript-zip
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  commands to execute (from `erlang.mk', line 6935):
	$(gen_verbose) printf "%s\n" \
	"#!$(ESCRIPT_SHEBANG)" \
	"%% $(ESCRIPT_COMMENT)" \
	"%%! $(ESCRIPT_EMU_ARGS)" > $(ESCRIPT_FILE)
	$(verbose) cat $(ESCRIPT_ZIP_FILE) >> $(ESCRIPT_FILE)
	$(verbose) chmod +x $(ESCRIPT_FILE)
	

distclean-edoc:
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  commands to execute (from `erlang.mk', line 6829):
	$(gen_verbose) rm -f $(EDOC_OUTPUT)/*.css $(EDOC_OUTPUT)/*.html $(EDOC_OUTPUT)/*.png $(EDOC_OUTPUT)/edoc-info
	

bootstrap-rel:
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  commands to execute (from `erlang.mk', line 6183):
	$(error Error: relx.config already exists)
	$(error Error: config/ directory already exists)
	$(eval p := $(PROJECT))
	$(verbose) $(call core_render,bs_relx_config,relx.config)
	$(verbose) mkdir config/
	$(verbose) $(call core_render,bs_sys_config,config/sys.config)
	$(verbose) $(call core_render,bs_vm_args,config/vm.args)
	$(verbose) awk '/^include erlang.mk/ && !ins {print "BUILD_DEPS += relx";ins=1};{print}' Makefile > Makefile.bak
	$(verbose) mv Makefile.bak Makefile
	

query-doc-deps: /Users/alex/Desktop/erlang/.erlang.mk/recursive-doc-deps-list.log clean-tmp-query.log
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  commands to execute (from `erlang.mk', line 8370):
	@ rm -f /Users/alex/Desktop/erlang/.erlang.mk/query-doc-deps.log
	@ 
	@ touch /Users/alex/Desktop/erlang/.erlang.mk/query-doc-deps.log
	@ cat /Users/alex/Desktop/erlang/.erlang.mk/query-doc-deps.log
	

fetch-rel-deps: /Users/alex/Desktop/erlang/.erlang.mk/recursive-rel-deps-list.log
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.

apps-ct:
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.

list-doc-deps: /Users/alex/Desktop/erlang/.erlang.mk/recursive-doc-deps-list.log
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  commands to execute (from `erlang.mk', line 8333):
	$(verbose) cat $^
	

cover-report-clean:
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  commands to execute (from `erlang.mk', line 8117):
	$(gen_verbose) rm -rf $(COVER_REPORT_DIR)
	

all:: deps app rel
#  Phony target (prerequisite of .PHONY).
#  Command-line target.
#  Implicit rule search has not been done.
#  File does not exist.
#  File has been updated.
#  Needs to be updated (-q is set).
# variable set hash-table stats:
# Load=0/32=0%, Rehash=0, Collisions=0/9=0%

distclean-ct:
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  commands to execute (from `erlang.mk', line 6718):
	$(gen_verbose) rm -rf $(CT_LOGS_DIR)
	

relx-post-rel::
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.
#  commands to execute (from `erlang.mk', line 7558):
	$(verbose) :
	

dialyze: /Users/alex/Desktop/erlang/.erlang.plt
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  commands to execute (from `erlang.mk', line 6791):
 
	$(verbose) dialyzer --no_native `$(ERL) \
	-eval "$(subst $(newline),,$(call escape_dquotes,$(call filter_opts.erl)))" \
	-extra $(ERLC_OPTS)` $(DIALYZER_DIRS) $(DIALYZER_OPTS) $(if $(wildcard ebin/),-pa ebin/)
	

test-deps:
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  commands to execute (from `erlang.mk', line 5557):
	$(verbose) set -e; for dep in $(ALL_TEST_DEPS_DIRS) ; do \
	if [ -z "$(strip $(FULL))" ] && [ ! -L $$dep ] && [ -f $$dep/ebin/dep_built ]; then \
	:; \
	else \
	$(MAKE) -C $$dep IS_DEP=1; \
	if [ ! -L $$dep ] && [ -d $$dep/ebin ]; then touch $$dep/ebin/dep_built; fi; \
	fi \
	done
	

.PHONY: all app apps deps search rel relup docs install-docs check tests clean distclean help erlang-mk distclean-kerl search distclean-deps clean-tmp-deps.log autopatch-relx clean-app docs-deps rel-deps test-deps test-dir test-build clean-test-dir rebar.config bootstrap bootstrap-lib bootstrap-rel new list-templates clean-c_src distclean-c_src-env ci ci-prepare ci-setup ct apps-ct distclean-ct plt distclean-plt dialyze distclean-edoc edoc distclean-escript escript escript-zip eunit apps-eunit autopatch-hex_core relx-rel relx-relup distclean-relx-rel run shell distclean-sphinx sphinx show-ERL_LIBS show-ERLC_OPTS show-TEST_ERLC_OPTS xref coverdata-clean cover-report-clean cover-report sfx fetch-deps fetch-doc-deps fetch-rel-deps fetch-test-deps fetch-shell-deps /Users/alex/Desktop/erlang/.erlang.mk/recursive-deps-list.log /Users/alex/Desktop/erlang/.erlang.mk/recursive-doc-deps-list.log /Users/alex/Desktop/erlang/.erlang.mk/recursive-rel-deps-list.log /Users/alex/Desktop/erlang/.erlang.mk/recursive-test-deps-list.log /Users/alex/Desktop/erlang/.erlang.mk/recursive-shell-deps-list.log list-deps list-doc-deps list-rel-deps list-test-deps list-shell-deps query-deps query-doc-deps query-rel-deps query-test-deps query-shell-deps
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.

/Users/alex/Desktop/erlang/.erlang.mk/erlang-docs.tar.gz: hex-core app docs
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.
#  commands to execute (from `erlang.mk', line 7297):
	$(hex_tar_verbose) tar czf $(HEX_DOCS_TARBALL_OUTPUT_FILE) -C $(HEX_DOCS_DOC_DIR) \
	$(HEX_DOCS_TARBALL_FILES:$(HEX_DOCS_DOC_DIR)%=%)
	

escript-zip:: deps app
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
# makefile (from `erlang.mk', line 6923)
# FULL = 1
# variable set hash-table stats:
# Load=1/32=3%, Rehash=0, Collisions=0/1=0%
#  commands to execute (from `erlang.mk', line 6925):
	$(verbose) mkdir -p $(dir $(ESCRIPT_ZIP))
	$(verbose) rm -f $(ESCRIPT_ZIP_FILE)
	$(gen_verbose) cd .. && $(ESCRIPT_ZIP) $(ESCRIPT_ZIP_FILE) $(PROJECT)/ebin/*
	

/Users/alex/Desktop/erlang/.erlang.mk/last-makefile-change: Makefile erlang.mk | /Users/alex/Desktop/erlang/.erlang.mk
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.
#  commands to execute (from `erlang.mk', line 5421):
	$(verbose) if test -f $@; then \
	touch $(ERL_FILES) $(CORE_FILES) $(ASN1_FILES) $(MIB_FILES) $(XRL_FILES) $(YRL_FILES); \
	touch -c $(PROJECT).d; \
	fi
	$(verbose) touch $@
	

clean-tmp-deps.log:
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  Implicit/static pattern stem: `'
#  File does not exist.
#  File has been updated.
#  Needs to be updated (-q is set).
# automatic
# @ := clean-tmp-deps.log
# automatic
# % := 
# automatic
# * := 
# automatic
# + := 
# automatic
# | := 
# automatic
# < := 
# automatic
# ^ := 
# automatic
# ? := 
# variable set hash-table stats:
# Load=8/32=25%, Rehash=0, Collisions=6/17=35%
#  commands to execute (from `erlang.mk', line 4485):
	$(verbose) rm -f $(ERLANG_MK_TMP)/apps.log $(ERLANG_MK_TMP)/deps.log
	

hex-release-replace: hex-core hex-release-tarball
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.
#  commands to execute (from `erlang.mk', line 7227):
	$(if $(HEX_SECRET),,$(eval HEX_SECRET := $(shell stty -echo; read -p "Secret: " secret; stty echo; echo $$secret) $(info )))
	$(gen_verbose) $(call erlang,$(call hex_release_publish.erl,$(HEX_SECRET),true))
	

relup:: deps app
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.

relup:: relx-relup
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.

erlang.d::
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.
#  commands to execute (from `erlang.mk', line 5277):
	$(if $(strip $?),$(xyrl_verbose) erlc -v -o src/ $(YRL_ERLC_OPTS) $?)
	

erlang.d:: src/erlang_app.erl src/erlang_sup.erl Makefile erlang.mk
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.
#  commands to execute (from `erlang.mk', line 5414):
	$(makedep_verbose) $(call erlang,$(call makedep.erl,$@))
	

erlang.d::
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.
#  commands to execute (from `erlang.mk', line 5433):
	$(verbose) :
	

distclean-sphinx:
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
 
#  File does not exist.
#  File has not been updated.
#  commands to execute (from `erlang.mk', line 7713):
	$(gen_verbose) rm -rf $(filter-out $(SPHINX_SOURCE),$(foreach F,$(SPHINX_FORMATS),$(call sphinx.output,$F)))
	

new:
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  commands to execute (from `erlang.mk', line 6236):
	$(error Usage: $(MAKE) new t=TEMPLATE n=NAME [in=APP])
	$(error Usage: $(MAKE) new t=TEMPLATE n=NAME [in=APP])
	$(verbose) $(call core_render,tpl_$(t),src/$(n).erl)
	

hex-tarball-create: /Users/alex/Desktop/erlang/.erlang.mk/erlang.tar
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.

cover-report:
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.

apps:: clean-tmp-deps.log | /Users/alex/Desktop/erlang/.erlang.mk
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has been updated.
#  Needs to be updated (-q is set).
# variable set hash-table stats:
# Load=0/32=0%, Rehash=0, Collisions=0/9=0%

all.coverdata: cover-data-dir
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.
#  commands to execute (from `erlang.mk', line 8108):
	$(gen_verbose) $(call erlang,$(cover_export.erl))
	

distclean:: clean distclean-tmp
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.

distclean:: distclean-kerl
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.

distclean:: distclean-apps
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.

distclean:: distclean-deps
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.

distclean:: distclean-ct
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.

distclean:: distclean-plt
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.

distclean:: distclean-edoc
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.

distclean:: distclean-escript
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.

distclean:: distclean-relx-rel
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.

distclean:: cover-report-clean
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.

hex-release-unretire: hex-core
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.
#  commands to execute (from `erlang.mk', line 7288):
	$(if $(HEX_SECRET),,$(eval HEX_SECRET := $(shell stty -echo; read -p "Secret: " secret; stty echo; echo $$secret) $(info )))
	$(gen_verbose) $(call erlang,$(call hex_release_unretire.erl,$(HEX_SECRET),\
	$(if $(HEX_VERSION),$(HEX_VERSION),$(PROJECT_VERSION))))
	

deps:: /Users/alex/Desktop/erlang/deps/relx apps clean-tmp-deps.log | /Users/alex/Desktop/erlang/.erlang.mk
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has been updated.
#  Needs to be updated (-q is set).
# variable set hash-table stats:
# Load=0/32=0%, Rehash=0, Collisions=0/9=0%
#  commands to execute (from `erlang.mk', line 4512):
	$(verbose) set -e; for dep in $(ALL_DEPS_DIRS); do \
	if grep -qs ^$$dep$$ $(ERLANG_MK_TMP)/deps.log; then \
	:; \
	else \
	echo $$dep >> $(ERLANG_MK_TMP)/deps.log; \
	if [ -z "$(strip $(FULL))" ] $(if $(force_rebuild_dep),&& ! ($(call force_rebuild_dep,$$dep)),) && [ ! -L $$dep ] && [ -f $$dep/ebin/dep_built ]; then \
	:; \
	elif [ -f $$dep/GNUmakefile ] || [ -f $$dep/makefile ] || [ -f $$dep/Makefile ]; then \
	$(MAKE) -C $$dep IS_DEP=1; \
	if [ ! -L $$dep ] && [ -d $$dep/ebin ]; then touch $$dep/ebin/dep_built; fi; \
	else \
	echo "Error: No Makefile to build dependency $$dep." >&2; \
	exit 2; \
	fi \
	fi \
	done
	

hex-release-tarball: hex-core /Users/alex/Desktop/erlang/.erlang.mk/erlang.tar
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.
#  commands to execute (from `erlang.mk', line 7220):
	$(verbose) $(call erlang,$(call hex_release_publish_summary.erl))
	

autopatch-relx::
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  commands to execute (from `erlang.mk', line 5101):
	@ if [ "relx" = "amqp_client" -a "" ]; then if [ ! -d /Users/alex/Desktop/erlang/deps/rabbitmq-codegen ]; then echo " PATCH  Downloading rabbitmq-codegen"; git clone https://github.com/rabbitmq/rabbitmq-codegen.git /Users/alex/Desktop/erlang/deps/rabbitmq-codegen; fi; if [ ! -d /Users/alex/Desktop/erlang/deps/rabbitmq-server ]; then echo " PATCH  Downloading rabbitmq-server"; git clone https://github.com/rabbitmq/rabbitmq-server.git /Users/alex/Desktop/erlang/deps/rabbitmq-server; fi; ln -s /Users/alex/Desktop/erlang/deps/amqp_client/deps/rabbit_common-0.0.0 /Users/alex/Desktop/erlang/deps/rabbit_common; elif [ "relx" = "rabbit" -a "" ]; then if [ ! -d /Users/alex/Desktop/erlang/deps/rabbitmq-codegen ]; then echo " PATCH  Downloading rabbitmq-codegen"; git clone https://github.com/rabbitmq/rabbitmq-codegen.git /Users/alex/Desktop/erlang/deps/rabbitmq-codegen; fi elif [ "relx" = "elixir" -a "" ]; then ln -s lib/elixir/ebin /Users/alex/Desktop/erlang/deps/elixir/; else $(call dep_autopatch,relx) fi
	

tests:: ct
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.

tests:: eunit
#  Phony target (prerequisite of .PHONY).
 
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.

query-rel-deps: /Users/alex/Desktop/erlang/.erlang.mk/recursive-rel-deps-list.log clean-tmp-query.log
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  commands to execute (from `erlang.mk', line 8371):
	@ rm -f /Users/alex/Desktop/erlang/.erlang.mk/query-rel-deps.log
	@ 
	@ touch /Users/alex/Desktop/erlang/.erlang.mk/query-rel-deps.log
	@ cat /Users/alex/Desktop/erlang/.erlang.mk/query-rel-deps.log
	

erlang-mk:
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
# makefile (from `erlang.mk', line 208)
# WITHOUT = $(ERLANG_MK_WITHOUT)
# variable set hash-table stats:
# Load=1/32=3%, Rehash=0, Collisions=0/2=0%
#  commands to execute (from `erlang.mk', line 214):
	$(verbose) git clone --depth 1 $(ERLANG_MK_REPO) $(ERLANG_MK_BUILD_DIR)
	$(verbose) if [ -f $(ERLANG_MK_BUILD_CONFIG) ]; then cp $(ERLANG_MK_BUILD_CONFIG) $(ERLANG_MK_BUILD_DIR)/build.config; fi
	$(gen_verbose) $(MAKE) --no-print-directory -C $(ERLANG_MK_BUILD_DIR) WITHOUT='$(strip $(WITHOUT))' UPGRADE=1
	$(verbose) cp $(ERLANG_MK_BUILD_DIR)/erlang.mk ./erlang.mk
	$(verbose) rm -rf $(ERLANG_MK_BUILD_DIR)
	$(verbose) rm -rf $(ERLANG_MK_TMP)
	

/Users/alex/Desktop/erlang/.erlang.mk/recursive-shell-deps-list.log: /Users/alex/Desktop/erlang/deps/relx | /Users/alex/Desktop/erlang/.erlang.mk
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  commands to execute (from `erlang.mk', line 8297):
	$(verbose) rm -f $(ERLANG_MK_RECURSIVE_TMP_LIST)
	$(verbose) touch $(ERLANG_MK_RECURSIVE_TMP_LIST)
	$(verbose) set -e; for dep in $^ ; do \
	if ! grep -qs ^$$dep$$ $(ERLANG_MK_RECURSIVE_TMP_LIST); then \
	echo $$dep >> $(ERLANG_MK_RECURSIVE_TMP_LIST); \
	if grep -qs -E "^[[:blank:]]*include[[:blank:]]+(erlang\.mk|.*/erlang\.mk|.*ERLANG_MK_FILENAME.*)$$" \
	$$dep/GNUmakefile $$dep/makefile $$dep/Makefile; then \
	$(MAKE) -C $$dep fetch-deps \
	IS_DEP=1 \
	ERLANG_MK_RECURSIVE_TMP_LIST=$(ERLANG_MK_RECURSIVE_TMP_LIST); \
	fi \
	fi \
	done
	$(verbose) sort < $(ERLANG_MK_RECURSIVE_TMP_LIST) | \
	uniq > $(ERLANG_MK_RECURSIVE_TMP_LIST).sorted
	$(verbose) cmp -s $(ERLANG_MK_RECURSIVE_TMP_LIST).sorted $@ \
	|| mv $(ERLANG_MK_RECURSIVE_TMP_LIST).sorted $@
	$(verbose) rm -f $(ERLANG_MK_RECURSIVE_TMP_LIST).sorted
	$(verbose) rm $(ERLANG_MK_RECURSIVE_TMP_LIST)
	

fetch-test-deps: /Users/alex/Desktop/erlang/.erlang.mk/recursive-test-deps-list.log
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.

# Not a target:
.SUFFIXES:
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.

list-rel-deps: /Users/alex/Desktop/erlang/.erlang.mk/recursive-rel-deps-list.log
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  commands to execute (from `erlang.mk', line 8333):
	$(verbose) cat $^
	

# Not a target:
Makefile:
#  Implicit rule search has been done.
#  Last modified 2022-05-31 13:14:47
#  File has been updated.
#  Successfully updated.
# variable set hash-table stats:
# Load=0/32=0%, Rehash=0, Collisions=0/0=0%

list-templates:
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  commands to execute (from `erlang.mk', line 6248):
	$(verbose) @echo Available templates:
	$(verbose) printf "    %s\n" $(sort $(patsubst tpl_%,%,$(filter tpl_%,$(.VARIABLES))))
	

app:: deps
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  commands to execute (from `erlang.mk', line 5197):
	$(verbose) $(MAKE) --no-print-directory $(PROJECT).d
	$(verbose) $(MAKE) --no-print-directory app-build
	

bootstrap:
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  commands to execute (from `erlang.mk', line 6152):
	$(error Error: src/ directory already exists)
	$(eval p := $(PROJECT))
	$(if $(shell echo $p | LC_ALL=C grep -x "[a-z0-9_]*"),,\
	$(error Error: Invalid characters in the application name))
	$(eval n := $(PROJECT)_sup)
	$(verbose) $(call core_render,bs_Makefile,Makefile)
	$(verbose) echo "include erlang.mk" >> Makefile
	$(verbose) mkdir src/
	$(verbose) $(call core_render,bs_app,src/$(PROJECT)_app.erl)
	$(verbose) $(call core_render,tpl_supervisor,src/$(PROJECT)_sup.erl)
	

fetch-deps: /Users/alex/Desktop/erlang/.erlang.mk/recursive-deps-list.log
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.

install-docs:
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.

hex-docs-delete: hex-core
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.
#  commands to execute (from `erlang.mk', line 7341):
	$(if $(HEX_SECRET),,$(eval HEX_SECRET := $(shell stty -echo; read -p "Secret: " secret; stty echo; echo $$secret) $(info )))
	$(gen_verbose) $(call erlang,$(call hex_docs_delete.erl,$(HEX_SECRET),\
	$(if $(HEX_VERSION),$(HEX_VERSION),$(PROJECT_VERSION))))
	

/Users/alex/Desktop/erlang/.erlang.mk/kerl/kerl: /Users/alex/Desktop/erlang/.erlang.mk/kerl
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.

distclean-apps:
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.
#  commands to execute (from `erlang.mk', line 5114):
	$(verbose) set -e; for dep in $(ALL_APPS_DIRS) ; do \
	$(MAKE) -C $$dep distclean IS_APP=1; \
	done
	

apps-eunit:
 
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.

relx-rel: rel-deps app
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  commands to execute (from `erlang.mk', line 7539):
	$(call erlang,$(call relx_release.erl),-pa ebin/)
	$(verbose) $(MAKE) relx-post-rel
	$(call erlang,$(call relx_tar.erl),-pa ebin/)
	

query-test-deps: /Users/alex/Desktop/erlang/.erlang.mk/recursive-test-deps-list.log clean-tmp-query.log
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  commands to execute (from `erlang.mk', line 8372):
	@ rm -f /Users/alex/Desktop/erlang/.erlang.mk/query-test-deps.log
	@ 
	@ touch /Users/alex/Desktop/erlang/.erlang.mk/query-test-deps.log
	@ cat /Users/alex/Desktop/erlang/.erlang.mk/query-test-deps.log
	

test-dir:
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.

xref: deps app
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  commands to execute (from `erlang.mk', line 7996):
	$(verbose) $(call erlang,$(call xref.erl,check,$(XREF_CHECKS)),-pa ebin/)
	

list-test-deps: /Users/alex/Desktop/erlang/.erlang.mk/recursive-test-deps-list.log
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  commands to execute (from `erlang.mk', line 8333):
	$(verbose) cat $^
	

# Not a target:
erlang.mk:
#  Implicit rule search has been done.
#  Last modified 2022-05-31 13:14:47
#  File has been updated.
#  Successfully updated.
# variable set hash-table stats:
# Load=0/32=0%, Rehash=0, Collisions=0/0=0%

new-app:
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.
#  commands to execute (from `erlang.mk', line 6198):
	$(error Usage: $(MAKE) new-app in=APP)
	$(eval p := $(in))
	$(if $(shell echo $p | LC_ALL=C grep -x "[a-z0-9_]*"),,\
	$(error Error: Invalid characters in the application name))
	$(eval n := $(in)_sup)
	$(verbose) mkdir -p $(APPS_DIR)/$p/src/
	$(verbose) $(call core_render,bs_apps_Makefile,$(APPS_DIR)/$p/Makefile)
	$(verbose) $(call core_render,bs_app,$(APPS_DIR)/$p/src/$p_app.erl)
	$(verbose) $(call core_render,tpl_supervisor,$(APPS_DIR)/$p/src/$p_sup.erl)
	

help::
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  commands to execute (from `erlang.mk', line 129):
	$(verbose) printf "%s\n" \
	"erlang.mk (version $(ERLANG_MK_VERSION)) is distributed under the terms of the ISC License." \
	"Copyright (c) 2013-2016 Loïc Hoguin <essen@ninenines.eu>" \
	"" \
	"Usage: [V=1] $(MAKE) [target]..." \
	"" \
	"Core targets:" \
	"  all           Run deps, app and rel targets in that order" \
	"  app           Compile the project" \
	"  deps          Fetch dependencies (if needed) and compile them" \
	"  fetch-deps    Fetch dependencies recursively (if needed) without compiling them" \
	"  list-deps     List dependencies recursively on stdout" \
	"  search q=...  Search for a package in the built-in index" \
	"  rel           Build a release for this project, if applicable" \
	"  docs          Build the documentation for this project" \
	"  install-docs  Install the man pages for this project" \
	"  check         Compile and run all tests and analysis for this project" \
	"  tests         Run the tests for this project" \
	"  clean         Delete temporary and output files from most targets" \
	"  distclean     Delete all temporary and output files" \
	"  help          Display this help and exit" \
	"  erlang-mk     Update erlang.mk to the latest version"
	

help::
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  commands to execute (from `erlang.mk', line 5748):
	$(verbose) printf "%s\n" "" \
	"Bootstrap targets:" \
	"  bootstrap          Generate a skeleton of an OTP application" \
	"  bootstrap-lib      Generate a skeleton of an OTP library" \
	"  bootstrap-rel      Generate the files needed to build a release" \
	"  new-app in=NAME    Create a new local OTP application NAME" \
	"  new-lib in=NAME    Create a new local OTP library NAME" \
	"  new t=TPL n=NAME   Generate a module NAME based on the template TPL" \
	"  new t=T n=N in=APP Generate a module NAME based on the template TPL in APP" \
	"  list-templates     List available templates"
	

help::
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  commands to execute (from `erlang.mk', line 6656):
	$(verbose) printf "%s\n" "" \
	"Common_test targets:" \
	"  ct          Run all the common_test suites for this project" \
	"" \
	"All your common_test suites have their associated targets." \
	"A suite named http_SUITE can be ran using the ct-http target."
	

help::
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  commands to execute (from `erlang.mk', line 6742):
	$(verbose) printf "%s\n" "" \
	"Dialyzer targets:" \
	"  plt         Build a PLT file for this project" \
	"  dialyze     Analyze the project using Dialyzer"
	

help::
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  commands to execute (from `erlang.mk', line 6917):
	$(verbose) printf "%s\n" "" \
	"Escript targets:" \
	"  escript     Build an executable escript archive" \
	

help::
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  commands to execute (from `erlang.mk', line 6961):
	$(verbose) printf "%s\n" "" \
	"EUnit targets:" \
	"  eunit       Run all the EUnit tests for this project"
	

help::
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  commands to execute (from `erlang.mk', line 7603):
	$(verbose) printf "%s\n" "" \
	"Relx targets:" \
	"  run         Compile the project, build the release and run it"
	

help::
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  commands to execute (from `erlang.mk', line 7627):
	$(verbose) printf "%s\n" "" \
	"Shell targets:" \
	"  shell       Run an erlang shell with SHELL_OPTS or reasonable default"
	

help::
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
 
#  File has not been updated.
#  commands to execute (from `erlang.mk', line 7697):
	$(verbose) printf "%s\n" "" \
	"Sphinx targets:" \
	"  sphinx      Generate Sphinx documentation." \
	"" \
	"ReST sources and 'conf.py' file are expected in directory pointed by" \
	"SPHINX_SOURCE ('doc' by default). SPHINX_FORMATS lists formats to build (only" \
	"'html' format is generated by default); target directory can be specified by" \
	'setting sphinx_$${format}_output, for example: sphinx_html_output = output/html' \
	"Additional Sphinx options can be set in SPHINX_OPTS."
	

help::
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  commands to execute (from `erlang.mk', line 7835):
	$(verbose) printf '%s\n' '' \
	'Xref targets:' \
	'  xref         Analyze the project using Xref' \
	'  xref q=QUERY Evaluate an Xref query'
	

help::
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  commands to execute (from `erlang.mk', line 8082):
	$(verbose) printf "%s\n" "" \
	"Cover targets:" \
	"  cover-report  Generate a HTML coverage report from previously collected" \
	"                cover data." \
	"  all.coverdata Merge all coverdata files into all.coverdata." \
	"" \
	"If COVER=1 is set, coverage data is generated by the targets eunit and ct. The" \
	"target tests additionally generates a HTML coverage report from the combined" \
	"coverdata files from each of these testing tools. HTML reports can be disabled" \
	"by setting COVER_REPORT_DIR to empty."
	

help:: help-plugins
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.

/Users/alex/Desktop/erlang/.erlang.mk/recursive-doc-deps-list.log: /Users/alex/Desktop/erlang/deps/relx | /Users/alex/Desktop/erlang/.erlang.mk
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  commands to execute (from `erlang.mk', line 8297):
	$(verbose) rm -f $(ERLANG_MK_RECURSIVE_TMP_LIST)
	$(verbose) touch $(ERLANG_MK_RECURSIVE_TMP_LIST)
	$(verbose) set -e; for dep in $^ ; do \
	if ! grep -qs ^$$dep$$ $(ERLANG_MK_RECURSIVE_TMP_LIST); then \
	echo $$dep >> $(ERLANG_MK_RECURSIVE_TMP_LIST); \
	if grep -qs -E "^[[:blank:]]*include[[:blank:]]+(erlang\.mk|.*/erlang\.mk|.*ERLANG_MK_FILENAME.*)$$" \
	$$dep/GNUmakefile $$dep/makefile $$dep/Makefile; then \
	$(MAKE) -C $$dep fetch-deps \
	IS_DEP=1 \
	ERLANG_MK_RECURSIVE_TMP_LIST=$(ERLANG_MK_RECURSIVE_TMP_LIST); \
	fi \
	fi \
	done
	$(verbose) sort < $(ERLANG_MK_RECURSIVE_TMP_LIST) | \
	uniq > $(ERLANG_MK_RECURSIVE_TMP_LIST).sorted
	$(verbose) cmp -s $(ERLANG_MK_RECURSIVE_TMP_LIST).sorted $@ \
	|| mv $(ERLANG_MK_RECURSIVE_TMP_LIST).sorted $@
	$(verbose) rm -f $(ERLANG_MK_RECURSIVE_TMP_LIST).sorted
	$(verbose) rm $(ERLANG_MK_RECURSIVE_TMP_LIST)
	

rel-deps:
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  commands to execute (from `erlang.mk', line 5532):
	$(verbose) set -e; for dep in $(ALL_REL_DEPS_DIRS) ; do $(MAKE) -C $$dep; done
	

src/erlang_app.erl:: /Users/alex/Desktop/erlang/.erlang.mk/last-makefile-change
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.

query-deps: /Users/alex/Desktop/erlang/.erlang.mk/recursive-deps-list.log clean-tmp-query.log
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  commands to execute (from `erlang.mk', line 8369):
	@ rm -f /Users/alex/Desktop/erlang/.erlang.mk/query-deps.log
	@  echo erlang: relx git https://github.com/erlware/relx main >> /Users/alex/Desktop/erlang/.erlang.mk/query-deps.log ;
	@ set -e; for dep in relx  ; do if grep -qs ^$$dep$$ /Users/alex/Desktop/erlang/.erlang.mk/query.log; then :; else echo $$dep >> /Users/alex/Desktop/erlang/.erlang.mk/query.log; /Library/Developer/CommandLineTools/usr/bin/make -C /Users/alex/Desktop/erlang/deps/$$dep $@ QUERY="name fetch_method repo version" IS_DEP=1 || true; fi done
	@ touch /Users/alex/Desktop/erlang/.erlang.mk/query-deps.log
	@ cat /Users/alex/Desktop/erlang/.erlang.mk/query-deps.log
	

ebin:
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.
#  commands to execute (from `erlang.mk', line 5440):
	$(verbose) mkdir -p ebin/
	

build-shell-deps:
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.
#  commands to execute (from `erlang.mk', line 7639):
	$(verbose) set -e; for dep in $(ALL_SHELL_DEPS_DIRS) ; do \
	if [ -z "$(strip $(FULL))" ] && [ ! -L $$dep ] && [ -f $$dep/ebin/dep_built ]; then \
	:; \
	else \
	$(MAKE) -C $$dep IS_DEP=1; \
	if [ ! -L $$dep ] && [ -d $$dep/ebin ]; then touch $$dep/ebin/dep_built; fi; \
	fi \
	done
	

hex-docs-publish: hex-core hex-docs-tarball-create
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.
#  commands to execute (from `erlang.mk', line 7321):
	$(if $(HEX_SECRET),,$(eval HEX_SECRET := $(shell stty -echo; read -p "Secret: " secret; stty echo; echo $$secret) $(info )))
	$(gen_verbose) $(call erlang,$(call hex_docs_publish.erl,$(HEX_SECRET)))
	

hex-docs-tarball-create: /Users/alex/Desktop/erlang/.erlang.mk/erlang-docs.tar.gz
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.

list-deps: /Users/alex/Desktop/erlang/.erlang.mk/recursive-deps-list.log
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  commands to execute (from `erlang.mk', line 8333):
	$(verbose) cat $^
	

edoc: distclean-edoc doc-deps
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  commands to execute (from `erlang.mk', line 6826):
	$(gen_verbose) $(call erlang,$(call edoc.erl,$(PROJECT),$(EDOC_OPTS)))
	

hex-user-create: hex-core
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.
#  commands to execute (from `erlang.mk', line 7061):
	$(if $(HEX_USERNAME),,$(eval HEX_USERNAME := $(shell read -p "Username: " username; echo $$username)))
	$(if $(HEX_PASSWORD),,$(eval HEX_PASSWORD := $(shell stty -echo; read -p "Password: " password; stty echo; echo $$password) $(info )))
	$(if $(HEX_EMAIL),,$(eval HEX_EMAIL := $(shell read -p "Email: " email; echo $$email)))
	$(gen_verbose) $(call erlang,$(call hex_user_create.erl,$(HEX_USERNAME),$(HEX_PASSWORD),$(HEX_EMAIL)))
	

distclean-escript:
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  commands to execute (from `erlang.mk', line 6943):
	$(gen_verbose) rm -f $(ESCRIPT_FILE)
 
	

hex-release-retire: hex-core
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.
#  commands to execute (from `erlang.mk', line 7266):
	$(if $(HEX_SECRET),,$(eval HEX_SECRET := $(shell stty -echo; read -p "Secret: " secret; stty echo; echo $$secret) $(info )))
	$(gen_verbose) $(call erlang,$(call hex_release_retire.erl,$(HEX_SECRET),\
	$(if $(HEX_VERSION),$(HEX_VERSION),$(PROJECT_VERSION)),\
	$(if $(HEX_REASON),$(HEX_REASON),invalid),\
	$(HEX_MESSAGE)))
	

src/erlang_sup.erl:: /Users/alex/Desktop/erlang/.erlang.mk/last-makefile-change
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.

docs-deps:
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.

new-lib:
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.
#  commands to execute (from `erlang.mk', line 6217):
	$(error Usage: $(MAKE) new-lib in=APP)
	$(eval p := $(in))
	$(if $(shell echo $p | LC_ALL=C grep -x "[a-z0-9_]*"),,\
	$(error Error: Invalid characters in the application name))
	$(verbose) mkdir -p $(APPS_DIR)/$p/src/
	$(verbose) $(call core_render,bs_apps_Makefile,$(APPS_DIR)/$p/Makefile)
	

# Not a target:
.DEFAULT:
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.

ci::
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.

hex-key-add: hex-core
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.
#  commands to execute (from `erlang.mk', line 7091):
	$(if $(HEX_USERNAME),,$(eval HEX_USERNAME := $(shell read -p "Username: " username; echo $$username)))
	$(if $(HEX_PASSWORD),,$(eval HEX_PASSWORD := $(shell stty -echo; read -p "Password: " password; stty echo; echo $$password) $(info )))
	$(gen_verbose) $(call erlang,$(call hex_key_add.erl,$(HEX_USERNAME),$(HEX_PASSWORD),\
	$(if $(name),$(name),$(shell hostname)-erlang-mk),\
	$(if $(perm),$(perm),api)))
	

distclean-relx-rel:
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  commands to execute (from `erlang.mk', line 7554):
	$(gen_verbose) rm -rf $(RELX_OUTPUT_DIR)
	

/Users/alex/Desktop/erlang/.erlang.mk/kerl: | /Users/alex/Desktop/erlang/.erlang.mk
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.
#  commands to execute (from `erlang.mk', line 267):
	$(gen_verbose) git clone --depth 1 $(KERL_GIT) $(ERLANG_MK_TMP)/kerl
	$(verbose) cd $(ERLANG_MK_TMP)/kerl && git checkout $(KERL_COMMIT)
	$(verbose) chmod +x $(KERL)
	

/Users/alex/Desktop/erlang/.erlang.plt: deps app
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.
#  commands to execute (from `erlang.mk', line 6770):
	$(eval DEPS_LOG := $(shell test -f $(ERLANG_MK_TMP)/deps.log && \
	while read p; do test -d $$p/ebin && echo $$p/ebin; done <$(ERLANG_MK_TMP)/deps.log))
	$(verbose) dialyzer --build_plt $(DIALYZER_PLT_OPTS) --apps \
	erts kernel stdlib $(PLT_APPS) $(OTP_DEPS) $(LOCAL_DEPS) $(DEPS_LOG) || test $$? -eq 2
	$(verbose) $(ERL) -eval 'io:format("~n~s~n", [code:lib_dir(erts)]), halt().' >> $@
	

ebin/erlang.app:: /Users/alex/Desktop/erlang/.erlang.mk/last-makefile-change
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.

ebin/erlang.app:: ebin
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.

ebin/erlang.app:: src/erlang_app.erl src/erlang_sup.erl
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.
#  commands to execute (from `erlang.mk', line 5455):
	$(eval FILES_TO_COMPILE := $(filter-out src/$(PROJECT).app.src,$?))
	$(if $(strip $(FILES_TO_COMPILE)),$(call compile_erl,$(FILES_TO_COMPILE)))
	$(eval GITDESCRIBE := $(shell git describe --dirty --abbrev=7 --tags --always --first-parent 2>/dev/null \
	|| git describe --dirty --abbrev=7 --tags --always 2>/dev/null || true))
	$(eval MODULES := $(patsubst %,'%',$(sort $(notdir $(basename \
	$(filter-out $(ERLC_EXCLUDE_PATHS),$(ERL_FILES) $(CORE_FILES) $(BEAM_FILES)))))))
	$(app_verbose) printf '$(subst %,%%,$(subst $(newline),\n,$(subst ','\'',$(call app_file,$(GITDESCRIBE),$(MODULES)))))' \
	> ebin/$(PROJECT).app
	$(verbose) if ! $(call erlang,$(call validate_app_file)); then \
	echo "The .app file produced is invalid. Please verify the value of PROJECT_ENV." >&2; \
	exit 1; \
	fi
	

clean-c_src:
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.

/Users/alex/Desktop/erlang/.erlang.mk/recursive-rel-deps-list.log: /Users/alex/Desktop/erlang/deps/relx | /Users/alex/Desktop/erlang/.erlang.mk
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  commands to execute (from `erlang.mk', line 8297):
	$(verbose) rm -f $(ERLANG_MK_RECURSIVE_TMP_LIST)
	$(verbose) touch $(ERLANG_MK_RECURSIVE_TMP_LIST)
	$(verbose) set -e; for dep in $^ ; do \
	if ! grep -qs ^$$dep$$ $(ERLANG_MK_RECURSIVE_TMP_LIST); then \
	echo $$dep >> $(ERLANG_MK_RECURSIVE_TMP_LIST); \
	if grep -qs -E "^[[:blank:]]*include[[:blank:]]+(erlang\.mk|.*/erlang\.mk|.*ERLANG_MK_FILENAME.*)$$" \
	$$dep/GNUmakefile $$dep/makefile $$dep/Makefile; then \
	$(MAKE) -C $$dep fetch-deps \
	IS_DEP=1 \
	ERLANG_MK_RECURSIVE_TMP_LIST=$(ERLANG_MK_RECURSIVE_TMP_LIST); \
	fi \
	fi \
	done
	$(verbose) sort < $(ERLANG_MK_RECURSIVE_TMP_LIST) | \
	uniq > $(ERLANG_MK_RECURSIVE_TMP_LIST).sorted
	$(verbose) cmp -s $(ERLANG_MK_RECURSIVE_TMP_LIST).sorted $@ \
	|| mv $(ERLANG_MK_RECURSIVE_TMP_LIST).sorted $@
	$(verbose) rm -f $(ERLANG_MK_RECURSIVE_TMP_LIST).sorted
	$(verbose) rm $(ERLANG_MK_RECURSIVE_TMP_LIST)
	

ct: apps-ct
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.

hex-release-delete: hex-core
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.
#  commands to execute (from `erlang.mk', line 7246):
	$(if $(HEX_SECRET),,$(eval HEX_SECRET := $(shell stty -echo; read -p "Secret: " secret; stty echo; echo $$secret) $(info )))
	$(gen_verbose) $(call erlang,$(call hex_release_delete.erl,$(HEX_SECRET)))
	

rel::
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  commands to execute (from `erlang.mk', line 107):
	$(verbose) :
	

rel:: relx-rel
#  Phony target (prerequisite of .PHONY).
 
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.

run:: all
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  commands to execute (from `erlang.mk', line 7593):
	$(verbose) $(RELX_OUTPUT_DIR)/$(RELX_REL_NAME)/bin/$(RELX_REL_NAME)$(RELX_REL_EXT) $(RELX_REL_CMD)
	

/Users/alex/Desktop/erlang/deps/relx: | /Users/alex/Desktop/erlang/.erlang.mk
#  Implicit rule search has not been done.
#  Last modified 2022-05-31 13:21:07
#  File has been updated.
#  Successfully updated.
#  commands to execute (from `erlang.mk', line 5101):
	@ if test -d /Users/alex/Desktop/erlang/apps/relx; then echo "Error: Dependency" relx "conflicts with application found in /Users/alex/Desktop/erlang/apps/relx." >&2; exit 17; fi
	@ mkdir -p /Users/alex/Desktop/erlang/deps
	@echo " DEP    relx (main)"; 	git clone -q -n -- https://github.com/erlware/relx /Users/alex/Desktop/erlang/deps/relx; cd /Users/alex/Desktop/erlang/deps/relx && git checkout -q main;
	@ if [ -f /Users/alex/Desktop/erlang/deps/relx/configure.ac -o -f /Users/alex/Desktop/erlang/deps/relx/configure.in ] && [ ! -f /Users/alex/Desktop/erlang/deps/relx/configure ]; then echo " AUTO  " relx; cd /Users/alex/Desktop/erlang/deps/relx && autoreconf -Wall -vif -I m4; fi
	- @ if [ -f /Users/alex/Desktop/erlang/deps/relx/configure ]; then echo " CONF  " relx; cd /Users/alex/Desktop/erlang/deps/relx && ./configure; fi
	@ $(MAKE) --no-print-directory autopatch-relx
	

clean:: clean-crashdump
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.

clean:: clean-apps
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.

clean:: clean-app
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.

clean:: clean-test-dir
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.

clean:: coverdata-clean
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.

show-TEST_ERLC_OPTS:
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  commands to execute (from `erlang.mk', line 7727):
	@$(foreach opt,$(TEST_ERLC_OPTS) -pa ebin -I include,echo "$(opt)";)
	

fetch-shell-deps: /Users/alex/Desktop/erlang/.erlang.mk/recursive-shell-deps-list.log
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.

clean-test-dir:
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.

bootstrap-lib:
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  commands to execute (from `erlang.mk', line 6169):
	$(error Error: src/ directory already exists)
	$(eval p := $(PROJECT))
	$(if $(shell echo $p | LC_ALL=C grep -x "[a-z0-9_]*"),,\
	$(error Error: Invalid characters in the application name))
	$(verbose) $(call core_render,bs_Makefile,Makefile)
	$(verbose) echo "include erlang.mk" >> Makefile
	$(verbose) mkdir src/
	

new-nif:
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.
#  commands to execute (from `erlang.mk', line 6489):
	$(error Usage: $(MAKE) new-nif n=NAME [in=APP])
	$(verbose) mkdir -p $(C_SRC_DIR) src/
	$(verbose) $(call core_render,bs_c_nif,$(C_SRC_DIR)/$n.c)
	$(verbose) $(call core_render,bs_erl_nif,src/$n.erl)
	

app-build: ebin/erlang.app
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.
#  commands to execute (from `erlang.mk', line 5228):
	$(verbose) :
	

sphinx:
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  commands to execute (from `erlang.mk', line 7710):
	$(foreach F,$(SPHINX_FORMATS),$(call sphinx.build,$F))
	

test-build:: clean deps test-deps
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
# makefile (from `erlang.mk', line 5587)
# IS_TEST = 1
# makefile (from `erlang.mk', line 5588)
# ERLC_OPTS = $(TEST_ERLC_OPTS)
# variable set hash-table stats:
# Load=2/32=6%, Rehash=0, Collisions=0/2=0%
#  commands to execute (from `erlang.mk', line 5593):
	$(verbose) $(MAKE) --no-print-directory $(PROJECT).d ERLC_OPTS="$(call escape_dquotes,$(TEST_ERLC_OPTS))"
	$(verbose) $(MAKE) --no-print-directory app-build ERLC_OPTS="$(call escape_dquotes,$(TEST_ERLC_OPTS))"
	$(gen_verbose) touch ebin/test
	

docs:
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.

coverdata-clean:
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  commands to execute (from `erlang.mk', line 8099):
	$(gen_verbose) rm -f $(COVER_DATA_DIR)/*.coverdata $(TEST_DIR)/ct.cover.spec
	

ci-prepare:
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.

doc-deps:
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.
#  commands to execute (from `erlang.mk', line 5512):
	$(verbose) set -e; for dep in $(ALL_DOC_DEPS_DIRS) ; do $(MAKE) -C $$dep IS_DEP=1; done
	

plt: /Users/alex/Desktop/erlang/.erlang.plt
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.

sfx:
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.

/Users/alex/Desktop/erlang/.erlang.mk/recursive-test-deps-list.log: /Users/alex/Desktop/erlang/deps/relx | /Users/alex/Desktop/erlang/.erlang.mk
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  commands to execute (from `erlang.mk', line 8297):
	$(verbose) rm -f $(ERLANG_MK_RECURSIVE_TMP_LIST)
	$(verbose) touch $(ERLANG_MK_RECURSIVE_TMP_LIST)
	$(verbose) set -e; for dep in $^ ; do \
	if ! grep -qs ^$$dep$$ $(ERLANG_MK_RECURSIVE_TMP_LIST); then \
	echo $$dep >> $(ERLANG_MK_RECURSIVE_TMP_LIST); \
 
	if grep -qs -E "^[[:blank:]]*include[[:blank:]]+(erlang\.mk|.*/erlang\.mk|.*ERLANG_MK_FILENAME.*)$$" \
	$$dep/GNUmakefile $$dep/makefile $$dep/Makefile; then \
	$(MAKE) -C $$dep fetch-deps \
	IS_DEP=1 \
	ERLANG_MK_RECURSIVE_TMP_LIST=$(ERLANG_MK_RECURSIVE_TMP_LIST); \
	fi \
	fi \
	done
	$(verbose) sort < $(ERLANG_MK_RECURSIVE_TMP_LIST) | \
	uniq > $(ERLANG_MK_RECURSIVE_TMP_LIST).sorted
	$(verbose) cmp -s $(ERLANG_MK_RECURSIVE_TMP_LIST).sorted $@ \
	|| mv $(ERLANG_MK_RECURSIVE_TMP_LIST).sorted $@
	$(verbose) rm -f $(ERLANG_MK_RECURSIVE_TMP_LIST).sorted
	$(verbose) rm $(ERLANG_MK_RECURSIVE_TMP_LIST)
	

hex-release-publish: hex-core hex-release-tarball
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.
#  commands to execute (from `erlang.mk', line 7223):
	$(if $(HEX_SECRET),,$(eval HEX_SECRET := $(shell stty -echo; read -p "Secret: " secret; stty echo; echo $$secret) $(info )))
	$(gen_verbose) $(call erlang,$(call hex_release_publish.erl,$(HEX_SECRET),false))
	

shell:: build-shell-deps
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  commands to execute (from `erlang.mk', line 7650):
	$(gen_verbose) $(SHELL_ERL) -pa $(SHELL_PATHS) $(SHELL_OPTS)
	

query-shell-deps: /Users/alex/Desktop/erlang/.erlang.mk/recursive-shell-deps-list.log clean-tmp-query.log
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  commands to execute (from `erlang.mk', line 8373):
	@ rm -f /Users/alex/Desktop/erlang/.erlang.mk/query-shell-deps.log
	@ 
	@ touch /Users/alex/Desktop/erlang/.erlang.mk/query-shell-deps.log
	@ cat /Users/alex/Desktop/erlang/.erlang.mk/query-shell-deps.log
	

clean-apps:
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.
#  commands to execute (from `erlang.mk', line 5107):
	$(verbose) set -e; for dep in $(ALL_APPS_DIRS) ; do \
	$(MAKE) -C $$dep clean IS_APP=1; \
	done
	

show-ERL_LIBS:
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  commands to execute (from `erlang.mk', line 7721):
	@echo $(ERL_LIBS)
	

help-plugins::
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.
#  commands to execute (from `erlang.mk', line 8232):
	$(verbose) :
	

ci-setup:
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.

/Users/alex/Desktop/erlang/.erlang.mk:
#  Implicit rule search has not been done.
#  Last modified 2022-05-31 13:23:43
#  File has been updated.
#  Successfully updated.
#  commands to execute (from `erlang.mk', line 123):
	$(verbose) mkdir -p $(ERLANG_MK_TMP)
	

list-shell-deps: /Users/alex/Desktop/erlang/.erlang.mk/recursive-shell-deps-list.log
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  commands to execute (from `erlang.mk', line 8333):
	$(verbose) cat $^
	

cover-data-dir:
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.

check:: tests
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.

check:: dialyze
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.

/Users/alex/Desktop/erlang/.erlang.mk/recursive-deps-list.log: /Users/alex/Desktop/erlang/deps/relx | /Users/alex/Desktop/erlang/.erlang.mk
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  commands to execute (from `erlang.mk', line 8297):
	$(verbose) rm -f $(ERLANG_MK_RECURSIVE_TMP_LIST)
	$(verbose) touch $(ERLANG_MK_RECURSIVE_TMP_LIST)
	$(verbose) set -e; for dep in $^ ; do \
	if ! grep -qs ^$$dep$$ $(ERLANG_MK_RECURSIVE_TMP_LIST); then \
	echo $$dep >> $(ERLANG_MK_RECURSIVE_TMP_LIST); \
	if grep -qs -E "^[[:blank:]]*include[[:blank:]]+(erlang\.mk|.*/erlang\.mk|.*ERLANG_MK_FILENAME.*)$$" \
	$$dep/GNUmakefile $$dep/makefile $$dep/Makefile; then \
	$(MAKE) -C $$dep fetch-deps \
	IS_DEP=1 \
	ERLANG_MK_RECURSIVE_TMP_LIST=$(ERLANG_MK_RECURSIVE_TMP_LIST); \
	fi \
	fi \
	done
	$(verbose) sort < $(ERLANG_MK_RECURSIVE_TMP_LIST) | \
	uniq > $(ERLANG_MK_RECURSIVE_TMP_LIST).sorted
	$(verbose) cmp -s $(ERLANG_MK_RECURSIVE_TMP_LIST).sorted $@ \
	|| mv $(ERLANG_MK_RECURSIVE_TMP_LIST).sorted $@
	$(verbose) rm -f $(ERLANG_MK_RECURSIVE_TMP_LIST).sorted
	$(verbose) rm $(ERLANG_MK_RECURSIVE_TMP_LIST)
	

relx-relup: rel-deps app
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  commands to execute (from `erlang.mk', line 7546):
	$(call erlang,$(call relx_release.erl),-pa ebin/)
	$(MAKE) relx-post-rel
	$(call erlang,$(call relx_relup.erl),-pa ebin/)
	$(call erlang,$(call relx_tar.erl),-pa ebin/)
	

/Users/alex/Desktop/erlang/deps/hex_core: | /Users/alex/Desktop/erlang/.erlang.mk
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.
#  commands to execute (from `erlang.mk', line 7023):
	@ if test -d /Users/alex/Desktop/erlang/apps/hex_core; then echo "Error: Dependency" hex_core "conflicts with application found in /Users/alex/Desktop/erlang/apps/hex_core." >&2; exit 17; fi
	@ mkdir -p /Users/alex/Desktop/erlang/deps
	@echo " DEP    hex_core (v0.7.0)"; 	git clone -q -n -- https://github.com/hexpm/hex_core /Users/alex/Desktop/erlang/deps/hex_core; cd /Users/alex/Desktop/erlang/deps/hex_core && git checkout -q v0.7.0;
	@ if [ -f /Users/alex/Desktop/erlang/deps/hex_core/configure.ac -o -f /Users/alex/Desktop/erlang/deps/hex_core/configure.in ] && [ ! -f /Users/alex/Desktop/erlang/deps/hex_core/configure ]; then echo " AUTO  " hex_core; cd /Users/alex/Desktop/erlang/deps/hex_core && autoreconf -Wall -vif -I m4; fi
	- @ if [ -f /Users/alex/Desktop/erlang/deps/hex_core/configure ]; then echo " CONF  " hex_core; cd /Users/alex/Desktop/erlang/deps/hex_core && ./configure; fi
	@ $(MAKE) --no-print-directory autopatch-hex_core
	

fetch-doc-deps: /Users/alex/Desktop/erlang/.erlang.mk/recursive-doc-deps-list.log
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.

eunit: test-build apps-eunit cover-data-dir
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
 
#  commands to execute (from `erlang.mk', line 6997):
	$(gen_verbose) $(call erlang,$(call eunit.erl,[$(call comma_list,$(EUNIT_MODS))]),$(EUNIT_ERL_OPTS))
	

search:
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  commands to execute (from `erlang.mk', line 4308):
	$(foreach p,$(PACKAGES),$(call pkg_print,$(p)))
	

distclean-c_src-env:
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.

distclean-kerl:
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  commands to execute (from `erlang.mk', line 274):
	$(gen_verbose) rm -rf $(KERL_DIR)
	

distclean-plt:
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  commands to execute (from `erlang.mk', line 6779):
	$(gen_verbose) rm -f $(DIALYZER_PLT)
	

autopatch-hex_core::
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  commands to execute (from `erlang.mk', line 7023):
	@ if [ "hex_core" = "amqp_client" -a "" ]; then if [ ! -d /Users/alex/Desktop/erlang/deps/rabbitmq-codegen ]; then echo " PATCH  Downloading rabbitmq-codegen"; git clone https://github.com/rabbitmq/rabbitmq-codegen.git /Users/alex/Desktop/erlang/deps/rabbitmq-codegen; fi; if [ ! -d /Users/alex/Desktop/erlang/deps/rabbitmq-server ]; then echo " PATCH  Downloading rabbitmq-server"; git clone https://github.com/rabbitmq/rabbitmq-server.git /Users/alex/Desktop/erlang/deps/rabbitmq-server; fi; ln -s /Users/alex/Desktop/erlang/deps/amqp_client/deps/rabbit_common-0.0.0 /Users/alex/Desktop/erlang/deps/rabbit_common; elif [ "hex_core" = "rabbit" -a "" ]; then if [ ! -d /Users/alex/Desktop/erlang/deps/rabbitmq-codegen ]; then echo " PATCH  Downloading rabbitmq-codegen"; git clone https://github.com/rabbitmq/rabbitmq-codegen.git /Users/alex/Desktop/erlang/deps/rabbitmq-codegen; fi elif [ "hex_core" = "elixir" -a "" ]; then ln -s lib/elixir/ebin /Users/alex/Desktop/erlang/deps/elixir/; else $(call dep_autopatch,hex_core) fi
	

hex-core: /Users/alex/Desktop/erlang/deps/hex_core
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.
#  commands to execute (from `erlang.mk', line 7027):
	$(verbose) if [ ! -e $(DEPS_DIR)/hex_core/ebin/dep_built ]; then \
	$(MAKE) -C $(DEPS_DIR)/hex_core IS_DEP=1; \
	touch $(DEPS_DIR)/hex_core/ebin/dep_built; \
	fi
	

show-ERLC_OPTS:
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  commands to execute (from `erlang.mk', line 7724):
	@$(foreach opt,$(ERLC_OPTS) -pa ebin -I include,echo "$(opt)";)
	

clean-app:
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  commands to execute (from `erlang.mk', line 5486):
	$(gen_verbose) rm -rf $(PROJECT).d ebin/ priv/mibs/ $(XRL_ERL_FILES) $(YRL_ERL_FILES) \
	$(addprefix include/,$(patsubst %.mib,%.hrl,$(notdir $(MIB_FILES)))) \
	$(addprefix include/,$(patsubst %.asn1,%.hrl,$(notdir $(ASN1_FILES)))) \
	$(addprefix include/,$(patsubst %.asn1,%.asn1db,$(notdir $(ASN1_FILES)))) \
	$(addprefix src/,$(patsubst %.asn1,%.erl,$(notdir $(ASN1_FILES))))
	

rebar.config:
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  commands to execute (from `erlang.mk', line 5655):
	$(gen_verbose) $(call core_render,compat_rebar_config,rebar.config)
	

# files hash-table stats:
# Load=133/1024=13%, Rehash=0, Collisions=21/501=4%
# VPATH Search Paths

# No `vpath' search paths.

# No general (`VPATH' variable) search path.

# # of strings in strcache: 2
# # of strcache buffers: 1
# strcache size: total = 4096 / max = 4096 / min = 4096 / avg = 4096
# strcache free: total = 4077 / max = 4077 / min = 4077 / avg = 4077

# Finished Make data base on Tue May 31 13:23:57 2022

 
